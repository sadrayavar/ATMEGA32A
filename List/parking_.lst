
AVRASM ver. 2.1.30  D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm Thu Feb 08 11:45:48 2024

D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1087): warning: Register r5 already defined by the .DEF directive
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1088): warning: Register r4 already defined by the .DEF directive
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1089): warning: Register r6 already defined by the .DEF directive
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1090): warning: Register r7 already defined by the .DEF directive
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1091): warning: Register r8 already defined by the .DEF directive
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1092): warning: Register r9 already defined by the .DEF directive
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1093): warning: Register r11 already defined by the .DEF directive
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1094): warning: Register r10 already defined by the .DEF directive
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1095): warning: Register r13 already defined by the .DEF directive
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1096): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Release
                 ;Chip type              : ATmega32A
                 ;Program type           : Application
                 ;Clock frequency        : 8/000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32A
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _capacity=R5
                 	.DEF _reserved=R4
                 	.DEF _n_vurud=R6
                 	.DEF _n_vurud_msb=R7
                 	.DEF _n_khuruj=R8
                 	.DEF _n_khuruj_msb=R9
                 	.DEF _minute=R11
                 	.DEF _hour=R10
                 	.DEF _second=R13
                 	.DEF _day=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 00bc 	JMP  __RESET
000002 940c 013a 	JMP  _ext_int0_isr
000004 940c 0153 	JMP  _ext_int1_isr
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 00eb 	JMP  _timer2_ovf_isr
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
000033 0000      	.DW  0x0000
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000034 6400
000035 0000      	.DB  0x0,0x64,0x0,0x0
000036 0000
000037 0000      	.DB  0x0,0x0,0x0,0x0
000038 0001      	.DB  0x1,0x0
                 
                 _0x3:
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1144): warning: .cseg .db misalignment - padding zero byte
000039 0001      	.DB  0x1
                 _0x4:
00003a 057a      	.DB  0x7A,0x5
                 _0x0:
00003b 6173
00003c 6976
00003d 676e
00003e 6420      	.DB  0x73,0x61,0x76,0x69,0x6E,0x67,0x20,0x64
00003f 7461
000040 0061
000041 3d5a
000042 6425      	.DB  0x61,0x74,0x61,0x0,0x5A,0x3D,0x25,0x64
000043 2520
000044 2f64
000045 6425
000046 252f      	.DB  0x20,0x25,0x64,0x2F,0x25,0x64,0x2F,0x25
000047 0064
000048 6425
000049 253a
00004a 3a64      	.DB  0x64,0x0,0x25,0x64,0x3A,0x25,0x64,0x3A
00004b 6425
00004c 2020
00004d 3d52
00004e 6425      	.DB  0x25,0x64,0x20,0x20,0x52,0x3D,0x25,0x64
00004f 0020
000050 4620
000051 6c75
000052 006c      	.DB  0x20,0x0,0x20,0x46,0x75,0x6C,0x6C,0x0
000053 4520
000054 706d
000055 5400
000056 6d69      	.DB  0x20,0x45,0x6D,0x70,0x0,0x54,0x69,0x6D
000057 2065
000058 6553
000059 7474
00005a 6e69      	.DB  0x65,0x20,0x53,0x65,0x74,0x74,0x69,0x6E
00005b 2067
00005c 3e3e
00005d 4900
00005e 264e      	.DB  0x67,0x20,0x3E,0x3E,0x0,0x49,0x4E,0x26
00005f 554f
000060 2054
000061 6553
000062 7261      	.DB  0x4F,0x55,0x54,0x20,0x53,0x65,0x61,0x72
000063 6863
000064 3e20
000065 003e
000066 6552      	.DB  0x63,0x68,0x20,0x3E,0x3E,0x0,0x52,0x65
000067 6573
000068 7672
000069 5f65
00006a 6150      	.DB  0x73,0x65,0x72,0x76,0x65,0x5F,0x50,0x61
00006b 6b72
00006c 3e20
00006d 003e
00006e 6553      	.DB  0x72,0x6B,0x20,0x3E,0x3E,0x0,0x53,0x65
00006f 2074
000070 6164
000071 6174
000072 3e20      	.DB  0x74,0x20,0x64,0x61,0x74,0x61,0x20,0x3E
000073 003e
000074 6553
000075 2074
000076 696d      	.DB  0x3E,0x0,0x53,0x65,0x74,0x20,0x6D,0x69
000077 3d6e
000078 6425
000079 2020
00007a 003e      	.DB  0x6E,0x3D,0x25,0x64,0x20,0x20,0x3E,0x0
00007b 6553
00007c 2074
00007d 6f68
00007e 7275      	.DB  0x53,0x65,0x74,0x20,0x68,0x6F,0x75,0x72
00007f 253d
000080 2064
000081 3e20
000082 2500      	.DB  0x3D,0x25,0x64,0x20,0x20,0x3E,0x0,0x25
000083 2f64
000084 6425
000085 252f
000086 2064      	.DB  0x64,0x2F,0x25,0x64,0x2F,0x25,0x64,0x20
000087 6900
000088 3d6e
000089 6425
00008a 6f20      	.DB  0x0,0x69,0x6E,0x3D,0x25,0x64,0x20,0x6F
00008b 7475
00008c 253d
00008d 0064
00008e 6552      	.DB  0x75,0x74,0x3D,0x25,0x64,0x0,0x52,0x65
00008f 6573
000090 7672
000091 6465
000092 253d      	.DB  0x73,0x65,0x72,0x76,0x65,0x64,0x3D,0x25
000093 0064
000094 6553
000095 2074
000096 6f6d      	.DB  0x64,0x0,0x53,0x65,0x74,0x20,0x6D,0x6F
000097 746e
000098 3d68
000099 6425
00009a 2020      	.DB  0x6E,0x74,0x68,0x3D,0x25,0x64,0x20,0x20
00009b 003e
00009c 6553
00009d 2074
00009e 6164      	.DB  0x3E,0x0,0x53,0x65,0x74,0x20,0x64,0x61
00009f 3d79
0000a0 6425
0000a1 2020
0000a2 003e      	.DB  0x79,0x3D,0x25,0x64,0x20,0x20,0x3E,0x0
0000a3 6553
0000a4 2074
0000a5 6579
0000a6 7261      	.DB  0x53,0x65,0x74,0x20,0x79,0x65,0x61,0x72
0000a7 253d
0000a8 2064
0000a9 3e20
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1175): warning: .cseg .db misalignment - padding zero byte
0000aa 0000      	.DB  0x3D,0x25,0x64,0x20,0x20,0x3E,0x0
                 _0x2020003:
0000ab c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
0000ac 0001      	.DW  0x01
0000ad 0002      	.DW  0x02
0000ae 0066      	.DW  __REG_BIT_VARS*2
                 
0000af 000a      	.DW  0x0A
0000b0 0004      	.DW  0x04
0000b1 0068      	.DW  __REG_VARS*2
                 
0000b2 0001      	.DW  0x01
0000b3 0260      	.DW  _month
0000b4 0072      	.DW  _0x3*2
                 
0000b5 0002      	.DW  0x02
0000b6 0261      	.DW  _year
0000b7 0074      	.DW  _0x4*2
                 
0000b8 0002      	.DW  0x02
0000b9 0263      	.DW  __base_y_G101
0000ba 0156      	.DW  _0x2020003*2
                 
                 _0xFFFFFFFF:
0000bb 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
0000bc 94f8      	CLI
0000bd 27ee      	CLR  R30
0000be bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
0000bf e0f1      	LDI  R31,1
0000c0 bff5      	OUT  MCUCR,R31
0000c1 bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
0000c2 e1f8      	LDI  R31,0x18
0000c3 bdf1      	OUT  WDTCR,R31
0000c4 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
0000c5 e08d      	LDI  R24,(14-2)+1
0000c6 e0a2      	LDI  R26,2
0000c7 27bb      	CLR  R27
                 __CLEAR_REG:
0000c8 93ed      	ST   X+,R30
0000c9 958a      	DEC  R24
0000ca f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0000cb e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
0000cc e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
0000cd e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
0000ce 93ed      	ST   X+,R30
0000cf 9701      	SBIW R24,1
0000d0 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0000d1 e5e8      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0000d2 e0f1      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0000d3 9185      	LPM  R24,Z+
0000d4 9195      	LPM  R25,Z+
0000d5 9700      	SBIW R24,0
0000d6 f061      	BREQ __GLOBAL_INI_END
0000d7 91a5      	LPM  R26,Z+
0000d8 91b5      	LPM  R27,Z+
0000d9 9005      	LPM  R0,Z+
0000da 9015      	LPM  R1,Z+
0000db 01bf      	MOVW R22,R30
0000dc 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0000dd 9005      	LPM  R0,Z+
0000de 920d      	ST   X+,R0
0000df 9701      	SBIW R24,1
0000e0 f7e1      	BRNE __GLOBAL_INI_LOOP
0000e1 01fb      	MOVW R30,R22
0000e2 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0000e3 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0000e4 bfed      	OUT  SPL,R30
0000e5 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000e6 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000e7 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000e8 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000e9 940c 0172 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <mega32a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <stdio.h>
                 ;#include <alcd.h>
                 ;#define xtal 8000000
                 ;
                 ;// prototyping functions
                 ;char ok(void);
                 ;char in_out_search(void);
                 ;char time_set(void);
                 ;char reserve_park(void);
                 ;char set_data(void);
                 ;
                 ;signed char capacity = 100, reserved = 0;
                 ;unsigned int n_vurud, n_khuruj; // maximum  65535  mashin dar ruz
                 ;eeprom unsigned int vurud_stat[31], khuruj_stat[31];
                 ;eeprom unsigned char i;
                 ;bit _full = 0, _emp = 0;
                 ;signed char minute = 00, hour = 00, second = 00, day = 1, month = 1;
                 
                 	.DSEG
                 ;signed int year = 1402;
                 ;
                 ;// define timer interrupt
                 ;interrupt[TIM2_OVF] void timer2_ovf_isr(void)
                 ; 0000 0018 {
                 
                 	.CSEG
                 _timer2_ovf_isr:
                 ; .FSTART _timer2_ovf_isr
0000eb 920a      	ST   -Y,R0
0000ec 93aa      	ST   -Y,R26
0000ed 93ba      	ST   -Y,R27
0000ee 93ea      	ST   -Y,R30
0000ef 93fa      	ST   -Y,R31
0000f0 b7ef      	IN   R30,SREG
0000f1 93ea      	ST   -Y,R30
                 ; 0000 0019 
                 ; 0000 001A   if (second == 59)
0000f2 e3eb      	LDI  R30,LOW(59)
0000f3 15ed      	CP   R30,R13
0000f4 f471      	BRNE _0x5
                 ; 0000 001B   {
                 ; 0000 001C     second = 0;
0000f5 24dd      	CLR  R13
                 ; 0000 001D     if (minute == 59)
0000f6 15eb      	CP   R30,R11
0000f7 f449      	BRNE _0x6
                 ; 0000 001E     {
                 ; 0000 001F       minute = 0;
0000f8 24bb      	CLR  R11
                 ; 0000 0020       if (hour == 23)
0000f9 e1e7      	LDI  R30,LOW(23)
0000fa 15ea      	CP   R30,R10
0000fb f419      	BRNE _0x7
                 ; 0000 0021       {
                 ; 0000 0022         hour = 0;
0000fc 24aa      	CLR  R10
                 ; 0000 0023         day++;
0000fd 94c3      	INC  R12
                 ; 0000 0024       }
                 ; 0000 0025       else
0000fe c001      	RJMP _0x8
                 _0x7:
                 ; 0000 0026         hour++;
0000ff 94a3      	INC  R10
                 ; 0000 0027     }
                 _0x8:
                 ; 0000 0028     else
000100 c001      	RJMP _0x9
                 _0x6:
                 ; 0000 0029       minute++;
000101 94b3      	INC  R11
                 ; 0000 002A   }
                 _0x9:
                 ; 0000 002B   else
000102 c001      	RJMP _0xA
                 _0x5:
                 ; 0000 002C     second++;
000103 94d3      	INC  R13
                 ; 0000 002D 
                 ; 0000 002E   if ((day > 30) & (month > 6))
                 _0xA:
000104 2dac      	MOV  R26,R12
000105 e1ee      	LDI  R30,LOW(30)
000106 940e 06ef 	CALL SUBOPT_0x0
000108 940e 081f 	CALL __GTB12
00010a 21e0      	AND  R30,R0
00010b f011      	BREQ _0xB
                 ; 0000 002F   {
                 ; 0000 0030     day = 1;
00010c 940e 06f6 	CALL SUBOPT_0x1
                 ; 0000 0031     month++;
                 ; 0000 0032   }
                 ; 0000 0033 
                 ; 0000 0034   if ((day > 31) & (month <= 6))
                 _0xB:
00010e 2dac      	MOV  R26,R12
00010f e1ef      	LDI  R30,LOW(31)
000110 940e 06ef 	CALL SUBOPT_0x0
000112 940e 081a 	CALL __LEB12
000114 21e0      	AND  R30,R0
000115 f011      	BREQ _0xC
                 ; 0000 0035   {
                 ; 0000 0036     day = 1;
000116 940e 06f6 	CALL SUBOPT_0x1
                 ; 0000 0037     month++;
                 ; 0000 0038   }
                 ; 0000 0039 
                 ; 0000 003A   if ((day > 29) & (month == 12))
                 _0xC:
000118 2dac      	MOV  R26,R12
000119 e1ed      	LDI  R30,LOW(29)
00011a 940e 081f 	CALL __GTB12
00011c 2e0e      	MOV  R0,R30
00011d 91a0 0260 	LDS  R26,_month
00011f e0ec      	LDI  R30,LOW(12)
000120 940e 0815 	CALL __EQB12
000122 21e0      	AND  R30,R0
000123 f011      	BREQ _0xD
                 ; 0000 003B   {
                 ; 0000 003C     day = 1;
000124 940e 06f6 	CALL SUBOPT_0x1
                 ; 0000 003D     month++;
                 ; 0000 003E   }
                 ; 0000 003F 
                 ; 0000 0040   if (month > 12)
                 _0xD:
000126 91a0 0260 	LDS  R26,_month
000128 30ad      	CPI  R26,LOW(0xD)
000129 f044      	BRLT _0xE
                 ; 0000 0041   {
                 ; 0000 0042     month = 1;
00012a e0e1      	LDI  R30,LOW(1)
00012b 93e0 0260 	STS  _month,R30
                 ; 0000 0043     year++;
00012d 940e 06fe 	CALL SUBOPT_0x2
00012f 9631      	ADIW R30,1
000130 93fe      	ST   -X,R31
000131 93ee      	ST   -X,R30
                 ; 0000 0044   }
                 ; 0000 0045 }
                 _0xE:
000132 91e9      	LD   R30,Y+
000133 bfef      	OUT  SREG,R30
000134 91f9      	LD   R31,Y+
000135 91e9      	LD   R30,Y+
000136 91b9      	LD   R27,Y+
000137 91a9      	LD   R26,Y+
000138 9009      	LD   R0,Y+
000139 9518      	RETI
                 ; .FEND
                 ;
                 ;// define interrupt 0
                 ;interrupt[EXT_INT0] void ext_int0_isr(void)
                 ; 0000 0049 {
                 _ext_int0_isr:
                 ; .FSTART _ext_int0_isr
00013a 940e 0703 	CALL SUBOPT_0x3
                 ; 0000 004A   capacity++;
00013c 9453      	INC  R5
                 ; 0000 004B   n_khuruj++;
00013d 01f4      	MOVW R30,R8
00013e 9631      	ADIW R30,1
00013f 014f      	MOVW R8,R30
                 ; 0000 004C 
                 ; 0000 004D   if ((capacity + reserved) >= 100)
000140 940e 070a 	CALL SUBOPT_0x4
000142 f02c      	BRLT _0xF
                 ; 0000 004E   {
                 ; 0000 004F     capacity = 100 - reserved;
000143 e6e4      	LDI  R30,LOW(100)
000144 19e4      	SUB  R30,R4
000145 2e5e      	MOV  R5,R30
                 ; 0000 0050     _emp = 1;
000146 9468      	SET
000147 c001      	RJMP _0xC2
                 ; 0000 0051   }
                 ; 0000 0052   else
                 _0xF:
                 ; 0000 0053   {
                 ; 0000 0054     _emp = 0;
000148 94e8      	CLT
                 _0xC2:
000149 f821      	BLD  R2,1
                 ; 0000 0055   }
                 ; 0000 0056 
                 ; 0000 0057   if ((capacity) <= 0)
00014a e0e0      	LDI  R30,LOW(0)
00014b 15e5      	CP   R30,R5
00014c f01c      	BRLT _0x11
                 ; 0000 0058   {
                 ; 0000 0059     capacity = 0;
00014d 2455      	CLR  R5
                 ; 0000 005A     _full = 1;
00014e 9468      	SET
00014f c001      	RJMP _0xC3
                 ; 0000 005B   }
                 ; 0000 005C   else
                 _0x11:
                 ; 0000 005D   {
                 ; 0000 005E     _full = 0;
000150 94e8      	CLT
                 _0xC3:
000151 f820      	BLD  R2,0
                 ; 0000 005F   }
                 ; 0000 0060 }
000152 c018      	RJMP _0xC6
                 ; .FEND
                 ;
                 ;// define interrupt 1
                 ;interrupt[EXT_INT1] void ext_int1_isr(void)
                 ; 0000 0064 {
                 _ext_int1_isr:
                 ; .FSTART _ext_int1_isr
000153 940e 0703 	CALL SUBOPT_0x3
                 ; 0000 0065   capacity--;
000155 945a      	DEC  R5
                 ; 0000 0066   n_vurud++;
000156 01f3      	MOVW R30,R6
000157 9631      	ADIW R30,1
000158 013f      	MOVW R6,R30
                 ; 0000 0067   if ((capacity) <= 0)
000159 e0e0      	LDI  R30,LOW(0)
00015a 15e5      	CP   R30,R5
00015b f01c      	BRLT _0x13
                 ; 0000 0068   {
                 ; 0000 0069     capacity = 0;
00015c 2455      	CLR  R5
                 ; 0000 006A     _full = 1;
00015d 9468      	SET
00015e c001      	RJMP _0xC4
                 ; 0000 006B   }
                 ; 0000 006C   else
                 _0x13:
                 ; 0000 006D   {
                 ; 0000 006E     _full = 0;
00015f 94e8      	CLT
                 _0xC4:
000160 f820      	BLD  R2,0
                 ; 0000 006F   }
                 ; 0000 0070 
                 ; 0000 0071   if ((capacity + reserved) >= 100)
000161 940e 070a 	CALL SUBOPT_0x4
000163 f02c      	BRLT _0x15
                 ; 0000 0072   {
                 ; 0000 0073     capacity = 100 - reserved;
000164 e6e4      	LDI  R30,LOW(100)
000165 19e4      	SUB  R30,R4
000166 2e5e      	MOV  R5,R30
                 ; 0000 0074     _emp = 1;
000167 9468      	SET
000168 c001      	RJMP _0xC5
                 ; 0000 0075   }
                 ; 0000 0076   else
                 _0x15:
                 ; 0000 0077   {
                 ; 0000 0078     _emp = 0;
000169 94e8      	CLT
                 _0xC5:
00016a f821      	BLD  R2,1
                 ; 0000 0079   }
                 ; 0000 007A }
                 _0xC6:
00016b 91e9      	LD   R30,Y+
00016c bfef      	OUT  SREG,R30
00016d 91f9      	LD   R31,Y+
00016e 91e9      	LD   R30,Y+
00016f 91b9      	LD   R27,Y+
000170 91a9      	LD   R26,Y+
000171 9518      	RETI
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 007D {
                 _main:
                 ; .FSTART _main
                 ; 0000 007E 
                 ; 0000 007F   char buff[17], buff2[17];
                 ; 0000 0080 
                 ; 0000 0081   // GICR|=0xC0;
                 ; 0000 0082   // MCUCR=0x0A;
                 ; 0000 0083   // MCUCSR=0x00;
                 ; 0000 0084   // GIFR=0xC0;
                 ; 0000 0085 
                 ; 0000 0086   GICR |= 0xC0;
000172 97a2      	SBIW R28,34
                 ;	buff -> Y+17
                 ;	buff2 -> Y+0
000173 b7eb      	IN   R30,0x3B
000174 6ce0      	ORI  R30,LOW(0xC0)
000175 bfeb      	OUT  0x3B,R30
                 ; 0000 0087   MCUCR = 0x0B;
000176 e0eb      	LDI  R30,LOW(11)
000177 bfe5      	OUT  0x35,R30
                 ; 0000 0088   MCUCSR = 0x00;
000178 e0e0      	LDI  R30,LOW(0)
000179 bfe4      	OUT  0x34,R30
                 ; 0000 0089   GIFR = 0xC0;
00017a ece0      	LDI  R30,LOW(192)
00017b bfea      	OUT  0x3A,R30
                 ; 0000 008A 
                 ; 0000 008B   // initilize lcd
                 ; 0000 008C   lcd_init(16);
00017c e1a0      	LDI  R26,LOW(16)
00017d 940e 06a6 	CALL _lcd_init
                 ; 0000 008D   lcd_clear();
00017f 940e 0656 	CALL _lcd_clear
                 ; 0000 008E   lcd_gotoxy(0, 1);
000181 940e 0718 	CALL SUBOPT_0x5
                 ; 0000 008F   delay_ms(300);
000183 e2ac      	LDI  R26,LOW(300)
000184 e0b1      	LDI  R27,HIGH(300)
000185 940e 07f8 	CALL _delay_ms
                 ; 0000 0090 
                 ; 0000 0091   ASSR = 0x08; // timer2
000187 e0e8      	LDI  R30,LOW(8)
000188 bde2      	OUT  0x22,R30
                 ; 0000 0092   TCCR2 = 0x05;
000189 e0e5      	LDI  R30,LOW(5)
00018a bde5      	OUT  0x25,R30
                 ; 0000 0093   TCNT2 = 0x00;
00018b e0e0      	LDI  R30,LOW(0)
00018c bde4      	OUT  0x24,R30
                 ; 0000 0094   OCR2 = 0x00;
00018d bde3      	OUT  0x23,R30
                 ; 0000 0095   TIMSK = 0x40;
00018e e4e0      	LDI  R30,LOW(64)
00018f bfe9      	OUT  0x39,R30
                 ; 0000 0096 
                 ; 0000 0097   PORTA = (1 << DDD0) | (1 << DDD1) | (1 << DDD2) | (1 << DDD3) | (1 << DDD4);
000190 e1ef      	LDI  R30,LOW(31)
000191 bbeb      	OUT  0x1B,R30
                 ; 0000 0098 
                 ; 0000 0099   day = i; // i in epprom
000192 940e 071d 	CALL SUBOPT_0x6
000194 2ece      	MOV  R12,R30
                 ; 0000 009A 
                 ; 0000 009B #asm("sei")
000195 9478      	sei
                 ; 0000 009C   capacity = capacity - reserved;
000196 1854      	SUB  R5,R4
                 ; 0000 009D 
                 ; 0000 009E   while (1)
                 _0x17:
                 ; 0000 009F   {
                 ; 0000 00A0 
                 ; 0000 00A1     if (PINA .2 == 0)
000197 99ca      	SBIC 0x19,2
000198 c003      	RJMP _0x1A
                 ; 0000 00A2     {
                 ; 0000 00A3       while (PINA .2 == 0)
                 _0x1B:
000199 9bca      	SBIS 0x19,2
                 ; 0000 00A4         ;
00019a cffe      	RJMP _0x1B
                 ; 0000 00A5       ok();
00019b d07b      	RCALL _ok
                 ; 0000 00A6     }
                 ; 0000 00A7 
                 ; 0000 00A8     if (hour == 0 & minute == 0 & second == 0)
                 _0x1A:
00019c 940e 0722 	CALL SUBOPT_0x7
00019e f181      	BREQ _0x1E
                 ; 0000 00A9     { //  data will save   in 0:0:00
                 ; 0000 00AA       vurud_stat[i] = n_vurud;
00019f 940e 071d 	CALL SUBOPT_0x6
0001a1 e0a0      	LDI  R26,LOW(_vurud_stat)
0001a2 e0b0      	LDI  R27,HIGH(_vurud_stat)
0001a3 e0f0      	LDI  R31,0
0001a4 0fee      	LSL  R30
0001a5 1fff      	ROL  R31
0001a6 0fae      	ADD  R26,R30
0001a7 1fbf      	ADC  R27,R31
0001a8 01f3      	MOVW R30,R6
0001a9 940e 0850 	CALL __EEPROMWRW
                 ; 0000 00AB       khuruj_stat[i] = n_khuruj;
0001ab 940e 071d 	CALL SUBOPT_0x6
0001ad e3ae      	LDI  R26,LOW(_khuruj_stat)
0001ae e0b0      	LDI  R27,HIGH(_khuruj_stat)
0001af e0f0      	LDI  R31,0
0001b0 0fee      	LSL  R30
0001b1 1fff      	ROL  R31
0001b2 0fae      	ADD  R26,R30
0001b3 1fbf      	ADC  R27,R31
0001b4 01f4      	MOVW R30,R8
0001b5 940e 0850 	CALL __EEPROMWRW
                 ; 0000 00AC       i++;
0001b7 940e 071d 	CALL SUBOPT_0x6
0001b9 5fef      	SUBI R30,-LOW(1)
0001ba 940e 0858 	CALL __EEPROMWRB
                 ; 0000 00AD 
                 ; 0000 00AE       if (i > 30) // 30 31 29 yek mah
0001bc 940e 071d 	CALL SUBOPT_0x6
0001be 31ef      	CPI  R30,LOW(0x1F)
0001bf f028      	BRLO _0x1F
                 ; 0000 00AF         i = 0;
0001c0 e7ac      	LDI  R26,LOW(_i)
0001c1 e0b0      	LDI  R27,HIGH(_i)
0001c2 e0e0      	LDI  R30,LOW(0)
0001c3 940e 0858 	CALL __EEPROMWRB
                 ; 0000 00B0 
                 ; 0000 00B1       while (hour == 0 & minute == 0 & second == 0)
                 _0x1F:
                 _0x20:
0001c5 940e 0722 	CALL SUBOPT_0x7
0001c7 f039      	BREQ _0x22
                 ; 0000 00B2       {
                 ; 0000 00B3         lcd_clear();
0001c8 940e 0656 	CALL _lcd_clear
                 ; 0000 00B4         lcd_putsf("saving data");
                +
0001ca e7a6     +LDI R26 , LOW ( 2 * _0x0 + ( 0 ) )
0001cb e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW2FN _0x0,0
0001cc 940e 0693 	CALL _lcd_putsf
                 ; 0000 00B5       }
0001ce cff6      	RJMP _0x20
                 _0x22:
                 ; 0000 00B6     }
                 ; 0000 00B7 
                 ; 0000 00B8     sprintf(buff, "Z=%d %d/%d/%d", capacity, year, month, day);
                 _0x1E:
0001cf 01fe      	MOVW R30,R28
0001d0 9671      	ADIW R30,17
0001d1 93fa      	ST   -Y,R31
0001d2 93ea      	ST   -Y,R30
                +
0001d3 e8e2     +LDI R30 , LOW ( 2 * _0x0 + ( 12 ) )
0001d4 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 12 ) )
                 	__POINTW1FN _0x0,12
0001d5 93fa      	ST   -Y,R31
0001d6 93ea      	ST   -Y,R30
0001d7 2de5      	MOV  R30,R5
0001d8 940e 0732 	CALL SUBOPT_0x8
0001da 940e 0737 	CALL SUBOPT_0x9
0001dc 91e0 0260 	LDS  R30,_month
0001de 940e 0732 	CALL SUBOPT_0x8
0001e0 2dec      	MOV  R30,R12
0001e1 940e 0732 	CALL SUBOPT_0x8
0001e3 e180      	LDI  R24,16
0001e4 940e 05e0 	CALL _sprintf
0001e6 9664      	ADIW R28,20
                 ; 0000 00B9     sprintf(buff2, "%d:%d:%d  R=%d ", hour, minute, second, reserved);
0001e7 940e 0740 	CALL SUBOPT_0xA
                +
0001e9 e9e0     +LDI R30 , LOW ( 2 * _0x0 + ( 26 ) )
0001ea e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 26 ) )
                 	__POINTW1FN _0x0,26
0001eb 93fa      	ST   -Y,R31
0001ec 93ea      	ST   -Y,R30
0001ed 2dea      	MOV  R30,R10
0001ee 940e 0732 	CALL SUBOPT_0x8
0001f0 2deb      	MOV  R30,R11
0001f1 940e 0732 	CALL SUBOPT_0x8
0001f3 2ded      	MOV  R30,R13
0001f4 940e 0732 	CALL SUBOPT_0x8
0001f6 2de4      	MOV  R30,R4
0001f7 940e 0732 	CALL SUBOPT_0x8
0001f9 e180      	LDI  R24,16
0001fa 940e 05e0 	CALL _sprintf
0001fc 9664      	ADIW R28,20
                 ; 0000 00BA 
                 ; 0000 00BB     lcd_clear();
0001fd 940e 0656 	CALL _lcd_clear
                 ; 0000 00BC 
                 ; 0000 00BD     lcd_puts(buff);
0001ff 01de      	MOVW R26,R28
000200 9651      	ADIW R26,17
000201 940e 0684 	CALL _lcd_puts
                 ; 0000 00BE 
                 ; 0000 00BF     if (_full == 1)
000203 fe20      	SBRS R2,0
000204 c004      	RJMP _0x23
                 ; 0000 00C0     {
                 ; 0000 00C1       lcd_putsf(" Full");
                +
000205 eaa0     +LDI R26 , LOW ( 2 * _0x0 + ( 42 ) )
000206 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 42 ) )
                 	__POINTW2FN _0x0,42
000207 940e 0693 	CALL _lcd_putsf
                 ; 0000 00C2     }
                 ; 0000 00C3 
                 ; 0000 00C4     if (_emp == 1)
                 _0x23:
000209 fe21      	SBRS R2,1
00020a c004      	RJMP _0x24
                 ; 0000 00C5     {
                 ; 0000 00C6       lcd_putsf(" Emp");
                +
00020b eaa6     +LDI R26 , LOW ( 2 * _0x0 + ( 48 ) )
00020c e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 48 ) )
                 	__POINTW2FN _0x0,48
00020d 940e 0693 	CALL _lcd_putsf
                 ; 0000 00C7     }
                 ; 0000 00C8 
                 ; 0000 00C9     lcd_gotoxy(0, 1);
                 _0x24:
00020f 940e 0718 	CALL SUBOPT_0x5
                 ; 0000 00CA     lcd_puts(buff2);
000211 940e 0744 	CALL SUBOPT_0xB
                 ; 0000 00CB     delay_ms(25);
000213 940e 0747 	CALL SUBOPT_0xC
                 ; 0000 00CC   }
000215 cf81      	RJMP _0x17
                 ; 0000 00CD }
                 _0x25:
000216 cfff      	RJMP _0x25
                 ; .FEND
                 ;
                 ;/// Functions 4 ok and...
                 ;
                 ;char ok(void)
                 ; 0000 00D2 {
                 _ok:
                 ; .FSTART _ok
                 ; 0000 00D3   char _chose = 0;
                 ; 0000 00D4   while (1)
000217 931a      	ST   -Y,R17
                 ;	_chose -> R17
000218 e010      	LDI  R17,0
                 _0x26:
                 ; 0000 00D5   {
                 ; 0000 00D6     if (_chose == 0)
000219 3010      	CPI  R17,0
00021a f431      	BRNE _0x29
                 ; 0000 00D7     {
                 ; 0000 00D8       lcd_clear();
00021b 940e 0656 	CALL _lcd_clear
                 ; 0000 00D9       lcd_putsf("Time Setting >>");
                +
00021d eaab     +LDI R26 , LOW ( 2 * _0x0 + ( 53 ) )
00021e e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 53 ) )
                 	__POINTW2FN _0x0,53
00021f 940e 0693 	CALL _lcd_putsf
                 ; 0000 00DA     }
                 ; 0000 00DB 
                 ; 0000 00DC     if (_chose == 1)
                 _0x29:
000221 3011      	CPI  R17,1
000222 f431      	BRNE _0x2A
                 ; 0000 00DD     {
                 ; 0000 00DE       lcd_clear();
000223 940e 0656 	CALL _lcd_clear
                 ; 0000 00DF       lcd_putsf("IN&OUT Search >>");
                +
000225 ebab     +LDI R26 , LOW ( 2 * _0x0 + ( 69 ) )
000226 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 69 ) )
                 	__POINTW2FN _0x0,69
000227 940e 0693 	CALL _lcd_putsf
                 ; 0000 00E0     }
                 ; 0000 00E1 
                 ; 0000 00E2     if (_chose == 2)
                 _0x2A:
000229 3012      	CPI  R17,2
00022a f431      	BRNE _0x2B
                 ; 0000 00E3     {
                 ; 0000 00E4       lcd_clear();
00022b 940e 0656 	CALL _lcd_clear
                 ; 0000 00E5       lcd_putsf("Reserve_Park >>");
                +
00022d ecac     +LDI R26 , LOW ( 2 * _0x0 + ( 86 ) )
00022e e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 86 ) )
                 	__POINTW2FN _0x0,86
00022f 940e 0693 	CALL _lcd_putsf
                 ; 0000 00E6     }
                 ; 0000 00E7 
                 ; 0000 00E8     if (_chose == 3)
                 _0x2B:
000231 3013      	CPI  R17,3
000232 f431      	BRNE _0x2C
                 ; 0000 00E9     {
                 ; 0000 00EA       lcd_clear();
000233 940e 0656 	CALL _lcd_clear
                 ; 0000 00EB       lcd_putsf("Set data >>");
                +
000235 edac     +LDI R26 , LOW ( 2 * _0x0 + ( 102 ) )
000236 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 102 ) )
                 	__POINTW2FN _0x0,102
000237 940e 0693 	CALL _lcd_putsf
                 ; 0000 00EC     }
                 ; 0000 00ED 
                 ; 0000 00EE     if (PINA .3 == 0)
                 _0x2C:
000239 99cb      	SBIC 0x19,3
00023a c006      	RJMP _0x2D
                 ; 0000 00EF     { // NEXT
                 ; 0000 00F0       while (PINA .3 == 0)
                 _0x2E:
00023b 9bcb      	SBIS 0x19,3
                 ; 0000 00F1         ;
00023c cffe      	RJMP _0x2E
                 ; 0000 00F2       _chose++;
00023d 5f1f      	SUBI R17,-1
                 ; 0000 00F3       if (_chose >= 4)
00023e 3014      	CPI  R17,4
00023f f008      	BRLO _0x31
                 ; 0000 00F4         _chose = 0;
000240 e010      	LDI  R17,LOW(0)
                 ; 0000 00F5     }
                 _0x31:
                 ; 0000 00F6 
                 ; 0000 00F7     if (PINA .4 == 0)
                 _0x2D:
000241 99cc      	SBIC 0x19,4
000242 c004      	RJMP _0x32
                 ; 0000 00F8     { // Back
                 ; 0000 00F9       while (PINA .4 == 0)
                 _0x33:
000243 9bcc      	SBIS 0x19,4
                 ; 0000 00FA         ;
000244 cffe      	RJMP _0x33
                 ; 0000 00FB       return 0;
000245 e0e0      	LDI  R30,LOW(0)
000246 c025      	RJMP _0x2080008
                 ; 0000 00FC     }
                 ; 0000 00FD 
                 ; 0000 00FE     if (PINA .2 == 0 & _chose == 0)
                 _0x32:
000247 940e 074b 	CALL SUBOPT_0xD
000249 940e 0754 	CALL SUBOPT_0xE
00024b f019      	BREQ _0x36
                 ; 0000 00FF     { // chose time_setting
                 ; 0000 0100       while (PINA .2 == 0)
                 _0x37:
00024c 9bca      	SBIS 0x19,2
                 ; 0000 0101         ;
00024d cffe      	RJMP _0x37
                 ; 0000 0102       time_set();
00024e d01f      	RCALL _time_set
                 ; 0000 0103     }
                 ; 0000 0104 
                 ; 0000 0105     if (PINA .2 == 0 & _chose == 1)
                 _0x36:
00024f 940e 074b 	CALL SUBOPT_0xD
000251 940e 0759 	CALL SUBOPT_0xF
000253 f019      	BREQ _0x3A
                 ; 0000 0106     { // chose in_out_search
                 ; 0000 0107       while (PINA .2 == 0)
                 _0x3B:
000254 9bca      	SBIS 0x19,2
                 ; 0000 0108         ;
000255 cffe      	RJMP _0x3B
                 ; 0000 0109       in_out_search();
000256 d078      	RCALL _in_out_search
                 ; 0000 010A     }
                 ; 0000 010B 
                 ; 0000 010C     if (PINA .2 == 0 & _chose == 2)
                 _0x3A:
000257 940e 074b 	CALL SUBOPT_0xD
000259 940e 075e 	CALL SUBOPT_0x10
00025b f019      	BREQ _0x3E
                 ; 0000 010D     { // chose reserve
                 ; 0000 010E       while (PINA .2 == 0)
                 _0x3F:
00025c 9bca      	SBIS 0x19,2
                 ; 0000 010F         ;
00025d cffe      	RJMP _0x3F
                 ; 0000 0110       reserve_park();
00025e d137      	RCALL _reserve_park
                 ; 0000 0111     }
                 ; 0000 0112 
                 ; 0000 0113     if (PINA .2 == 0 & _chose == 3)
                 _0x3E:
00025f 940e 074b 	CALL SUBOPT_0xD
000261 e0e3      	LDI  R30,LOW(3)
000262 940e 0815 	CALL __EQB12
000264 21e0      	AND  R30,R0
000265 f019      	BREQ _0x42
                 ; 0000 0114     { // chose set data
                 ; 0000 0115       while (PINA .2 == 0)
                 _0x43:
000266 9bca      	SBIS 0x19,2
                 ; 0000 0116         ;
000267 cffe      	RJMP _0x43
                 ; 0000 0117       set_data();
000268 d157      	RCALL _set_data
                 ; 0000 0118     }
                 ; 0000 0119 
                 ; 0000 011A     delay_ms(25);
                 _0x42:
000269 940e 0747 	CALL SUBOPT_0xC
                 ; 0000 011B   }
00026b cfad      	RJMP _0x26
                 ; 0000 011C }
                 _0x2080008:
00026c 9119      	LD   R17,Y+
00026d 9508      	RET
                 ; .FEND
                 ;
                 ;/// Time setting
                 ;
                 ;char time_set(void)
                 ; 0000 0121 {
                 _time_set:
                 ; .FSTART _time_set
00026e 92ff      	PUSH R15
                 ; 0000 0122   bit _chose = 0;
                 ; 0000 0123   char buff[17];
                 ; 0000 0124   while (1)
00026f 9761      	SBIW R28,17
                 ;	_chose -> R15.0
                 ;	buff -> Y+0
000270 24ff      	CLR  R15
                 _0x46:
                 ; 0000 0125   {
                 ; 0000 0126     if (_chose == 0)
000271 fcf0      	SBRC R15,0
000272 c00b      	RJMP _0x49
                 ; 0000 0127     {
                 ; 0000 0128       sprintf(buff, "Set min=%d  >", minute);
000273 940e 0740 	CALL SUBOPT_0xA
                +
000275 eee8     +LDI R30 , LOW ( 2 * _0x0 + ( 114 ) )
000276 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 114 ) )
                 	__POINTW1FN _0x0,114
000277 93fa      	ST   -Y,R31
000278 93ea      	ST   -Y,R30
000279 2deb      	MOV  R30,R11
00027a 940e 0732 	CALL SUBOPT_0x8
00027c 940e 0763 	CALL SUBOPT_0x11
                 ; 0000 0129       lcd_clear();
                 ; 0000 012A       lcd_puts(buff);
                 ; 0000 012B     }
                 ; 0000 012C 
                 ; 0000 012D     if (_chose == 1)
                 _0x49:
00027e fef0      	SBRS R15,0
00027f c00b      	RJMP _0x4A
                 ; 0000 012E     {
                 ; 0000 012F       sprintf(buff, "Set hour=%d  >", hour);
000280 940e 0740 	CALL SUBOPT_0xA
                +
000282 efe6     +LDI R30 , LOW ( 2 * _0x0 + ( 128 ) )
000283 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 128 ) )
                 	__POINTW1FN _0x0,128
000284 93fa      	ST   -Y,R31
000285 93ea      	ST   -Y,R30
000286 2dea      	MOV  R30,R10
000287 940e 0732 	CALL SUBOPT_0x8
000289 940e 0763 	CALL SUBOPT_0x11
                 ; 0000 0130       lcd_clear();
                 ; 0000 0131       lcd_puts(buff);
                 ; 0000 0132     }
                 ; 0000 0133 
                 ; 0000 0134     if (PINA .1 == 0 & _chose == 0)
                 _0x4A:
00028b 940e 076a 	CALL SUBOPT_0x12
00028d 940e 0754 	CALL SUBOPT_0xE
00028f f039      	BREQ _0x4B
                 ; 0000 0135     { // UP     min
                 ; 0000 0136       while (PINA .1 == 0)
                 _0x4C:
000290 9bc9      	SBIS 0x19,1
                 ; 0000 0137         ;
000291 cffe      	RJMP _0x4C
                 ; 0000 0138       minute++;
000292 94b3      	INC  R11
                 ; 0000 0139       if (minute > 59)
000293 e3eb      	LDI  R30,LOW(59)
000294 15eb      	CP   R30,R11
000295 f40c      	BRGE _0x4F
                 ; 0000 013A         minute = 0;
000296 24bb      	CLR  R11
                 ; 0000 013B     }
                 _0x4F:
                 ; 0000 013C 
                 ; 0000 013D     if (PINA .0 == 0 & _chose == 0)
                 _0x4B:
000297 940e 0775 	CALL SUBOPT_0x13
000299 940e 0754 	CALL SUBOPT_0xE
00029b f041      	BREQ _0x50
                 ; 0000 013E     { // DOWN    min
                 ; 0000 013F       while (PINA .0 == 0)
                 _0x51:
00029c 9bc8      	SBIS 0x19,0
                 ; 0000 0140         ;
00029d cffe      	RJMP _0x51
                 ; 0000 0141       minute--;
00029e 94ba      	DEC  R11
                 ; 0000 0142       if (minute < 0)
00029f e0e0      	LDI  R30,LOW(0)
0002a0 16be      	CP   R11,R30
0002a1 f414      	BRGE _0x54
                 ; 0000 0143         minute = 59;
0002a2 e3eb      	LDI  R30,LOW(59)
0002a3 2ebe      	MOV  R11,R30
                 ; 0000 0144     }
                 _0x54:
                 ; 0000 0145 
                 ; 0000 0146     if (PINA .1 == 0 & _chose == 1)
                 _0x50:
0002a4 940e 076a 	CALL SUBOPT_0x12
0002a6 940e 0759 	CALL SUBOPT_0xF
0002a8 f039      	BREQ _0x55
                 ; 0000 0147     { // UP    hour
                 ; 0000 0148       while (PINA .1 == 0)
                 _0x56:
0002a9 9bc9      	SBIS 0x19,1
                 ; 0000 0149         ;
0002aa cffe      	RJMP _0x56
                 ; 0000 014A       hour++;
0002ab 94a3      	INC  R10
                 ; 0000 014B       if (hour > 23)
0002ac e1e7      	LDI  R30,LOW(23)
0002ad 15ea      	CP   R30,R10
0002ae f40c      	BRGE _0x59
                 ; 0000 014C         hour = 0;
0002af 24aa      	CLR  R10
                 ; 0000 014D     }
                 _0x59:
                 ; 0000 014E 
                 ; 0000 014F     if (PINA .0 == 0 & _chose == 1)
                 _0x55:
0002b0 940e 0775 	CALL SUBOPT_0x13
0002b2 940e 0759 	CALL SUBOPT_0xF
0002b4 f041      	BREQ _0x5A
                 ; 0000 0150     { // DOWN    hour
                 ; 0000 0151       while (PINA .0 == 0)
                 _0x5B:
0002b5 9bc8      	SBIS 0x19,0
                 ; 0000 0152         ;
0002b6 cffe      	RJMP _0x5B
                 ; 0000 0153       hour--;
0002b7 94aa      	DEC  R10
                 ; 0000 0154       if (hour < 0)
0002b8 e0e0      	LDI  R30,LOW(0)
0002b9 16ae      	CP   R10,R30
0002ba f414      	BRGE _0x5E
                 ; 0000 0155         hour = 23;
0002bb e1e7      	LDI  R30,LOW(23)
0002bc 2eae      	MOV  R10,R30
                 ; 0000 0156     }
                 _0x5E:
                 ; 0000 0157 
                 ; 0000 0158     if (PINA .3 == 0)
                 _0x5A:
0002bd 99cb      	SBIC 0x19,3
0002be c004      	RJMP _0x5F
                 ; 0000 0159     { // NEXT
                 ; 0000 015A       while (PINA .3 == 0)
                 _0x60:
0002bf 9bcb      	SBIS 0x19,3
                 ; 0000 015B         ;
0002c0 cffe      	RJMP _0x60
                 ; 0000 015C       _chose = !_chose;
0002c1 e0e1      	LDI  R30,LOW(1)
0002c2 26fe      	EOR  R15,R30
                 ; 0000 015D     }
                 ; 0000 015E 
                 ; 0000 015F     if (PINA .4 == 0)
                 _0x5F:
0002c3 99cc      	SBIC 0x19,4
0002c4 c004      	RJMP _0x63
                 ; 0000 0160     { // Back
                 ; 0000 0161       while (PINA .4 == 0)
                 _0x64:
0002c5 9bcc      	SBIS 0x19,4
                 ; 0000 0162         ;
0002c6 cffe      	RJMP _0x64
                 ; 0000 0163       return 0;
0002c7 e0e0      	LDI  R30,LOW(0)
0002c8 c003      	RJMP _0x2080007
                 ; 0000 0164     }
                 ; 0000 0165 
                 ; 0000 0166     delay_ms(25);
                 _0x63:
0002c9 940e 0747 	CALL SUBOPT_0xC
                 ; 0000 0167   }
0002cb cfa5      	RJMP _0x46
                 ; 0000 0168 }
                 _0x2080007:
0002cc 9661      	ADIW R28,17
0002cd 90ff      	POP  R15
0002ce 9508      	RET
                 ; .FEND
                 ;
                 ;/// IN&OUT Search
                 ;char in_out_search(void)
                 ; 0000 016C {
                 _in_out_search:
                 ; .FSTART _in_out_search
0002cf 92ff      	PUSH R15
                 ; 0000 016D   char t_month = month, buff[17], buff2[17];
                 ; 0000 016E   char i_temp = i;
                 ; 0000 016F   bit bit_m = 0;
                 ; 0000 0170   while (1)
0002d0 97a2      	SBIW R28,34
0002d1 931a      	ST   -Y,R17
0002d2 930a      	ST   -Y,R16
                 ;	t_month -> R17
                 ;	buff -> Y+19
                 ;	buff2 -> Y+2
                 ;	i_temp -> R16
                 ;	bit_m -> R15.0
0002d3 24ff      	CLR  R15
0002d4 9110 0260 	LDS  R17,_month
0002d6 940e 071d 	CALL SUBOPT_0x6
0002d8 2f0e      	MOV  R16,R30
                 _0x67:
                 ; 0000 0171   {
                 ; 0000 0172 
                 ; 0000 0173     if (PINA .1 == 0)
0002d9 99c9      	SBIC 0x19,1
0002da c03b      	RJMP _0x6A
                 ; 0000 0174     { // UP
                 ; 0000 0175       while (PINA .1 == 0)
                 _0x6B:
0002db 9bc9      	SBIS 0x19,1
                 ; 0000 0176         ;
0002dc cffe      	RJMP _0x6B
                 ; 0000 0177       i_temp++;
0002dd 5f0f      	SUBI R16,-1
                 ; 0000 0178 
                 ; 0000 0179       if (i_temp > i & bit_m == 0)
0002de 940e 071d 	CALL SUBOPT_0x6
0002e0 2fa0      	MOV  R26,R16
0002e1 940e 082e 	CALL __GTB12U
0002e3 940e 0780 	CALL SUBOPT_0x14
0002e5 f031      	BREQ _0x6E
                 ; 0000 017A       {
                 ; 0000 017B         i_temp = i;
0002e6 940e 071d 	CALL SUBOPT_0x6
0002e8 2f0e      	MOV  R16,R30
                 ; 0000 017C         t_month--;
0002e9 5011      	SUBI R17,1
                 ; 0000 017D         bit_m = 1;
0002ea 9468      	SET
0002eb f8f0      	BLD  R15,0
                 ; 0000 017E       }
                 ; 0000 017F 
                 ; 0000 0180       if (t_month <= 6 & i_temp > 31 & bit_m == 1)
                 _0x6E:
0002ec 2fa1      	MOV  R26,R17
0002ed e0e6      	LDI  R30,LOW(6)
0002ee 940e 0824 	CALL __LEB12U
0002f0 2e0e      	MOV  R0,R30
0002f1 2fa0      	MOV  R26,R16
0002f2 e1ef      	LDI  R30,LOW(31)
0002f3 940e 0785 	CALL SUBOPT_0x15
0002f5 f011      	BREQ _0x6F
                 ; 0000 0181       {
                 ; 0000 0182         i_temp = 1;
0002f6 940e 078c 	CALL SUBOPT_0x16
                 ; 0000 0183         t_month++;
                 ; 0000 0184         bit_m = 0;
                 ; 0000 0185       }
                 ; 0000 0186 
                 ; 0000 0187       if (t_month > 6 & i_temp > 30 & bit_m == 1)
                 _0x6F:
0002f8 2fa1      	MOV  R26,R17
0002f9 e0e6      	LDI  R30,LOW(6)
0002fa 940e 082e 	CALL __GTB12U
0002fc 2e0e      	MOV  R0,R30
0002fd 2fa0      	MOV  R26,R16
0002fe e1ee      	LDI  R30,LOW(30)
0002ff 940e 0785 	CALL SUBOPT_0x15
000301 f011      	BREQ _0x70
                 ; 0000 0188       {
                 ; 0000 0189         i_temp = 1;
000302 940e 078c 	CALL SUBOPT_0x16
                 ; 0000 018A         t_month++;
                 ; 0000 018B         bit_m = 0;
                 ; 0000 018C       }
                 ; 0000 018D 
                 ; 0000 018E       if (t_month == 12 & i_temp > 29 & bit_m == 1)
                 _0x70:
000304 2fa1      	MOV  R26,R17
000305 e0ec      	LDI  R30,LOW(12)
000306 940e 0815 	CALL __EQB12
000308 2e0e      	MOV  R0,R30
000309 2fa0      	MOV  R26,R16
00030a e1ed      	LDI  R30,LOW(29)
00030b 940e 0785 	CALL SUBOPT_0x15
00030d f011      	BREQ _0x71
                 ; 0000 018F       {
                 ; 0000 0190         i_temp = 1;
00030e 940e 078c 	CALL SUBOPT_0x16
                 ; 0000 0191         t_month++;
                 ; 0000 0192         bit_m = 0;
                 ; 0000 0193       }
                 ; 0000 0194 
                 ; 0000 0195       if (t_month == 0)
                 _0x71:
000310 3010      	CPI  R17,0
000311 f409      	BRNE _0x72
                 ; 0000 0196         t_month = 12;
000312 e01c      	LDI  R17,LOW(12)
                 ; 0000 0197 
                 ; 0000 0198       if (t_month > 12)
                 _0x72:
000313 301d      	CPI  R17,13
000314 f008      	BRLO _0x73
                 ; 0000 0199         t_month = 1;
000315 e011      	LDI  R17,LOW(1)
                 ; 0000 019A     }
                 _0x73:
                 ; 0000 019B 
                 ; 0000 019C     if (PINA .0 == 0)
                 _0x6A:
000316 99c8      	SBIC 0x19,0
000317 c034      	RJMP _0x74
                 ; 0000 019D     { // DOWN
                 ; 0000 019E       while (PINA .0 == 0)
                 _0x75:
000318 9bc8      	SBIS 0x19,0
                 ; 0000 019F         ;
000319 cffe      	RJMP _0x75
                 ; 0000 01A0       i_temp--;
00031a 5001      	SUBI R16,1
                 ; 0000 01A1 
                 ; 0000 01A2       if (i_temp == 0 & bit_m == 0)
00031b 2fa0      	MOV  R26,R16
00031c e0e0      	LDI  R30,LOW(0)
00031d 940e 0815 	CALL __EQB12
00031f 940e 0780 	CALL SUBOPT_0x14
000321 f091      	BREQ _0x78
                 ; 0000 01A3       {
                 ; 0000 01A4 
                 ; 0000 01A5         t_month--;
000322 5011      	SUBI R17,1
                 ; 0000 01A6 
                 ; 0000 01A7         if (t_month == 0)
000323 3010      	CPI  R17,0
000324 f409      	BRNE _0x79
                 ; 0000 01A8           t_month = 12;
000325 e01c      	LDI  R17,LOW(12)
                 ; 0000 01A9 
                 ; 0000 01AA         if (t_month > 12)
                 _0x79:
000326 301d      	CPI  R17,13
000327 f008      	BRLO _0x7A
                 ; 0000 01AB           t_month = 1;
000328 e011      	LDI  R17,LOW(1)
                 ; 0000 01AC 
                 ; 0000 01AD         if (t_month <= 6)
                 _0x7A:
000329 3017      	CPI  R17,7
00032a f408      	BRSH _0x7B
                 ; 0000 01AE           i_temp = 31;
00032b e10f      	LDI  R16,LOW(31)
                 ; 0000 01AF 
                 ; 0000 01B0         if (t_month > 6)
                 _0x7B:
00032c 3017      	CPI  R17,7
00032d f008      	BRLO _0x7C
                 ; 0000 01B1           i_temp = 30;
00032e e10e      	LDI  R16,LOW(30)
                 ; 0000 01B2 
                 ; 0000 01B3         if (t_month == 12)
                 _0x7C:
00032f 301c      	CPI  R17,12
000330 f409      	BRNE _0x7D
                 ; 0000 01B4           i_temp = 29;
000331 e10d      	LDI  R16,LOW(29)
                 ; 0000 01B5 
                 ; 0000 01B6         bit_m = 1;
                 _0x7D:
000332 9468      	SET
000333 f8f0      	BLD  R15,0
                 ; 0000 01B7       }
                 ; 0000 01B8 
                 ; 0000 01B9       if (i_temp < i & bit_m == 1)
                 _0x78:
000334 940e 071d 	CALL SUBOPT_0x6
000336 2fa0      	MOV  R26,R16
000337 940e 0829 	CALL __LTB12U
000339 2e0e      	MOV  R0,R30
00033a e0a0      	LDI  R26,0
00033b fcf0      	SBRC R15,0
00033c e0a1      	LDI  R26,1
00033d 940e 0759 	CALL SUBOPT_0xF
00033f f031      	BREQ _0x7E
                 ; 0000 01BA       {
                 ; 0000 01BB         i_temp = i;
000340 940e 071d 	CALL SUBOPT_0x6
000342 2f0e      	MOV  R16,R30
                 ; 0000 01BC         t_month++;
000343 5f1f      	SUBI R17,-1
                 ; 0000 01BD         bit_m = 0;
000344 94e8      	CLT
000345 f8f0      	BLD  R15,0
                 ; 0000 01BE       }
                 ; 0000 01BF 
                 ; 0000 01C0       if (t_month == 0)
                 _0x7E:
000346 3010      	CPI  R17,0
000347 f409      	BRNE _0x7F
                 ; 0000 01C1         t_month = 12;
000348 e01c      	LDI  R17,LOW(12)
                 ; 0000 01C2 
                 ; 0000 01C3       if (t_month > 12)
                 _0x7F:
000349 301d      	CPI  R17,13
00034a f008      	BRLO _0x80
                 ; 0000 01C4         t_month = 1;
00034b e011      	LDI  R17,LOW(1)
                 ; 0000 01C5     }
                 _0x80:
                 ; 0000 01C6 
                 ; 0000 01C7     sprintf(buff, "%d/%d/%d ", year, t_month, i_temp);
                 _0x74:
00034c 01fe      	MOVW R30,R28
00034d 9673      	ADIW R30,19
00034e 93fa      	ST   -Y,R31
00034f 93ea      	ST   -Y,R30
                +
000350 e0e5     +LDI R30 , LOW ( 2 * _0x0 + ( 143 ) )
000351 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 143 ) )
                 	__POINTW1FN _0x0,143
000352 93fa      	ST   -Y,R31
000353 93ea      	ST   -Y,R30
000354 940e 0737 	CALL SUBOPT_0x9
000356 2fe1      	MOV  R30,R17
000357 27ff      	CLR  R31
000358 2766      	CLR  R22
000359 2777      	CLR  R23
00035a 940e 083b 	CALL __PUTPARD1
00035c 2fe0      	MOV  R30,R16
00035d 27ff      	CLR  R31
00035e 2766      	CLR  R22
00035f 2777      	CLR  R23
000360 940e 083b 	CALL __PUTPARD1
000362 e08c      	LDI  R24,12
000363 940e 05e0 	CALL _sprintf
000365 9660      	ADIW R28,16
                 ; 0000 01C8     sprintf(buff2, "in=%d out=%d", vurud_stat[i_temp], khuruj_stat[i_temp]);
000366 01fe      	MOVW R30,R28
000367 9632      	ADIW R30,2
000368 93fa      	ST   -Y,R31
000369 93ea      	ST   -Y,R30
                +
00036a e0ef     +LDI R30 , LOW ( 2 * _0x0 + ( 153 ) )
00036b e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 153 ) )
                 	__POINTW1FN _0x0,153
00036c 93fa      	ST   -Y,R31
00036d 93ea      	ST   -Y,R30
00036e 2fe0      	MOV  R30,R16
00036f e0a0      	LDI  R26,LOW(_vurud_stat)
000370 e0b0      	LDI  R27,HIGH(_vurud_stat)
000371 940e 0791 	CALL SUBOPT_0x17
000373 2fe0      	MOV  R30,R16
000374 e3ae      	LDI  R26,LOW(_khuruj_stat)
000375 e0b0      	LDI  R27,HIGH(_khuruj_stat)
000376 940e 0791 	CALL SUBOPT_0x17
000378 e088      	LDI  R24,8
000379 940e 05e0 	CALL _sprintf
00037b 962c      	ADIW R28,12
                 ; 0000 01C9 
                 ; 0000 01CA     lcd_clear();
00037c 940e 0656 	CALL _lcd_clear
                 ; 0000 01CB     lcd_puts(buff);
00037e 01de      	MOVW R26,R28
00037f 9653      	ADIW R26,19
000380 940e 0684 	CALL _lcd_puts
                 ; 0000 01CC     lcd_gotoxy(0, 1);
000382 940e 0718 	CALL SUBOPT_0x5
                 ; 0000 01CD     lcd_puts(buff2);
000384 01de      	MOVW R26,R28
000385 9612      	ADIW R26,2
000386 940e 0684 	CALL _lcd_puts
                 ; 0000 01CE 
                 ; 0000 01CF     if (PINA .4 == 0)
000388 99cc      	SBIC 0x19,4
000389 c004      	RJMP _0x81
                 ; 0000 01D0     { // Back
                 ; 0000 01D1       while (PINA .4 == 0)
                 _0x82:
00038a 9bcc      	SBIS 0x19,4
                 ; 0000 01D2         ;
00038b cffe      	RJMP _0x82
                 ; 0000 01D3       return 0;
00038c e0e0      	LDI  R30,LOW(0)
00038d c003      	RJMP _0x2080006
                 ; 0000 01D4     }
                 ; 0000 01D5     delay_ms(25);
                 _0x81:
00038e 940e 0747 	CALL SUBOPT_0xC
                 ; 0000 01D6   }
000390 cf48      	RJMP _0x67
                 ; 0000 01D7 }
                 _0x2080006:
000391 8119      	LDD  R17,Y+1
000392 8108      	LDD  R16,Y+0
000393 96a4      	ADIW R28,36
000394 90ff      	POP  R15
000395 9508      	RET
                 ; .FEND
                 ;
                 ;// reserve_park
                 ;
                 ;char reserve_park(void)
                 ; 0000 01DC {
                 _reserve_park:
                 ; .FSTART _reserve_park
                 ; 0000 01DD   char buff[17];
                 ; 0000 01DE 
                 ; 0000 01DF   while (1)
000396 9761      	SBIW R28,17
                 ;	buff -> Y+0
                 _0x85:
                 ; 0000 01E0   {
                 ; 0000 01E1     sprintf(buff, "Reserved=%d", reserved);
000397 940e 0740 	CALL SUBOPT_0xA
                +
000399 e1ec     +LDI R30 , LOW ( 2 * _0x0 + ( 166 ) )
00039a e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 166 ) )
                 	__POINTW1FN _0x0,166
00039b 93fa      	ST   -Y,R31
00039c 93ea      	ST   -Y,R30
00039d 2de4      	MOV  R30,R4
00039e 940e 0732 	CALL SUBOPT_0x8
0003a0 940e 0763 	CALL SUBOPT_0x11
                 ; 0000 01E2     lcd_clear();
                 ; 0000 01E3     lcd_puts(buff);
                 ; 0000 01E4 
                 ; 0000 01E5     if (PINA .1 == 0)
0003a2 99c9      	SBIC 0x19,1
0003a3 c003      	RJMP _0x88
                 ; 0000 01E6     { // UP
                 ; 0000 01E7       while (PINA .1 == 0)
                 _0x89:
0003a4 9bc9      	SBIS 0x19,1
                 ; 0000 01E8         ;
0003a5 cffe      	RJMP _0x89
                 ; 0000 01E9       reserved++;
0003a6 9443      	INC  R4
                 ; 0000 01EA     }
                 ; 0000 01EB 
                 ; 0000 01EC     if (reserved >= 100)
                 _0x88:
0003a7 e6e4      	LDI  R30,LOW(100)
0003a8 164e      	CP   R4,R30
0003a9 f014      	BRLT _0x8C
                 ; 0000 01ED     {
                 ; 0000 01EE       reserved = 99;
0003aa e6e3      	LDI  R30,LOW(99)
0003ab 2e4e      	MOV  R4,R30
                 ; 0000 01EF     }
                 ; 0000 01F0 
                 ; 0000 01F1     if (PINA .0 == 0)
                 _0x8C:
0003ac 99c8      	SBIC 0x19,0
0003ad c003      	RJMP _0x8D
                 ; 0000 01F2     { // DOWN
                 ; 0000 01F3       while (PINA .0 == 0)
                 _0x8E:
0003ae 9bc8      	SBIS 0x19,0
                 ; 0000 01F4         ;
0003af cffe      	RJMP _0x8E
                 ; 0000 01F5       reserved--;
0003b0 944a      	DEC  R4
                 ; 0000 01F6     }
                 ; 0000 01F7 
                 ; 0000 01F8     if (reserved <= 0)
                 _0x8D:
0003b1 e0e0      	LDI  R30,LOW(0)
0003b2 15e4      	CP   R30,R4
0003b3 f00c      	BRLT _0x91
                 ; 0000 01F9     {
                 ; 0000 01FA       reserved = 0;
0003b4 2444      	CLR  R4
                 ; 0000 01FB     }
                 ; 0000 01FC 
                 ; 0000 01FD     if (PINA .4 == 0)
                 _0x91:
0003b5 99cc      	SBIC 0x19,4
0003b6 c004      	RJMP _0x92
                 ; 0000 01FE     { // Back
                 ; 0000 01FF       while (PINA .4 == 0)
                 _0x93:
0003b7 9bcc      	SBIS 0x19,4
                 ; 0000 0200         ;
0003b8 cffe      	RJMP _0x93
                 ; 0000 0201       return 0;
0003b9 e0e0      	LDI  R30,LOW(0)
0003ba c003      	RJMP _0x2080005
                 ; 0000 0202     }
                 ; 0000 0203     delay_ms(25);
                 _0x92:
0003bb 940e 0747 	CALL SUBOPT_0xC
                 ; 0000 0204   }
0003bd cfd9      	RJMP _0x85
                 ; 0000 0205 }
                 _0x2080005:
0003be 9661      	ADIW R28,17
0003bf 9508      	RET
                 ; .FEND
                 ;
                 ;//// data setting
                 ;
                 ;char set_data(void)
                 ; 0000 020A {
                 _set_data:
                 ; .FSTART _set_data
                 ; 0000 020B   char _chose = 0;
                 ; 0000 020C   char buff[17];
                 ; 0000 020D   while (1)
0003c0 9761      	SBIW R28,17
0003c1 931a      	ST   -Y,R17
                 ;	_chose -> R17
                 ;	buff -> Y+1
0003c2 e010      	LDI  R17,0
                 _0x96:
                 ; 0000 020E   {
                 ; 0000 020F     if (_chose == 1)
0003c3 3011      	CPI  R17,1
0003c4 f461      	BRNE _0x99
                 ; 0000 0210     {
                 ; 0000 0211       sprintf(buff, "Set month=%d  >", month);
0003c5 940e 079d 	CALL SUBOPT_0x18
                +
0003c7 e2e8     +LDI R30 , LOW ( 2 * _0x0 + ( 178 ) )
0003c8 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 178 ) )
                 	__POINTW1FN _0x0,178
0003c9 93fa      	ST   -Y,R31
0003ca 93ea      	ST   -Y,R30
0003cb 91e0 0260 	LDS  R30,_month
0003cd 940e 0732 	CALL SUBOPT_0x8
0003cf 940e 07a2 	CALL SUBOPT_0x19
                 ; 0000 0212       lcd_clear();
                 ; 0000 0213       lcd_puts(buff);
                 ; 0000 0214     }
                 ; 0000 0215 
                 ; 0000 0216     if (_chose == 0)
                 _0x99:
0003d1 3010      	CPI  R17,0
0003d2 f459      	BRNE _0x9A
                 ; 0000 0217     {
                 ; 0000 0218       sprintf(buff, "Set day=%d  >", day);
0003d3 940e 079d 	CALL SUBOPT_0x18
                +
0003d5 e3e8     +LDI R30 , LOW ( 2 * _0x0 + ( 194 ) )
0003d6 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 194 ) )
                 	__POINTW1FN _0x0,194
0003d7 93fa      	ST   -Y,R31
0003d8 93ea      	ST   -Y,R30
0003d9 2dec      	MOV  R30,R12
0003da 940e 0732 	CALL SUBOPT_0x8
0003dc 940e 07a2 	CALL SUBOPT_0x19
                 ; 0000 0219       lcd_clear();
                 ; 0000 021A       lcd_puts(buff);
                 ; 0000 021B     }
                 ; 0000 021C 
                 ; 0000 021D     if (_chose == 2)
                 _0x9A:
0003de 3012      	CPI  R17,2
0003df f451      	BRNE _0x9B
                 ; 0000 021E     {
                 ; 0000 021F       sprintf(buff, "Set year=%d  >", year);
0003e0 940e 079d 	CALL SUBOPT_0x18
                +
0003e2 e4e6     +LDI R30 , LOW ( 2 * _0x0 + ( 208 ) )
0003e3 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 208 ) )
                 	__POINTW1FN _0x0,208
0003e4 93fa      	ST   -Y,R31
0003e5 93ea      	ST   -Y,R30
0003e6 940e 0737 	CALL SUBOPT_0x9
0003e8 940e 07a2 	CALL SUBOPT_0x19
                 ; 0000 0220       lcd_clear();
                 ; 0000 0221       lcd_puts(buff);
                 ; 0000 0222     }
                 ; 0000 0223 
                 ; 0000 0224     if (PINA .1 == 0 & _chose == 1)
                 _0x9B:
0003ea 940e 07ac 	CALL SUBOPT_0x1A
0003ec 940e 0759 	CALL SUBOPT_0xF
0003ee f071      	BREQ _0x9C
                 ; 0000 0225     { // UP     month
                 ; 0000 0226       while (PINA .1 == 0)
                 _0x9D:
0003ef 9bc9      	SBIS 0x19,1
                 ; 0000 0227         ;
0003f0 cffe      	RJMP _0x9D
                 ; 0000 0228       month++;
0003f1 91e0 0260 	LDS  R30,_month
0003f3 5fef      	SUBI R30,-LOW(1)
0003f4 93e0 0260 	STS  _month,R30
                 ; 0000 0229       if (month > 12)
0003f6 91a0 0260 	LDS  R26,_month
0003f8 30ad      	CPI  R26,LOW(0xD)
0003f9 f01c      	BRLT _0xA0
                 ; 0000 022A         month = 1;
0003fa e0e1      	LDI  R30,LOW(1)
0003fb 93e0 0260 	STS  _month,R30
                 ; 0000 022B     }
                 _0xA0:
                 ; 0000 022C 
                 ; 0000 022D     if (PINA .0 == 0 & _chose == 1)
                 _0x9C:
0003fd 940e 07b5 	CALL SUBOPT_0x1B
0003ff 940e 0759 	CALL SUBOPT_0xF
000401 f071      	BREQ _0xA1
                 ; 0000 022E     { // DOWN    month
                 ; 0000 022F       while (PINA .0 == 0)
                 _0xA2:
000402 9bc8      	SBIS 0x19,0
                 ; 0000 0230         ;
000403 cffe      	RJMP _0xA2
                 ; 0000 0231       month--;
000404 91e0 0260 	LDS  R30,_month
000406 50e1      	SUBI R30,LOW(1)
000407 93e0 0260 	STS  _month,R30
                 ; 0000 0232       if (month < 1)
000409 91a0 0260 	LDS  R26,_month
00040b 30a1      	CPI  R26,LOW(0x1)
00040c f41c      	BRGE _0xA5
                 ; 0000 0233         month = 12;
00040d e0ec      	LDI  R30,LOW(12)
00040e 93e0 0260 	STS  _month,R30
                 ; 0000 0234     }
                 _0xA5:
                 ; 0000 0235 
                 ; 0000 0236     if (PINA .1 == 0 & _chose == 0)
                 _0xA1:
000410 940e 07ac 	CALL SUBOPT_0x1A
000412 940e 0754 	CALL SUBOPT_0xE
000414 f069      	BREQ _0xA6
                 ; 0000 0237     { // UP    day
                 ; 0000 0238       while (PINA .1 == 0)
                 _0xA7:
000415 9bc9      	SBIS 0x19,1
                 ; 0000 0239         ;
000416 cffe      	RJMP _0xA7
                 ; 0000 023A       day++;
000417 94c3      	INC  R12
                 ; 0000 023B       i = day;
000418 2dec      	MOV  R30,R12
000419 e7ac      	LDI  R26,LOW(_i)
00041a e0b0      	LDI  R27,HIGH(_i)
00041b 940e 0858 	CALL __EEPROMWRB
                 ; 0000 023C       if (day > 31)
00041d e1ef      	LDI  R30,LOW(31)
00041e 15ec      	CP   R30,R12
00041f f414      	BRGE _0xAA
                 ; 0000 023D         day = 1;
000420 e0e1      	LDI  R30,LOW(1)
000421 2ece      	MOV  R12,R30
                 ; 0000 023E     }
                 _0xAA:
                 ; 0000 023F 
                 ; 0000 0240     if (PINA .0 == 0 & _chose == 0)
                 _0xA6:
000422 940e 07b5 	CALL SUBOPT_0x1B
000424 940e 0754 	CALL SUBOPT_0xE
000426 f069      	BREQ _0xAB
                 ; 0000 0241     { // DOWN    day
                 ; 0000 0242       while (PINA .0 == 0)
                 _0xAC:
000427 9bc8      	SBIS 0x19,0
                 ; 0000 0243         ;
000428 cffe      	RJMP _0xAC
                 ; 0000 0244       day--;
000429 94ca      	DEC  R12
                 ; 0000 0245       i = day;
00042a 2dec      	MOV  R30,R12
00042b e7ac      	LDI  R26,LOW(_i)
00042c e0b0      	LDI  R27,HIGH(_i)
00042d 940e 0858 	CALL __EEPROMWRB
                 ; 0000 0246       if (day < 1)
00042f e0e1      	LDI  R30,LOW(1)
000430 16ce      	CP   R12,R30
000431 f414      	BRGE _0xAF
                 ; 0000 0247         day = 31;
000432 e1ef      	LDI  R30,LOW(31)
000433 2ece      	MOV  R12,R30
                 ; 0000 0248     }
                 _0xAF:
                 ; 0000 0249 
                 ; 0000 024A     if (PINA .0 == 0 & _chose == 2)
                 _0xAB:
000434 940e 07b5 	CALL SUBOPT_0x1B
000436 940e 075e 	CALL SUBOPT_0x10
000438 f099      	BREQ _0xB0
                 ; 0000 024B     { // DOWN    year
                 ; 0000 024C       while (PINA .0 == 0)
                 _0xB1:
000439 9bc8      	SBIS 0x19,0
                 ; 0000 024D         ;
00043a cffe      	RJMP _0xB1
                 ; 0000 024E       year--;
00043b 940e 06fe 	CALL SUBOPT_0x2
00043d 9731      	SBIW R30,1
00043e 93fe      	ST   -X,R31
00043f 93ee      	ST   -X,R30
                 ; 0000 024F       if (year < 1)
000440 91a0 0261 	LDS  R26,_year
000442 91b0 0262 	LDS  R27,_year+1
000444 9711      	SBIW R26,1
000445 f434      	BRGE _0xB4
                 ; 0000 0250         year = 1300;
000446 e1e4      	LDI  R30,LOW(1300)
000447 e0f5      	LDI  R31,HIGH(1300)
000448 93e0 0261 	STS  _year,R30
00044a 93f0 0262 	STS  _year+1,R31
                 ; 0000 0251     }
                 _0xB4:
                 ; 0000 0252 
                 ; 0000 0253     if (PINA .1 == 0 & _chose == 2)
                 _0xB0:
00044c 940e 07ac 	CALL SUBOPT_0x1A
00044e 940e 075e 	CALL SUBOPT_0x10
000450 f039      	BREQ _0xB5
                 ; 0000 0254     { // UP    year
                 ; 0000 0255       while (PINA .1 == 0)
                 _0xB6:
000451 9bc9      	SBIS 0x19,1
                 ; 0000 0256         ;
000452 cffe      	RJMP _0xB6
                 ; 0000 0257       year++;
000453 940e 06fe 	CALL SUBOPT_0x2
000455 9631      	ADIW R30,1
000456 93fe      	ST   -X,R31
000457 93ee      	ST   -X,R30
                 ; 0000 0258       // if(year>1404)
                 ; 0000 0259       // year=0;
                 ; 0000 025A     }
                 ; 0000 025B 
                 ; 0000 025C     if (PINA .3 == 0)
                 _0xB5:
000458 99cb      	SBIC 0x19,3
000459 c006      	RJMP _0xB9
                 ; 0000 025D     { // NEXT
                 ; 0000 025E       while (PINA .3 == 0)
                 _0xBA:
00045a 9bcb      	SBIS 0x19,3
                 ; 0000 025F         ;
00045b cffe      	RJMP _0xBA
                 ; 0000 0260       _chose++;
00045c 5f1f      	SUBI R17,-1
                 ; 0000 0261       if (_chose >= 3)
00045d 3013      	CPI  R17,3
00045e f008      	BRLO _0xBD
                 ; 0000 0262         _chose = 0;
00045f e010      	LDI  R17,LOW(0)
                 ; 0000 0263     }
                 _0xBD:
                 ; 0000 0264 
                 ; 0000 0265     if (PINA .4 == 0)
                 _0xB9:
000460 99cc      	SBIC 0x19,4
000461 c004      	RJMP _0xBE
                 ; 0000 0266     { // Back
                 ; 0000 0267       while (PINA .4 == 0)
                 _0xBF:
000462 9bcc      	SBIS 0x19,4
                 ; 0000 0268         ;
000463 cffe      	RJMP _0xBF
                 ; 0000 0269       return 0;
000464 e0e0      	LDI  R30,LOW(0)
000465 c003      	RJMP _0x2080004
                 ; 0000 026A     }
                 ; 0000 026B 
                 ; 0000 026C     delay_ms(25);
                 _0xBE:
000466 940e 0747 	CALL SUBOPT_0xC
                 ; 0000 026D   }
000468 cf5a      	RJMP _0x96
                 ; 0000 026E }
                 _0x2080004:
000469 8118      	LDD  R17,Y+0
00046a 9662      	ADIW R28,18
00046b 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G100:
                 ; .FSTART _put_buff_G100
00046c 93ba      	ST   -Y,R27
00046d 93aa      	ST   -Y,R26
00046e 931a      	ST   -Y,R17
00046f 930a      	ST   -Y,R16
000470 81aa      	LDD  R26,Y+2
000471 81bb      	LDD  R27,Y+2+1
000472 9612      	ADIW R26,2
000473 940e 0833 	CALL __GETW1P
000475 9730      	SBIW R30,0
000476 f159      	BREQ _0x2000010
000477 81aa      	LDD  R26,Y+2
000478 81bb      	LDD  R27,Y+2+1
000479 9614      	ADIW R26,4
00047a 940e 0833 	CALL __GETW1P
00047c 018f      	MOVW R16,R30
00047d 9730      	SBIW R30,0
00047e f061      	BREQ _0x2000012
                +
00047f 3002     +CPI R16 , LOW ( 2 )
000480 e0e0     +LDI R30 , HIGH ( 2 )
000481 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
000482 f098      	BRLO _0x2000013
000483 01f8      	MOVW R30,R16
000484 9731      	SBIW R30,1
000485 018f      	MOVW R16,R30
                +
000486 81aa     +LDD R26 , Y + 2
000487 81bb     +LDD R27 , Y + 2 + 1
000488 9614     +ADIW R26 , 4
000489 93ed     +ST X + , R30
00048a 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2000012:
00048b 81aa      	LDD  R26,Y+2
00048c 81bb      	LDD  R27,Y+2+1
00048d 9612      	ADIW R26,2
00048e 91ed      	LD   R30,X+
00048f 91fd      	LD   R31,X+
000490 9631      	ADIW R30,1
000491 93fe      	ST   -X,R31
000492 93ee      	ST   -X,R30
000493 9731      	SBIW R30,1
000494 81ac      	LDD  R26,Y+4
000495 83a0      	STD  Z+0,R26
                 _0x2000013:
000496 81aa      	LDD  R26,Y+2
000497 81bb      	LDD  R27,Y+2+1
000498 940e 0833 	CALL __GETW1P
00049a 23ff      	TST  R31
00049b f02a      	BRMI _0x2000014
00049c 91ed      	LD   R30,X+
00049d 91fd      	LD   R31,X+
00049e 9631      	ADIW R30,1
00049f 93fe      	ST   -X,R31
0004a0 93ee      	ST   -X,R30
                 _0x2000014:
0004a1 c006      	RJMP _0x2000015
                 _0x2000010:
0004a2 81aa      	LDD  R26,Y+2
0004a3 81bb      	LDD  R27,Y+2+1
0004a4 efef      	LDI  R30,LOW(65535)
0004a5 efff      	LDI  R31,HIGH(65535)
0004a6 93ed      	ST   X+,R30
0004a7 93fc      	ST   X,R31
                 _0x2000015:
0004a8 8119      	LDD  R17,Y+1
0004a9 8108      	LDD  R16,Y+0
0004aa 9625      	ADIW R28,5
0004ab 9508      	RET
                 ; .FEND
                 __print_G100:
                 ; .FSTART __print_G100
0004ac 93ba      	ST   -Y,R27
0004ad 93aa      	ST   -Y,R26
0004ae 9726      	SBIW R28,6
0004af 940e 0869 	CALL __SAVELOCR6
0004b1 e010      	LDI  R17,0
0004b2 85ac      	LDD  R26,Y+12
0004b3 85bd      	LDD  R27,Y+12+1
0004b4 e0e0      	LDI  R30,LOW(0)
0004b5 e0f0      	LDI  R31,HIGH(0)
0004b6 93ed      	ST   X+,R30
0004b7 93fc      	ST   X,R31
                 _0x2000016:
0004b8 89ea      	LDD  R30,Y+18
0004b9 89fb      	LDD  R31,Y+18+1
0004ba 9631      	ADIW R30,1
0004bb 8bea      	STD  Y+18,R30
0004bc 8bfb      	STD  Y+18+1,R31
0004bd 9731      	SBIW R30,1
0004be 91e4      	LPM  R30,Z
0004bf 2f2e      	MOV  R18,R30
0004c0 30e0      	CPI  R30,0
0004c1 f409      	BRNE PC+2
0004c2 c115      	RJMP _0x2000018
0004c3 2fe1      	MOV  R30,R17
0004c4 30e0      	CPI  R30,0
0004c5 f439      	BRNE _0x200001C
0004c6 3225      	CPI  R18,37
0004c7 f411      	BRNE _0x200001D
0004c8 e011      	LDI  R17,LOW(1)
0004c9 c002      	RJMP _0x200001E
                 _0x200001D:
0004ca 940e 07be 	CALL SUBOPT_0x1C
                 _0x200001E:
0004cc c10a      	RJMP _0x200001B
                 _0x200001C:
0004cd 30e1      	CPI  R30,LOW(0x1)
0004ce f4a9      	BRNE _0x200001F
0004cf 3225      	CPI  R18,37
0004d0 f419      	BRNE _0x2000020
0004d1 940e 07be 	CALL SUBOPT_0x1C
0004d3 c102      	RJMP _0x20000CC
                 _0x2000020:
0004d4 e012      	LDI  R17,LOW(2)
0004d5 e040      	LDI  R20,LOW(0)
0004d6 e000      	LDI  R16,LOW(0)
0004d7 322d      	CPI  R18,45
0004d8 f411      	BRNE _0x2000021
0004d9 e001      	LDI  R16,LOW(1)
0004da c0fc      	RJMP _0x200001B
                 _0x2000021:
0004db 322b      	CPI  R18,43
0004dc f411      	BRNE _0x2000022
0004dd e24b      	LDI  R20,LOW(43)
0004de c0f8      	RJMP _0x200001B
                 _0x2000022:
0004df 3220      	CPI  R18,32
0004e0 f411      	BRNE _0x2000023
0004e1 e240      	LDI  R20,LOW(32)
0004e2 c0f4      	RJMP _0x200001B
                 _0x2000023:
0004e3 c002      	RJMP _0x2000024
                 _0x200001F:
0004e4 30e2      	CPI  R30,LOW(0x2)
0004e5 f439      	BRNE _0x2000025
                 _0x2000024:
0004e6 e050      	LDI  R21,LOW(0)
0004e7 e013      	LDI  R17,LOW(3)
0004e8 3320      	CPI  R18,48
0004e9 f411      	BRNE _0x2000026
0004ea 6800      	ORI  R16,LOW(128)
0004eb c0eb      	RJMP _0x200001B
                 _0x2000026:
0004ec c003      	RJMP _0x2000027
                 _0x2000025:
0004ed 30e3      	CPI  R30,LOW(0x3)
0004ee f009      	BREQ PC+2
0004ef c0e7      	RJMP _0x200001B
                 _0x2000027:
0004f0 3320      	CPI  R18,48
0004f1 f010      	BRLO _0x200002A
0004f2 332a      	CPI  R18,58
0004f3 f008      	BRLO _0x200002B
                 _0x200002A:
0004f4 c007      	RJMP _0x2000029
                 _0x200002B:
0004f5 e0aa      	LDI  R26,LOW(10)
0004f6 9f5a      	MUL  R21,R26
0004f7 2d50      	MOV  R21,R0
0004f8 2fe2      	MOV  R30,R18
0004f9 53e0      	SUBI R30,LOW(48)
0004fa 0f5e      	ADD  R21,R30
0004fb c0db      	RJMP _0x200001B
                 _0x2000029:
0004fc 2fe2      	MOV  R30,R18
0004fd 36e3      	CPI  R30,LOW(0x63)
0004fe f449      	BRNE _0x200002F
0004ff 940e 07c5 	CALL SUBOPT_0x1D
000501 89e8      	LDD  R30,Y+16
000502 89f9      	LDD  R31,Y+16+1
000503 81a4      	LDD  R26,Z+4
000504 93aa      	ST   -Y,R26
000505 940e 07cb 	CALL SUBOPT_0x1E
000507 c0ce      	RJMP _0x2000030
                 _0x200002F:
000508 37e3      	CPI  R30,LOW(0x73)
000509 f441      	BRNE _0x2000032
00050a 940e 07c5 	CALL SUBOPT_0x1D
00050c 940e 07d1 	CALL SUBOPT_0x1F
00050e 940e 06d6 	CALL _strlen
000510 2f1e      	MOV  R17,R30
000511 c00a      	RJMP _0x2000033
                 _0x2000032:
000512 37e0      	CPI  R30,LOW(0x70)
000513 f461      	BRNE _0x2000035
000514 940e 07c5 	CALL SUBOPT_0x1D
000516 940e 07d1 	CALL SUBOPT_0x1F
000518 940e 06e2 	CALL _strlenf
00051a 2f1e      	MOV  R17,R30
00051b 6008      	ORI  R16,LOW(8)
                 _0x2000033:
00051c 6002      	ORI  R16,LOW(2)
00051d 770f      	ANDI R16,LOW(127)
00051e e030      	LDI  R19,LOW(0)
00051f c034      	RJMP _0x2000036
                 _0x2000035:
000520 36e4      	CPI  R30,LOW(0x64)
000521 f011      	BREQ _0x2000039
000522 36e9      	CPI  R30,LOW(0x69)
000523 f411      	BRNE _0x200003A
                 _0x2000039:
000524 6004      	ORI  R16,LOW(4)
000525 c002      	RJMP _0x200003B
                 _0x200003A:
000526 37e5      	CPI  R30,LOW(0x75)
000527 f431      	BRNE _0x200003C
                 _0x200003B:
000528 e5e4      	LDI  R30,LOW(_tbl10_G100*2)
000529 e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
00052a 83ee      	STD  Y+6,R30
00052b 83ff      	STD  Y+6+1,R31
00052c e015      	LDI  R17,LOW(5)
00052d c00c      	RJMP _0x200003D
                 _0x200003C:
00052e 35e8      	CPI  R30,LOW(0x58)
00052f f411      	BRNE _0x200003F
000530 6008      	ORI  R16,LOW(8)
000531 c003      	RJMP _0x2000040
                 _0x200003F:
000532 37e8      	CPI  R30,LOW(0x78)
000533 f009      	BREQ PC+2
000534 c0a1      	RJMP _0x2000071
                 _0x2000040:
000535 e5ee      	LDI  R30,LOW(_tbl16_G100*2)
000536 e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
000537 83ee      	STD  Y+6,R30
000538 83ff      	STD  Y+6+1,R31
000539 e014      	LDI  R17,LOW(4)
                 _0x200003D:
00053a ff02      	SBRS R16,2
00053b c014      	RJMP _0x2000042
00053c 940e 07c5 	CALL SUBOPT_0x1D
00053e 940e 07db 	CALL SUBOPT_0x20
000540 85ab      	LDD  R26,Y+11
000541 23aa      	TST  R26
000542 f43a      	BRPL _0x2000043
000543 85ea      	LDD  R30,Y+10
000544 85fb      	LDD  R31,Y+10+1
000545 940e 0806 	CALL __ANEGW1
000547 87ea      	STD  Y+10,R30
000548 87fb      	STD  Y+10+1,R31
000549 e24d      	LDI  R20,LOW(45)
                 _0x2000043:
00054a 3040      	CPI  R20,0
00054b f011      	BREQ _0x2000044
00054c 5f1f      	SUBI R17,-LOW(1)
00054d c001      	RJMP _0x2000045
                 _0x2000044:
00054e 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
00054f c004      	RJMP _0x2000046
                 _0x2000042:
000550 940e 07c5 	CALL SUBOPT_0x1D
000552 940e 07db 	CALL SUBOPT_0x20
                 _0x2000046:
                 _0x2000036:
000554 fd00      	SBRC R16,0
000555 c011      	RJMP _0x2000047
                 _0x2000048:
000556 1715      	CP   R17,R21
000557 f478      	BRSH _0x200004A
000558 ff07      	SBRS R16,7
000559 c008      	RJMP _0x200004B
00055a ff02      	SBRS R16,2
00055b c004      	RJMP _0x200004C
00055c 7f0b      	ANDI R16,LOW(251)
00055d 2f24      	MOV  R18,R20
00055e 5011      	SUBI R17,LOW(1)
00055f c001      	RJMP _0x200004D
                 _0x200004C:
000560 e320      	LDI  R18,LOW(48)
                 _0x200004D:
000561 c001      	RJMP _0x200004E
                 _0x200004B:
000562 e220      	LDI  R18,LOW(32)
                 _0x200004E:
000563 940e 07be 	CALL SUBOPT_0x1C
000565 5051      	SUBI R21,LOW(1)
000566 cfef      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
000567 2f31      	MOV  R19,R17
000568 ff01      	SBRS R16,1
000569 c017      	RJMP _0x200004F
                 _0x2000050:
00056a 3030      	CPI  R19,0
00056b f0a1      	BREQ _0x2000052
00056c ff03      	SBRS R16,3
00056d c006      	RJMP _0x2000053
00056e 81ee      	LDD  R30,Y+6
00056f 81ff      	LDD  R31,Y+6+1
000570 9125      	LPM  R18,Z+
000571 83ee      	STD  Y+6,R30
000572 83ff      	STD  Y+6+1,R31
000573 c005      	RJMP _0x2000054
                 _0x2000053:
000574 81ae      	LDD  R26,Y+6
000575 81bf      	LDD  R27,Y+6+1
000576 912d      	LD   R18,X+
000577 83ae      	STD  Y+6,R26
000578 83bf      	STD  Y+6+1,R27
                 _0x2000054:
000579 940e 07be 	CALL SUBOPT_0x1C
00057b 3050      	CPI  R21,0
00057c f009      	BREQ _0x2000055
00057d 5051      	SUBI R21,LOW(1)
                 _0x2000055:
00057e 5031      	SUBI R19,LOW(1)
00057f cfea      	RJMP _0x2000050
                 _0x2000052:
000580 c04b      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
000581 e320      	LDI  R18,LOW(48)
000582 81ee      	LDD  R30,Y+6
000583 81ff      	LDD  R31,Y+6+1
000584 940e 0837 	CALL __GETW1PF
000586 87e8      	STD  Y+8,R30
000587 87f9      	STD  Y+8+1,R31
000588 81ee      	LDD  R30,Y+6
000589 81ff      	LDD  R31,Y+6+1
00058a 9632      	ADIW R30,2
00058b 83ee      	STD  Y+6,R30
00058c 83ff      	STD  Y+6+1,R31
                 _0x200005A:
00058d 85e8      	LDD  R30,Y+8
00058e 85f9      	LDD  R31,Y+8+1
00058f 85aa      	LDD  R26,Y+10
000590 85bb      	LDD  R27,Y+10+1
000591 17ae      	CP   R26,R30
000592 07bf      	CPC  R27,R31
000593 f050      	BRLO _0x200005C
000594 5f2f      	SUBI R18,-LOW(1)
000595 85a8      	LDD  R26,Y+8
000596 85b9      	LDD  R27,Y+8+1
000597 85ea      	LDD  R30,Y+10
000598 85fb      	LDD  R31,Y+10+1
000599 1bea      	SUB  R30,R26
00059a 0bfb      	SBC  R31,R27
00059b 87ea      	STD  Y+10,R30
00059c 87fb      	STD  Y+10+1,R31
00059d cfef      	RJMP _0x200005A
                 _0x200005C:
00059e 332a      	CPI  R18,58
00059f f028      	BRLO _0x200005D
0005a0 ff03      	SBRS R16,3
0005a1 c002      	RJMP _0x200005E
0005a2 5f29      	SUBI R18,-LOW(7)
0005a3 c001      	RJMP _0x200005F
                 _0x200005E:
0005a4 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
0005a5 fd04      	SBRC R16,4
0005a6 c01a      	RJMP _0x2000061
0005a7 3321      	CPI  R18,49
0005a8 f420      	BRSH _0x2000063
0005a9 85a8      	LDD  R26,Y+8
0005aa 85b9      	LDD  R27,Y+8+1
0005ab 9711      	SBIW R26,1
0005ac f409      	BRNE _0x2000062
                 _0x2000063:
0005ad c009      	RJMP _0x20000CD
                 _0x2000062:
0005ae 1753      	CP   R21,R19
0005af f010      	BRLO _0x2000067
0005b0 ff00      	SBRS R16,0
0005b1 c001      	RJMP _0x2000068
                 _0x2000067:
0005b2 c013      	RJMP _0x2000066
                 _0x2000068:
0005b3 e220      	LDI  R18,LOW(32)
0005b4 ff07      	SBRS R16,7
0005b5 c00b      	RJMP _0x2000069
0005b6 e320      	LDI  R18,LOW(48)
                 _0x20000CD:
0005b7 6100      	ORI  R16,LOW(16)
0005b8 ff02      	SBRS R16,2
0005b9 c007      	RJMP _0x200006A
0005ba 7f0b      	ANDI R16,LOW(251)
0005bb 934a      	ST   -Y,R20
0005bc 940e 07cb 	CALL SUBOPT_0x1E
0005be 3050      	CPI  R21,0
0005bf f009      	BREQ _0x200006B
0005c0 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
0005c1 940e 07be 	CALL SUBOPT_0x1C
0005c3 3050      	CPI  R21,0
0005c4 f009      	BREQ _0x200006C
0005c5 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
0005c6 5031      	SUBI R19,LOW(1)
0005c7 85a8      	LDD  R26,Y+8
0005c8 85b9      	LDD  R27,Y+8+1
0005c9 9712      	SBIW R26,2
0005ca f008      	BRLO _0x2000059
0005cb cfb5      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
0005cc ff00      	SBRS R16,0
0005cd c008      	RJMP _0x200006D
                 _0x200006E:
0005ce 3050      	CPI  R21,0
0005cf f031      	BREQ _0x2000070
0005d0 5051      	SUBI R21,LOW(1)
0005d1 e2e0      	LDI  R30,LOW(32)
0005d2 93ea      	ST   -Y,R30
0005d3 940e 07cb 	CALL SUBOPT_0x1E
0005d5 cff8      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000CC:
0005d6 e010      	LDI  R17,LOW(0)
                 _0x200001B:
0005d7 cee0      	RJMP _0x2000016
                 _0x2000018:
0005d8 85ac      	LDD  R26,Y+12
0005d9 85bd      	LDD  R27,Y+12+1
0005da 940e 0833 	CALL __GETW1P
0005dc 940e 0870 	CALL __LOADLOCR6
0005de 9664      	ADIW R28,20
0005df 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
0005e0 92ff      	PUSH R15
0005e1 2ef8      	MOV  R15,R24
0005e2 9726      	SBIW R28,6
0005e3 940e 086b 	CALL __SAVELOCR4
0005e5 940e 07e3 	CALL SUBOPT_0x21
0005e7 9730      	SBIW R30,0
0005e8 f419      	BRNE _0x2000072
0005e9 efef      	LDI  R30,LOW(65535)
0005ea efff      	LDI  R31,HIGH(65535)
0005eb c023      	RJMP _0x2080003
                 _0x2000072:
0005ec 01de      	MOVW R26,R28
0005ed 9616      	ADIW R26,6
0005ee 940e 0802 	CALL __ADDW2R15
0005f0 018d      	MOVW R16,R26
0005f1 940e 07e3 	CALL SUBOPT_0x21
0005f3 83ee      	STD  Y+6,R30
0005f4 83ff      	STD  Y+6+1,R31
0005f5 e0e0      	LDI  R30,LOW(0)
0005f6 87e8      	STD  Y+8,R30
0005f7 87e9      	STD  Y+8+1,R30
0005f8 01de      	MOVW R26,R28
0005f9 961a      	ADIW R26,10
0005fa 940e 0802 	CALL __ADDW2R15
0005fc 940e 0833 	CALL __GETW1P
0005fe 93fa      	ST   -Y,R31
0005ff 93ea      	ST   -Y,R30
000600 931a      	ST   -Y,R17
000601 930a      	ST   -Y,R16
000602 e6ec      	LDI  R30,LOW(_put_buff_G100)
000603 e0f4      	LDI  R31,HIGH(_put_buff_G100)
000604 93fa      	ST   -Y,R31
000605 93ea      	ST   -Y,R30
000606 01de      	MOVW R26,R28
000607 961a      	ADIW R26,10
000608 dea3      	RCALL __print_G100
000609 019f      	MOVW R18,R30
00060a 81ae      	LDD  R26,Y+6
00060b 81bf      	LDD  R27,Y+6+1
00060c e0e0      	LDI  R30,LOW(0)
00060d 93ec      	ST   X,R30
00060e 01f9      	MOVW R30,R18
                 _0x2080003:
00060f 940e 0872 	CALL __LOADLOCR4
000611 962a      	ADIW R28,10
000612 90ff      	POP  R15
000613 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G101:
                 ; .FSTART __lcd_write_nibble_G101
000614 93aa      	ST   -Y,R26
000615 81e8      	LD   R30,Y
000616 71e0      	ANDI R30,LOW(0x10)
000617 f011      	BREQ _0x2020004
000618 9ac3      	SBI  0x18,3
000619 c001      	RJMP _0x2020005
                 _0x2020004:
00061a 98c3      	CBI  0x18,3
                 _0x2020005:
00061b 81e8      	LD   R30,Y
00061c 72e0      	ANDI R30,LOW(0x20)
00061d f011      	BREQ _0x2020006
00061e 9ac4      	SBI  0x18,4
00061f c001      	RJMP _0x2020007
                 _0x2020006:
000620 98c4      	CBI  0x18,4
                 _0x2020007:
000621 81e8      	LD   R30,Y
000622 74e0      	ANDI R30,LOW(0x40)
000623 f011      	BREQ _0x2020008
000624 9ac5      	SBI  0x18,5
000625 c001      	RJMP _0x2020009
                 _0x2020008:
000626 98c5      	CBI  0x18,5
                 _0x2020009:
000627 81e8      	LD   R30,Y
000628 78e0      	ANDI R30,LOW(0x80)
000629 f011      	BREQ _0x202000A
00062a 9ac6      	SBI  0x18,6
00062b c001      	RJMP _0x202000B
                 _0x202000A:
00062c 98c6      	CBI  0x18,6
                 _0x202000B:
                +
00062d e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00062e 958a     +DEC R24
00062f f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000630 9ac2      	SBI  0x18,2
                +
000631 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000632 958a     +DEC R24
000633 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000634 98c2      	CBI  0x18,2
                +
000635 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000636 958a     +DEC R24
000637 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000638 c09b      	RJMP _0x2080001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000639 93aa      	ST   -Y,R26
00063a 81a8      	LD   R26,Y
00063b dfd8      	RCALL __lcd_write_nibble_G101
00063c 81e8          ld    r30,y
00063d 95e2          swap  r30
00063e 83e8          st    y,r30
00063f 81a8      	LD   R26,Y
000640 dfd3      	RCALL __lcd_write_nibble_G101
                +
000641 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
000642 958a     +DEC R24
000643 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
000644 c08f      	RJMP _0x2080001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000645 93aa      	ST   -Y,R26
000646 81e8      	LD   R30,Y
000647 e0f0      	LDI  R31,0
000648 59ed      	SUBI R30,LOW(-__base_y_G101)
000649 4ffd      	SBCI R31,HIGH(-__base_y_G101)
00064a 81e0      	LD   R30,Z
00064b 81a9      	LDD  R26,Y+1
00064c 0fae      	ADD  R26,R30
00064d dfeb      	RCALL __lcd_write_data
00064e 81e9      	LDD  R30,Y+1
00064f 93e0 0267 	STS  __lcd_x,R30
000651 81e8      	LD   R30,Y
000652 93e0 0268 	STS  __lcd_y,R30
000654 9622      	ADIW R28,2
000655 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000656 e0a2      	LDI  R26,LOW(2)
000657 940e 07ea 	CALL SUBOPT_0x22
000659 e0ac      	LDI  R26,LOW(12)
00065a dfde      	RCALL __lcd_write_data
00065b e0a1      	LDI  R26,LOW(1)
00065c 940e 07ea 	CALL SUBOPT_0x22
00065e e0e0      	LDI  R30,LOW(0)
00065f 93e0 0268 	STS  __lcd_y,R30
000661 93e0 0267 	STS  __lcd_x,R30
000663 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000664 93aa      	ST   -Y,R26
000665 81a8      	LD   R26,Y
000666 30aa      	CPI  R26,LOW(0xA)
000667 f031      	BREQ _0x2020011
000668 91e0 0269 	LDS  R30,__lcd_maxx
00066a 91a0 0267 	LDS  R26,__lcd_x
00066c 17ae      	CP   R26,R30
00066d f060      	BRLO _0x2020010
                 _0x2020011:
00066e e0e0      	LDI  R30,LOW(0)
00066f 93ea      	ST   -Y,R30
000670 91a0 0268 	LDS  R26,__lcd_y
000672 5faf      	SUBI R26,-LOW(1)
000673 93a0 0268 	STS  __lcd_y,R26
000675 dfcf      	RCALL _lcd_gotoxy
000676 81a8      	LD   R26,Y
000677 30aa      	CPI  R26,LOW(0xA)
000678 f409      	BRNE _0x2020013
000679 c05a      	RJMP _0x2080001
                 _0x2020013:
                 _0x2020010:
00067a 91e0 0267 	LDS  R30,__lcd_x
00067c 5fef      	SUBI R30,-LOW(1)
00067d 93e0 0267 	STS  __lcd_x,R30
00067f 9ac0      	SBI  0x18,0
000680 81a8      	LD   R26,Y
000681 dfb7      	RCALL __lcd_write_data
000682 98c0      	CBI  0x18,0
000683 c050      	RJMP _0x2080001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000684 93ba      	ST   -Y,R27
000685 93aa      	ST   -Y,R26
000686 931a      	ST   -Y,R17
                 _0x2020014:
000687 81a9      	LDD  R26,Y+1
000688 81ba      	LDD  R27,Y+1+1
000689 91ed      	LD   R30,X+
00068a 83a9      	STD  Y+1,R26
00068b 83ba      	STD  Y+1+1,R27
00068c 2f1e      	MOV  R17,R30
00068d 30e0      	CPI  R30,0
00068e f019      	BREQ _0x2020016
00068f 2fa1      	MOV  R26,R17
000690 dfd3      	RCALL _lcd_putchar
000691 cff5      	RJMP _0x2020014
                 _0x2020016:
000692 c010      	RJMP _0x2080002
                 ; .FEND
                 _lcd_putsf:
                 ; .FSTART _lcd_putsf
000693 93ba      	ST   -Y,R27
000694 93aa      	ST   -Y,R26
000695 931a      	ST   -Y,R17
                 _0x2020017:
000696 81e9      	LDD  R30,Y+1
000697 81fa      	LDD  R31,Y+1+1
000698 9631      	ADIW R30,1
000699 83e9      	STD  Y+1,R30
00069a 83fa      	STD  Y+1+1,R31
00069b 9731      	SBIW R30,1
00069c 91e4      	LPM  R30,Z
00069d 2f1e      	MOV  R17,R30
00069e 30e0      	CPI  R30,0
00069f f019      	BREQ _0x2020019
0006a0 2fa1      	MOV  R26,R17
0006a1 dfc2      	RCALL _lcd_putchar
0006a2 cff3      	RJMP _0x2020017
                 _0x2020019:
                 _0x2080002:
0006a3 8118      	LDD  R17,Y+0
0006a4 9623      	ADIW R28,3
0006a5 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
0006a6 93aa      	ST   -Y,R26
0006a7 9abb      	SBI  0x17,3
0006a8 9abc      	SBI  0x17,4
0006a9 9abd      	SBI  0x17,5
0006aa 9abe      	SBI  0x17,6
0006ab 9aba      	SBI  0x17,2
0006ac 9ab8      	SBI  0x17,0
0006ad 9ab9      	SBI  0x17,1
0006ae 98c2      	CBI  0x18,2
0006af 98c0      	CBI  0x18,0
0006b0 98c1      	CBI  0x18,1
0006b1 81e8      	LD   R30,Y
0006b2 93e0 0269 	STS  __lcd_maxx,R30
0006b4 58e0      	SUBI R30,-LOW(128)
                +
0006b5 93e0 0265+STS __base_y_G101 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G101,2
0006b7 81e8      	LD   R30,Y
0006b8 54e0      	SUBI R30,-LOW(192)
                +
0006b9 93e0 0266+STS __base_y_G101 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G101,3
0006bb e1a4      	LDI  R26,LOW(20)
0006bc e0b0      	LDI  R27,0
0006bd 940e 07f8 	CALL _delay_ms
0006bf 940e 07f0 	CALL SUBOPT_0x23
0006c1 940e 07f0 	CALL SUBOPT_0x23
0006c3 940e 07f0 	CALL SUBOPT_0x23
0006c5 e2a0      	LDI  R26,LOW(32)
0006c6 df4d      	RCALL __lcd_write_nibble_G101
                +
0006c7 ec88     +LDI R24 , LOW ( 200 )
0006c8 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0006c9 9701     +SBIW R24 , 1
0006ca f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0006cb e2a8      	LDI  R26,LOW(40)
0006cc df6c      	RCALL __lcd_write_data
0006cd e0a4      	LDI  R26,LOW(4)
0006ce df6a      	RCALL __lcd_write_data
0006cf e8a5      	LDI  R26,LOW(133)
0006d0 df68      	RCALL __lcd_write_data
0006d1 e0a6      	LDI  R26,LOW(6)
0006d2 df66      	RCALL __lcd_write_data
0006d3 df82      	RCALL _lcd_clear
                 _0x2080001:
0006d4 9621      	ADIW R28,1
0006d5 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
0006d6 93ba      	ST   -Y,R27
0006d7 93aa      	ST   -Y,R26
0006d8 91a9          ld   r26,y+
0006d9 91b9          ld   r27,y+
0006da 27ee          clr  r30
0006db 27ff          clr  r31
                 strlen0:
0006dc 916d          ld   r22,x+
0006dd 2366          tst  r22
0006de f011          breq strlen1
0006df 9631          adiw r30,1
0006e0 cffb          rjmp strlen0
                 strlen1:
0006e1 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
0006e2 93ba      	ST   -Y,R27
0006e3 93aa      	ST   -Y,R26
0006e4 27aa          clr  r26
0006e5 27bb          clr  r27
0006e6 91e9          ld   r30,y+
0006e7 91f9          ld   r31,y+
                 strlenf0:
0006e8 9005      	lpm  r0,z+
0006e9 2000          tst  r0
0006ea f011          breq strlenf1
0006eb 9611          adiw r26,1
0006ec cffb          rjmp strlenf0
                 strlenf1:
0006ed 01fd          movw r30,r26
0006ee 9508          ret
                 ; .FEND
                 
                 	.ESEG
                 _vurud_stat:
000000           	.BYTE 0x3E
                 _khuruj_stat:
00003e           	.BYTE 0x3E
                 _i:
00007c           	.BYTE 0x1
                 
                 	.DSEG
                 _month:
000260           	.BYTE 0x1
                 _year:
000261           	.BYTE 0x2
                 __base_y_G101:
000263           	.BYTE 0x4
                 __lcd_x:
000267           	.BYTE 0x1
                 __lcd_y:
000268           	.BYTE 0x1
                 __lcd_maxx:
000269           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
0006ef 940e 081f 	CALL __GTB12
0006f1 2e0e      	MOV  R0,R30
0006f2 91a0 0260 	LDS  R26,_month
0006f4 e0e6      	LDI  R30,LOW(6)
0006f5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x1:
0006f6 e0e1      	LDI  R30,LOW(1)
0006f7 2ece      	MOV  R12,R30
0006f8 91e0 0260 	LDS  R30,_month
0006fa 5fef      	SUBI R30,-LOW(1)
0006fb 93e0 0260 	STS  _month,R30
0006fd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
0006fe e6a1      	LDI  R26,LOW(_year)
0006ff e0b2      	LDI  R27,HIGH(_year)
000700 91ed      	LD   R30,X+
000701 91fd      	LD   R31,X+
000702 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
000703 93aa      	ST   -Y,R26
000704 93ba      	ST   -Y,R27
000705 93ea      	ST   -Y,R30
000706 93fa      	ST   -Y,R31
000707 b7ef      	IN   R30,SREG
000708 93ea      	ST   -Y,R30
000709 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x4:
00070a 2da5      	MOV  R26,R5
00070b e0b0      	LDI  R27,0
00070c fda7      	SBRC R26,7
00070d efbf      	SER  R27
00070e 2de4      	MOV  R30,R4
00070f e0f0      	LDI  R31,0
000710 fde7      	SBRC R30,7
000711 efff      	SER  R31
000712 0fae      	ADD  R26,R30
000713 1fbf      	ADC  R27,R31
000714 36a4      	CPI  R26,LOW(0x64)
000715 e0e0      	LDI  R30,HIGH(0x64)
000716 07be      	CPC  R27,R30
000717 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x5:
000718 e0e0      	LDI  R30,LOW(0)
000719 93ea      	ST   -Y,R30
00071a e0a1      	LDI  R26,LOW(1)
00071b 940c 0645 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x6:
00071d e7ac      	LDI  R26,LOW(_i)
00071e e0b0      	LDI  R27,HIGH(_i)
00071f 940e 0844 	CALL __EEPROMRDB
000721 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x7:
000722 2daa      	MOV  R26,R10
000723 e0e0      	LDI  R30,LOW(0)
000724 940e 0815 	CALL __EQB12
000726 2e0e      	MOV  R0,R30
000727 2dab      	MOV  R26,R11
000728 e0e0      	LDI  R30,LOW(0)
000729 940e 0815 	CALL __EQB12
00072b 220e      	AND  R0,R30
00072c 2dad      	MOV  R26,R13
00072d e0e0      	LDI  R30,LOW(0)
00072e 940e 0815 	CALL __EQB12
000730 21e0      	AND  R30,R0
000731 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 12 TIMES, CODE SIZE REDUCTION:30 WORDS
                 SUBOPT_0x8:
000732 940e 080a 	CALL __CBD1
000734 940e 083b 	CALL __PUTPARD1
000736 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x9:
000737 91e0 0261 	LDS  R30,_year
000739 91f0 0262 	LDS  R31,_year+1
00073b 940e 0810 	CALL __CWD1
00073d 940e 083b 	CALL __PUTPARD1
00073f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xA:
000740 01fe      	MOVW R30,R28
000741 93fa      	ST   -Y,R31
000742 93ea      	ST   -Y,R30
000743 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xB:
000744 01de      	MOVW R26,R28
000745 940c 0684 	JMP  _lcd_puts
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0xC:
000747 e1a9      	LDI  R26,LOW(25)
000748 e0b0      	LDI  R27,0
000749 940c 07f8 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0xD:
00074b e0a0      	LDI  R26,0
00074c 99ca      	SBIC 0x19,2
00074d e0a1      	LDI  R26,1
00074e e0e0      	LDI  R30,LOW(0)
00074f 940e 0815 	CALL __EQB12
000751 2e0e      	MOV  R0,R30
000752 2fa1      	MOV  R26,R17
000753 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0xE:
000754 e0e0      	LDI  R30,LOW(0)
000755 940e 0815 	CALL __EQB12
000757 21e0      	AND  R30,R0
000758 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0xF:
000759 e0e1      	LDI  R30,LOW(1)
00075a 940e 0815 	CALL __EQB12
00075c 21e0      	AND  R30,R0
00075d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x10:
00075e e0e2      	LDI  R30,LOW(2)
00075f 940e 0815 	CALL __EQB12
000761 21e0      	AND  R30,R0
000762 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x11:
000763 e084      	LDI  R24,4
000764 940e 05e0 	CALL _sprintf
000766 9628      	ADIW R28,8
000767 940e 0656 	CALL _lcd_clear
000769 cfda      	RJMP SUBOPT_0xB
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x12:
00076a e0a0      	LDI  R26,0
00076b 99c9      	SBIC 0x19,1
00076c e0a1      	LDI  R26,1
00076d e0e0      	LDI  R30,LOW(0)
00076e 940e 0815 	CALL __EQB12
000770 2e0e      	MOV  R0,R30
000771 e0a0      	LDI  R26,0
000772 fcf0      	SBRC R15,0
000773 e0a1      	LDI  R26,1
000774 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x13:
000775 e0a0      	LDI  R26,0
000776 99c8      	SBIC 0x19,0
000777 e0a1      	LDI  R26,1
000778 e0e0      	LDI  R30,LOW(0)
000779 940e 0815 	CALL __EQB12
00077b 2e0e      	MOV  R0,R30
00077c e0a0      	LDI  R26,0
00077d fcf0      	SBRC R15,0
00077e e0a1      	LDI  R26,1
00077f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x14:
000780 2e0e      	MOV  R0,R30
000781 e0a0      	LDI  R26,0
000782 fcf0      	SBRC R15,0
000783 e0a1      	LDI  R26,1
000784 cfcf      	RJMP SUBOPT_0xE
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x15:
000785 940e 082e 	CALL __GTB12U
000787 220e      	AND  R0,R30
000788 e0a0      	LDI  R26,0
000789 fcf0      	SBRC R15,0
00078a e0a1      	LDI  R26,1
00078b cfcd      	RJMP SUBOPT_0xF
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x16:
00078c e001      	LDI  R16,LOW(1)
00078d 5f1f      	SUBI R17,-1
00078e 94e8      	CLT
00078f f8f0      	BLD  R15,0
000790 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x17:
000791 e0f0      	LDI  R31,0
000792 0fee      	LSL  R30
000793 1fff      	ROL  R31
000794 0fae      	ADD  R26,R30
000795 1fbf      	ADC  R27,R31
000796 940e 0840 	CALL __EEPROMRDW
000798 2766      	CLR  R22
000799 2777      	CLR  R23
00079a 940e 083b 	CALL __PUTPARD1
00079c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x18:
00079d 01fe      	MOVW R30,R28
00079e 9631      	ADIW R30,1
00079f 93fa      	ST   -Y,R31
0007a0 93ea      	ST   -Y,R30
0007a1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x19:
0007a2 e084      	LDI  R24,4
0007a3 940e 05e0 	CALL _sprintf
0007a5 9628      	ADIW R28,8
0007a6 940e 0656 	CALL _lcd_clear
0007a8 01de      	MOVW R26,R28
0007a9 9611      	ADIW R26,1
0007aa 940c 0684 	JMP  _lcd_puts
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x1A:
0007ac e0a0      	LDI  R26,0
0007ad 99c9      	SBIC 0x19,1
0007ae e0a1      	LDI  R26,1
0007af e0e0      	LDI  R30,LOW(0)
0007b0 940e 0815 	CALL __EQB12
0007b2 2e0e      	MOV  R0,R30
0007b3 2fa1      	MOV  R26,R17
0007b4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x1B:
0007b5 e0a0      	LDI  R26,0
0007b6 99c8      	SBIC 0x19,0
0007b7 e0a1      	LDI  R26,1
0007b8 e0e0      	LDI  R30,LOW(0)
0007b9 940e 0815 	CALL __EQB12
0007bb 2e0e      	MOV  R0,R30
0007bc 2fa1      	MOV  R26,R17
0007bd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x1C:
0007be 932a      	ST   -Y,R18
0007bf 85ad      	LDD  R26,Y+13
0007c0 85be      	LDD  R27,Y+13+1
0007c1 85ef      	LDD  R30,Y+15
0007c2 89f8      	LDD  R31,Y+15+1
0007c3 9509      	ICALL
0007c4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x1D:
0007c5 89e8      	LDD  R30,Y+16
0007c6 89f9      	LDD  R31,Y+16+1
0007c7 9734      	SBIW R30,4
0007c8 8be8      	STD  Y+16,R30
0007c9 8bf9      	STD  Y+16+1,R31
0007ca 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1E:
0007cb 85ad      	LDD  R26,Y+13
0007cc 85be      	LDD  R27,Y+13+1
0007cd 85ef      	LDD  R30,Y+15
0007ce 89f8      	LDD  R31,Y+15+1
0007cf 9509      	ICALL
0007d0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x1F:
0007d1 89a8      	LDD  R26,Y+16
0007d2 89b9      	LDD  R27,Y+16+1
0007d3 9614      	ADIW R26,4
0007d4 940e 0833 	CALL __GETW1P
0007d6 83ee      	STD  Y+6,R30
0007d7 83ff      	STD  Y+6+1,R31
0007d8 81ae      	LDD  R26,Y+6
0007d9 81bf      	LDD  R27,Y+6+1
0007da 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x20:
0007db 89a8      	LDD  R26,Y+16
0007dc 89b9      	LDD  R27,Y+16+1
0007dd 9614      	ADIW R26,4
0007de 940e 0833 	CALL __GETW1P
0007e0 87ea      	STD  Y+10,R30
0007e1 87fb      	STD  Y+10+1,R31
0007e2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x21:
0007e3 01de      	MOVW R26,R28
0007e4 961c      	ADIW R26,12
0007e5 940e 0802 	CALL __ADDW2R15
0007e7 940e 0833 	CALL __GETW1P
0007e9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x22:
0007ea 940e 0639 	CALL __lcd_write_data
0007ec e0a3      	LDI  R26,LOW(3)
0007ed e0b0      	LDI  R27,0
0007ee 940c 07f8 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x23:
0007f0 e3a0      	LDI  R26,LOW(48)
0007f1 940e 0614 	CALL __lcd_write_nibble_G101
                +
0007f3 ec88     +LDI R24 , LOW ( 200 )
0007f4 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0007f5 9701     +SBIW R24 , 1
0007f6 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0007f7 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0007f8 9610      	adiw r26,0
0007f9 f039      	breq __delay_ms1
                 __delay_ms0:
0007fa 95a8      	wdr
                +
0007fb ed80     +LDI R24 , LOW ( 0x7D0 )
0007fc e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0007fd 9701     +SBIW R24 , 1
0007fe f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0007ff 9711      	sbiw r26,1
000800 f7c9      	brne __delay_ms0
                 __delay_ms1:
000801 9508      	ret
                 
                 __ADDW2R15:
000802 2400      	CLR  R0
000803 0daf      	ADD  R26,R15
000804 1db0      	ADC  R27,R0
000805 9508      	RET
                 
                 __ANEGW1:
000806 95f1      	NEG  R31
000807 95e1      	NEG  R30
000808 40f0      	SBCI R31,0
000809 9508      	RET
                 
                 __CBD1:
00080a 2ffe      	MOV  R31,R30
00080b 0fff      	ADD  R31,R31
00080c 0bff      	SBC  R31,R31
00080d 2f6f      	MOV  R22,R31
00080e 2f7f      	MOV  R23,R31
00080f 9508      	RET
                 
                 __CWD1:
000810 2f6f      	MOV  R22,R31
000811 0f66      	ADD  R22,R22
000812 0b66      	SBC  R22,R22
000813 2f76      	MOV  R23,R22
000814 9508      	RET
                 
                 __EQB12:
000815 17ea      	CP   R30,R26
000816 e0e1      	LDI  R30,1
000817 f009      	BREQ __EQB12T
000818 27ee      	CLR  R30
                 __EQB12T:
000819 9508      	RET
                 
                 __LEB12:
00081a 17ea      	CP   R30,R26
00081b e0e1      	LDI  R30,1
00081c f40c      	BRGE __LEB12T
00081d 27ee      	CLR  R30
                 __LEB12T:
00081e 9508      	RET
                 
                 __GTB12:
00081f 17ea      	CP   R30,R26
000820 e0e1      	LDI  R30,1
000821 f00c      	BRLT __GTB12T
000822 27ee      	CLR  R30
                 __GTB12T:
000823 9508      	RET
                 
                 __LEB12U:
000824 17ea      	CP   R30,R26
000825 e0e1      	LDI  R30,1
000826 f408      	BRSH __LEB12U1
000827 27ee      	CLR  R30
                 __LEB12U1:
000828 9508      	RET
                 
                 __LTB12U:
000829 17ae      	CP   R26,R30
00082a e0e1      	LDI  R30,1
00082b f008      	BRLO __LTB12U1
00082c 27ee      	CLR  R30
                 __LTB12U1:
00082d 9508      	RET
                 
                 __GTB12U:
00082e 17ea      	CP   R30,R26
00082f e0e1      	LDI  R30,1
000830 f008      	BRLO __GTB12U1
000831 27ee      	CLR  R30
                 __GTB12U1:
000832 9508      	RET
                 
                 __GETW1P:
000833 91ed      	LD   R30,X+
000834 91fc      	LD   R31,X
000835 9711      	SBIW R26,1
000836 9508      	RET
                 
                 __GETW1PF:
000837 9005      	LPM  R0,Z+
000838 91f4      	LPM  R31,Z
000839 2de0      	MOV  R30,R0
00083a 9508      	RET
                 
                 __PUTPARD1:
00083b 937a      	ST   -Y,R23
00083c 936a      	ST   -Y,R22
00083d 93fa      	ST   -Y,R31
00083e 93ea      	ST   -Y,R30
00083f 9508      	RET
                 
                 __EEPROMRDW:
000840 9611      	ADIW R26,1
000841 d002      	RCALL __EEPROMRDB
000842 2ffe      	MOV  R31,R30
000843 9711      	SBIW R26,1
                 
                 __EEPROMRDB:
000844 99e1      	SBIC EECR,EEWE
000845 cffe      	RJMP __EEPROMRDB
000846 93ff      	PUSH R31
000847 b7ff      	IN   R31,SREG
000848 94f8      	CLI
000849 bbae      	OUT  EEARL,R26
00084a bbbf      	OUT  EEARH,R27
00084b 9ae0      	SBI  EECR,EERE
00084c b3ed      	IN   R30,EEDR
00084d bfff      	OUT  SREG,R31
00084e 91ff      	POP  R31
00084f 9508      	RET
                 
                 __EEPROMWRW:
000850 d007      	RCALL __EEPROMWRB
000851 9611      	ADIW R26,1
000852 93ef      	PUSH R30
000853 2fef      	MOV  R30,R31
000854 d003      	RCALL __EEPROMWRB
000855 91ef      	POP  R30
000856 9711      	SBIW R26,1
000857 9508      	RET
                 
                 __EEPROMWRB:
000858 9be1      	SBIS EECR,EEWE
000859 c002      	RJMP __EEPROMWRB1
00085a 95a8      	WDR
00085b cffc      	RJMP __EEPROMWRB
                 __EEPROMWRB1:
00085c b79f      	IN   R25,SREG
00085d 94f8      	CLI
00085e bbae      	OUT  EEARL,R26
00085f bbbf      	OUT  EEARH,R27
000860 9ae0      	SBI  EECR,EERE
000861 b38d      	IN   R24,EEDR
000862 17e8      	CP   R30,R24
000863 f019      	BREQ __EEPROMWRB0
000864 bbed      	OUT  EEDR,R30
000865 9ae2      	SBI  EECR,EEMWE
000866 9ae1      	SBI  EECR,EEWE
                 __EEPROMWRB0:
000867 bf9f      	OUT  SREG,R25
000868 9508      	RET
                 
                 __SAVELOCR6:
000869 935a      	ST   -Y,R21
                 __SAVELOCR5:
00086a 934a      	ST   -Y,R20
                 __SAVELOCR4:
00086b 933a      	ST   -Y,R19
                 __SAVELOCR3:
00086c 932a      	ST   -Y,R18
                 __SAVELOCR2:
00086d 931a      	ST   -Y,R17
00086e 930a      	ST   -Y,R16
00086f 9508      	RET
                 
                 __LOADLOCR6:
000870 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000871 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000872 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000873 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000874 8119      	LDD  R17,Y+1
000875 8108      	LD   R16,Y
000876 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32A register use summary:
r0 :  36 r1 :   1 r2 :   6 r3 :   0 r4 :  12 r5 :  11 r6 :   3 r7 :   0 
r8 :   3 r9 :   0 r10:  12 r11:  12 r12:  16 r13:   5 r14:   0 r15:  22 
r16:  54 r17:  75 r18:  29 r19:   8 r20:   9 r21:  17 r22:  15 r23:   6 
r24:  30 r25:   7 r26: 198 r27:  69 r28:  38 r29:   1 r30: 415 r31: 121 
x  :  31 y  : 231 z  :  16 
Registers used: 31 out of 35 (88.6%)

ATmega32A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   5 add   :   9 
adiw  :  48 and   :  10 andi  :   8 asr   :   0 bclr  :   0 bld   :   8 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  49 
brge  :   9 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  17 
brlt  :   9 brmi  :   1 brne  :  44 brpl  :   1 brsh  :   4 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  : 213 
cbi   :   9 cbr   :   0 clc   :   0 clh   :   0 cli   :   3 cln   :   0 
clr   :  31 cls   :   0 clt   :   6 clv   :   0 clz   :   0 com   :   0 
cp    :  24 cpc   :   3 cpi   :  57 cpse  :   0 dec   :  10 des   :   0 
eor   :   1 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   7 inc   :   9 jmp   :  27 ld    :  43 ldd   :  80 ldi   : 251 
lds   :  19 lpm   :  16 lsl   :   3 lsr   :   0 mov   :  83 movw  :  30 
mul   :   1 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   0 
ori   :   7 out   :  26 pop   :   5 push  :   5 rcall :  23 ret   :  61 
reti  :   2 rjmp  : 134 rol   :   3 ror   :   0 sbc   :   3 sbci  :   2 
sbi   :  17 sbic  :  19 sbis  :  28 sbiw  :  29 sbr   :   0 sbrc  :  10 
sbrs  :  13 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   2 
ses   :   0 set   :   6 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    : 109 std   :  33 sts   :  17 sub   :   4 subi  :  30 swap  :   1 
tst   :   4 wdr   :   2 
Instructions used: 66 out of 116 (56.9%)

ATmega32A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0010ee   4042    292   4334   32768  13.2%
[.dseg] 0x000060 0x00026a      0     10     10    2048   0.5%
[.eseg] 0x000000 0x00007d      0    125    125    1024  12.2%

Assembly complete, 0 errors, 12 warnings
