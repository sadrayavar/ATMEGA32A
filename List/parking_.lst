
AVRASM ver. 2.1.30  D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm Thu Feb 08 12:05:24 2024

D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1087): warning: Register r5 already defined by the .DEF directive
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1088): warning: Register r4 already defined by the .DEF directive
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1089): warning: Register r6 already defined by the .DEF directive
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1090): warning: Register r7 already defined by the .DEF directive
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1091): warning: Register r8 already defined by the .DEF directive
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1092): warning: Register r9 already defined by the .DEF directive
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1093): warning: Register r11 already defined by the .DEF directive
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1094): warning: Register r10 already defined by the .DEF directive
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1095): warning: Register r13 already defined by the .DEF directive
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1096): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Release
                 ;Chip type              : ATmega32A
                 ;Program type           : Application
                 ;Clock frequency        : 8/000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32A
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _capacity=R5
                 	.DEF _reserved=R4
                 	.DEF _n_vurud=R6
                 	.DEF _n_vurud_msb=R7
                 	.DEF _n_khuruj=R8
                 	.DEF _n_khuruj_msb=R9
                 	.DEF _minute=R11
                 	.DEF _hour=R10
                 	.DEF _second=R13
                 	.DEF _day=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 00bd 	JMP  __RESET
000002 940c 013b 	JMP  _ext_int0_isr
000004 940c 0154 	JMP  _ext_int1_isr
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 00ec 	JMP  _timer2_ovf_isr
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
000033 0000      	.DW  0x0000
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000034 6400
000035 0000      	.DB  0x0,0x64,0x0,0x0
000036 0000
000037 3b17      	.DB  0x0,0x0,0x17,0x3B
000038 0a0c      	.DB  0xC,0xA
                 
                 _0x3:
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1144): warning: .cseg .db misalignment - padding zero byte
000039 000c      	.DB  0xC
                 _0x4:
00003a 057a      	.DB  0x7A,0x5
                 _0x0:
00003b 6173
00003c 6976
00003d 676e
00003e 6420      	.DB  0x73,0x61,0x76,0x69,0x6E,0x67,0x20,0x64
00003f 7461
000040 0061
000041 6143
000042 3d70      	.DB  0x61,0x74,0x61,0x0,0x43,0x61,0x70,0x3D
000043 6425
000044 2520
000045 2f64
000046 6425      	.DB  0x25,0x64,0x20,0x25,0x64,0x2F,0x25,0x64
000047 252f
000048 0064
000049 6425
00004a 253a      	.DB  0x2F,0x25,0x64,0x0,0x25,0x64,0x3A,0x25
00004b 3a64
00004c 6425
00004d 2020
00004e 3d52      	.DB  0x64,0x3A,0x25,0x64,0x20,0x20,0x52,0x3D
00004f 6425
000050 0020
000051 4620
000052 6c75      	.DB  0x25,0x64,0x20,0x0,0x20,0x46,0x75,0x6C
000053 006c
000054 4520
000055 706d
000056 5400      	.DB  0x6C,0x0,0x20,0x45,0x6D,0x70,0x0,0x54
000057 6d69
000058 2065
000059 6553
00005a 7474      	.DB  0x69,0x6D,0x65,0x20,0x53,0x65,0x74,0x74
00005b 6e69
00005c 2067
00005d 3e3e
00005e 4900      	.DB  0x69,0x6E,0x67,0x20,0x3E,0x3E,0x0,0x49
00005f 264e
000060 554f
000061 2054
000062 6553      	.DB  0x4E,0x26,0x4F,0x55,0x54,0x20,0x53,0x65
000063 7261
000064 6863
000065 3e20
000066 003e      	.DB  0x61,0x72,0x63,0x68,0x20,0x3E,0x3E,0x0
000067 6552
000068 6573
000069 7672
00006a 5f65      	.DB  0x52,0x65,0x73,0x65,0x72,0x76,0x65,0x5F
00006b 6150
00006c 6b72
00006d 3e20
00006e 003e      	.DB  0x50,0x61,0x72,0x6B,0x20,0x3E,0x3E,0x0
00006f 6553
000070 2074
000071 6164
000072 6174      	.DB  0x53,0x65,0x74,0x20,0x64,0x61,0x74,0x61
000073 3e20
000074 003e
000075 6553
000076 2074      	.DB  0x20,0x3E,0x3E,0x0,0x53,0x65,0x74,0x20
000077 696d
000078 3d6e
000079 6425
00007a 2020      	.DB  0x6D,0x69,0x6E,0x3D,0x25,0x64,0x20,0x20
00007b 003e
00007c 6553
00007d 2074
00007e 6f68      	.DB  0x3E,0x0,0x53,0x65,0x74,0x20,0x68,0x6F
00007f 7275
000080 253d
000081 2064
000082 3e20      	.DB  0x75,0x72,0x3D,0x25,0x64,0x20,0x20,0x3E
000083 2500
000084 2f64
000085 6425
000086 252f      	.DB  0x0,0x25,0x64,0x2F,0x25,0x64,0x2F,0x25
000087 2064
000088 6900
000089 3d6e
00008a 6425      	.DB  0x64,0x20,0x0,0x69,0x6E,0x3D,0x25,0x64
00008b 6f20
00008c 7475
00008d 253d
00008e 0064      	.DB  0x20,0x6F,0x75,0x74,0x3D,0x25,0x64,0x0
00008f 6552
000090 6573
000091 7672
000092 6465      	.DB  0x52,0x65,0x73,0x65,0x72,0x76,0x65,0x64
000093 253d
000094 0064
000095 6553
000096 2074      	.DB  0x3D,0x25,0x64,0x0,0x53,0x65,0x74,0x20
000097 6f6d
000098 746e
000099 3d68
00009a 6425      	.DB  0x6D,0x6F,0x6E,0x74,0x68,0x3D,0x25,0x64
00009b 2020
00009c 003e
00009d 6553
00009e 2074      	.DB  0x20,0x20,0x3E,0x0,0x53,0x65,0x74,0x20
00009f 6164
0000a0 3d79
0000a1 6425
0000a2 2020      	.DB  0x64,0x61,0x79,0x3D,0x25,0x64,0x20,0x20
0000a3 003e
0000a4 6553
0000a5 2074
0000a6 6579      	.DB  0x3E,0x0,0x53,0x65,0x74,0x20,0x79,0x65
0000a7 7261
0000a8 253d
0000a9 2064
0000aa 3e20      	.DB  0x61,0x72,0x3D,0x25,0x64,0x20,0x20,0x3E
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1176): warning: .cseg .db misalignment - padding zero byte
0000ab 0000      	.DB  0x0
                 _0x2020003:
0000ac c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
0000ad 0001      	.DW  0x01
0000ae 0002      	.DW  0x02
0000af 0066      	.DW  __REG_BIT_VARS*2
                 
0000b0 000a      	.DW  0x0A
0000b1 0004      	.DW  0x04
0000b2 0068      	.DW  __REG_VARS*2
                 
0000b3 0001      	.DW  0x01
0000b4 0260      	.DW  _month
0000b5 0072      	.DW  _0x3*2
                 
0000b6 0002      	.DW  0x02
0000b7 0261      	.DW  _year
0000b8 0074      	.DW  _0x4*2
                 
0000b9 0002      	.DW  0x02
0000ba 0263      	.DW  __base_y_G101
0000bb 0158      	.DW  _0x2020003*2
                 
                 _0xFFFFFFFF:
0000bc 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
0000bd 94f8      	CLI
0000be 27ee      	CLR  R30
0000bf bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
0000c0 e0f1      	LDI  R31,1
0000c1 bff5      	OUT  MCUCR,R31
0000c2 bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
0000c3 e1f8      	LDI  R31,0x18
0000c4 bdf1      	OUT  WDTCR,R31
0000c5 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
0000c6 e08d      	LDI  R24,(14-2)+1
0000c7 e0a2      	LDI  R26,2
0000c8 27bb      	CLR  R27
                 __CLEAR_REG:
0000c9 93ed      	ST   X+,R30
0000ca 958a      	DEC  R24
0000cb f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0000cc e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
0000cd e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
0000ce e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
0000cf 93ed      	ST   X+,R30
0000d0 9701      	SBIW R24,1
0000d1 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0000d2 e5ea      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0000d3 e0f1      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0000d4 9185      	LPM  R24,Z+
0000d5 9195      	LPM  R25,Z+
0000d6 9700      	SBIW R24,0
0000d7 f061      	BREQ __GLOBAL_INI_END
0000d8 91a5      	LPM  R26,Z+
0000d9 91b5      	LPM  R27,Z+
0000da 9005      	LPM  R0,Z+
0000db 9015      	LPM  R1,Z+
0000dc 01bf      	MOVW R22,R30
0000dd 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0000de 9005      	LPM  R0,Z+
0000df 920d      	ST   X+,R0
0000e0 9701      	SBIW R24,1
0000e1 f7e1      	BRNE __GLOBAL_INI_LOOP
0000e2 01fb      	MOVW R30,R22
0000e3 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0000e4 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0000e5 bfed      	OUT  SPL,R30
0000e6 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000e7 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000e8 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000e9 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000ea 940c 0173 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <mega32a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h> // delay_ms functions
                 ;#include <stdio.h> // sprintf function
                 ;#include <alcd.h>  // lcd related functions
                 ;#define xtal 8000000
                 ;
                 ;// prototyping functions
                 ;char ok(void);
                 ;char in_out_search(void);
                 ;char time_set(void);
                 ;char reserve_park(void);
                 ;char set_data(void);
                 ;
                 ;signed char capacity = 100, reserved = 0;
                 ;unsigned int n_vurud, n_khuruj; // maximum  65535  mashin dar ruz
                 ;eeprom unsigned int vurud_stat[31], khuruj_stat[31];
                 ;eeprom unsigned char i;
                 ;bit _full = 0, _emp = 0;
                 ;
                 ;// date realted variables
                 ;signed char minute = 59, hour = 23, second = 10, day = 12, month = 12;
                 
                 	.DSEG
                 ;signed int year = 1402;
                 ;
                 ;// define timer interrupt
                 ;interrupt[TIM2_OVF] void timer2_ovf_isr(void)
                 ; 0000 001A {
                 
                 	.CSEG
                 _timer2_ovf_isr:
                 ; .FSTART _timer2_ovf_isr
0000ec 920a      	ST   -Y,R0
0000ed 93aa      	ST   -Y,R26
0000ee 93ba      	ST   -Y,R27
0000ef 93ea      	ST   -Y,R30
0000f0 93fa      	ST   -Y,R31
0000f1 b7ef      	IN   R30,SREG
0000f2 93ea      	ST   -Y,R30
                 ; 0000 001B 
                 ; 0000 001C   if (second == 59)
0000f3 e3eb      	LDI  R30,LOW(59)
0000f4 15ed      	CP   R30,R13
0000f5 f471      	BRNE _0x5
                 ; 0000 001D   {
                 ; 0000 001E     second = 0;
0000f6 24dd      	CLR  R13
                 ; 0000 001F     if (minute == 59)
0000f7 15eb      	CP   R30,R11
0000f8 f449      	BRNE _0x6
                 ; 0000 0020     {
                 ; 0000 0021       minute = 0;
0000f9 24bb      	CLR  R11
                 ; 0000 0022       if (hour == 23)
0000fa e1e7      	LDI  R30,LOW(23)
0000fb 15ea      	CP   R30,R10
0000fc f419      	BRNE _0x7
                 ; 0000 0023       {
                 ; 0000 0024         hour = 0;
0000fd 24aa      	CLR  R10
                 ; 0000 0025         day++;
0000fe 94c3      	INC  R12
                 ; 0000 0026       }
                 ; 0000 0027       else
0000ff c001      	RJMP _0x8
                 _0x7:
                 ; 0000 0028         hour++;
000100 94a3      	INC  R10
                 ; 0000 0029     }
                 _0x8:
                 ; 0000 002A     else
000101 c001      	RJMP _0x9
                 _0x6:
                 ; 0000 002B       minute++;
000102 94b3      	INC  R11
                 ; 0000 002C   }
                 _0x9:
                 ; 0000 002D   else
000103 c001      	RJMP _0xA
                 _0x5:
                 ; 0000 002E     second++;
000104 94d3      	INC  R13
                 ; 0000 002F 
                 ; 0000 0030   if ((day > 30) & (month > 6))
                 _0xA:
000105 2dac      	MOV  R26,R12
000106 e1ee      	LDI  R30,LOW(30)
000107 940e 06f0 	CALL SUBOPT_0x0
000109 940e 0820 	CALL __GTB12
00010b 21e0      	AND  R30,R0
00010c f011      	BREQ _0xB
                 ; 0000 0031   {
                 ; 0000 0032     day = 1;
00010d 940e 06f7 	CALL SUBOPT_0x1
                 ; 0000 0033     month++;
                 ; 0000 0034   }
                 ; 0000 0035 
                 ; 0000 0036   if ((day > 31) & (month <= 6))
                 _0xB:
00010f 2dac      	MOV  R26,R12
000110 e1ef      	LDI  R30,LOW(31)
000111 940e 06f0 	CALL SUBOPT_0x0
000113 940e 081b 	CALL __LEB12
000115 21e0      	AND  R30,R0
000116 f011      	BREQ _0xC
                 ; 0000 0037   {
                 ; 0000 0038     day = 1;
000117 940e 06f7 	CALL SUBOPT_0x1
                 ; 0000 0039     month++;
                 ; 0000 003A   }
                 ; 0000 003B 
                 ; 0000 003C   if ((day > 29) & (month == 12))
                 _0xC:
000119 2dac      	MOV  R26,R12
00011a e1ed      	LDI  R30,LOW(29)
00011b 940e 0820 	CALL __GTB12
00011d 2e0e      	MOV  R0,R30
00011e 91a0 0260 	LDS  R26,_month
000120 e0ec      	LDI  R30,LOW(12)
000121 940e 0816 	CALL __EQB12
000123 21e0      	AND  R30,R0
000124 f011      	BREQ _0xD
                 ; 0000 003D   {
                 ; 0000 003E     day = 1;
000125 940e 06f7 	CALL SUBOPT_0x1
                 ; 0000 003F     month++;
                 ; 0000 0040   }
                 ; 0000 0041 
                 ; 0000 0042   if (month > 12)
                 _0xD:
000127 91a0 0260 	LDS  R26,_month
000129 30ad      	CPI  R26,LOW(0xD)
00012a f044      	BRLT _0xE
                 ; 0000 0043   {
                 ; 0000 0044     month = 1;
00012b e0e1      	LDI  R30,LOW(1)
00012c 93e0 0260 	STS  _month,R30
                 ; 0000 0045     year++;
00012e 940e 06ff 	CALL SUBOPT_0x2
000130 9631      	ADIW R30,1
000131 93fe      	ST   -X,R31
000132 93ee      	ST   -X,R30
                 ; 0000 0046   }
                 ; 0000 0047 }
                 _0xE:
000133 91e9      	LD   R30,Y+
000134 bfef      	OUT  SREG,R30
000135 91f9      	LD   R31,Y+
000136 91e9      	LD   R30,Y+
000137 91b9      	LD   R27,Y+
000138 91a9      	LD   R26,Y+
000139 9009      	LD   R0,Y+
00013a 9518      	RETI
                 ; .FEND
                 ;
                 ;// define interrupt 0
                 ;interrupt[EXT_INT0] void ext_int0_isr(void)
                 ; 0000 004B {
                 _ext_int0_isr:
                 ; .FSTART _ext_int0_isr
00013b 940e 0704 	CALL SUBOPT_0x3
                 ; 0000 004C   capacity++;
00013d 9453      	INC  R5
                 ; 0000 004D   n_khuruj++;
00013e 01f4      	MOVW R30,R8
00013f 9631      	ADIW R30,1
000140 014f      	MOVW R8,R30
                 ; 0000 004E 
                 ; 0000 004F   if ((capacity + reserved) >= 100)
000141 940e 070b 	CALL SUBOPT_0x4
000143 f02c      	BRLT _0xF
                 ; 0000 0050   {
                 ; 0000 0051     capacity = 100 - reserved;
000144 e6e4      	LDI  R30,LOW(100)
000145 19e4      	SUB  R30,R4
000146 2e5e      	MOV  R5,R30
                 ; 0000 0052     _emp = 1;
000147 9468      	SET
000148 c001      	RJMP _0xC2
                 ; 0000 0053   }
                 ; 0000 0054   else
                 _0xF:
                 ; 0000 0055   {
                 ; 0000 0056     _emp = 0;
000149 94e8      	CLT
                 _0xC2:
00014a f821      	BLD  R2,1
                 ; 0000 0057   }
                 ; 0000 0058 
                 ; 0000 0059   if ((capacity) <= 0)
00014b e0e0      	LDI  R30,LOW(0)
00014c 15e5      	CP   R30,R5
00014d f01c      	BRLT _0x11
                 ; 0000 005A   {
                 ; 0000 005B     capacity = 0;
00014e 2455      	CLR  R5
                 ; 0000 005C     _full = 1;
00014f 9468      	SET
000150 c001      	RJMP _0xC3
                 ; 0000 005D   }
                 ; 0000 005E   else
                 _0x11:
                 ; 0000 005F   {
                 ; 0000 0060     _full = 0;
000151 94e8      	CLT
                 _0xC3:
000152 f820      	BLD  R2,0
                 ; 0000 0061   }
                 ; 0000 0062 }
000153 c018      	RJMP _0xC6
                 ; .FEND
                 ;
                 ;// define interrupt 1
                 ;interrupt[EXT_INT1] void ext_int1_isr(void)
                 ; 0000 0066 {
                 _ext_int1_isr:
                 ; .FSTART _ext_int1_isr
000154 940e 0704 	CALL SUBOPT_0x3
                 ; 0000 0067   capacity--;
000156 945a      	DEC  R5
                 ; 0000 0068   n_vurud++;
000157 01f3      	MOVW R30,R6
000158 9631      	ADIW R30,1
000159 013f      	MOVW R6,R30
                 ; 0000 0069   if ((capacity) <= 0)
00015a e0e0      	LDI  R30,LOW(0)
00015b 15e5      	CP   R30,R5
00015c f01c      	BRLT _0x13
                 ; 0000 006A   {
                 ; 0000 006B     capacity = 0;
00015d 2455      	CLR  R5
                 ; 0000 006C     _full = 1;
00015e 9468      	SET
00015f c001      	RJMP _0xC4
                 ; 0000 006D   }
                 ; 0000 006E   else
                 _0x13:
                 ; 0000 006F   {
                 ; 0000 0070     _full = 0;
000160 94e8      	CLT
                 _0xC4:
000161 f820      	BLD  R2,0
                 ; 0000 0071   }
                 ; 0000 0072 
                 ; 0000 0073   if ((capacity + reserved) >= 100)
000162 940e 070b 	CALL SUBOPT_0x4
000164 f02c      	BRLT _0x15
                 ; 0000 0074   {
                 ; 0000 0075     capacity = 100 - reserved;
000165 e6e4      	LDI  R30,LOW(100)
000166 19e4      	SUB  R30,R4
000167 2e5e      	MOV  R5,R30
                 ; 0000 0076     _emp = 1;
000168 9468      	SET
000169 c001      	RJMP _0xC5
                 ; 0000 0077   }
                 ; 0000 0078   else
                 _0x15:
                 ; 0000 0079   {
                 ; 0000 007A     _emp = 0;
00016a 94e8      	CLT
                 _0xC5:
00016b f821      	BLD  R2,1
                 ; 0000 007B   }
                 ; 0000 007C }
                 _0xC6:
00016c 91e9      	LD   R30,Y+
00016d bfef      	OUT  SREG,R30
00016e 91f9      	LD   R31,Y+
00016f 91e9      	LD   R30,Y+
000170 91b9      	LD   R27,Y+
000171 91a9      	LD   R26,Y+
000172 9518      	RETI
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 007F {
                 _main:
                 ; .FSTART _main
                 ; 0000 0080 
                 ; 0000 0081   char line[17], line2[17];
                 ; 0000 0082 
                 ; 0000 0083   // GICR|=0xC0;
                 ; 0000 0084   // MCUCR=0x0A;
                 ; 0000 0085   // MCUCSR=0x00;
                 ; 0000 0086   // GIFR=0xC0;
                 ; 0000 0087 
                 ; 0000 0088   GICR |= 0xC0;
000173 97a2      	SBIW R28,34
                 ;	line -> Y+17
                 ;	line2 -> Y+0
000174 b7eb      	IN   R30,0x3B
000175 6ce0      	ORI  R30,LOW(0xC0)
000176 bfeb      	OUT  0x3B,R30
                 ; 0000 0089   MCUCR = 0x0B;
000177 e0eb      	LDI  R30,LOW(11)
000178 bfe5      	OUT  0x35,R30
                 ; 0000 008A   MCUCSR = 0x00;
000179 e0e0      	LDI  R30,LOW(0)
00017a bfe4      	OUT  0x34,R30
                 ; 0000 008B   GIFR = 0xC0;
00017b ece0      	LDI  R30,LOW(192)
00017c bfea      	OUT  0x3A,R30
                 ; 0000 008C 
                 ; 0000 008D   // initilize lcd
                 ; 0000 008E   lcd_init(16);
00017d e1a0      	LDI  R26,LOW(16)
00017e 940e 06a7 	CALL _lcd_init
                 ; 0000 008F   lcd_clear();
000180 940e 0657 	CALL _lcd_clear
                 ; 0000 0090   lcd_gotoxy(0, 1);
000182 940e 0719 	CALL SUBOPT_0x5
                 ; 0000 0091   delay_ms(300);
000184 e2ac      	LDI  R26,LOW(300)
000185 e0b1      	LDI  R27,HIGH(300)
000186 940e 07f9 	CALL _delay_ms
                 ; 0000 0092 
                 ; 0000 0093   ASSR = 0x08; // timer2
000188 e0e8      	LDI  R30,LOW(8)
000189 bde2      	OUT  0x22,R30
                 ; 0000 0094   TCCR2 = 0x05;
00018a e0e5      	LDI  R30,LOW(5)
00018b bde5      	OUT  0x25,R30
                 ; 0000 0095   TCNT2 = 0x00;
00018c e0e0      	LDI  R30,LOW(0)
00018d bde4      	OUT  0x24,R30
                 ; 0000 0096   OCR2 = 0x00;
00018e bde3      	OUT  0x23,R30
                 ; 0000 0097   TIMSK = 0x40;
00018f e4e0      	LDI  R30,LOW(64)
000190 bfe9      	OUT  0x39,R30
                 ; 0000 0098 
                 ; 0000 0099   PORTA = (1 << DDD0) | (1 << DDD1) | (1 << DDD2) | (1 << DDD3) | (1 << DDD4);
000191 e1ef      	LDI  R30,LOW(31)
000192 bbeb      	OUT  0x1B,R30
                 ; 0000 009A 
                 ; 0000 009B   day = i; // i in epprom
000193 940e 071e 	CALL SUBOPT_0x6
000195 2ece      	MOV  R12,R30
                 ; 0000 009C 
                 ; 0000 009D #asm("sei")
000196 9478      	sei
                 ; 0000 009E   capacity = capacity - reserved;
000197 1854      	SUB  R5,R4
                 ; 0000 009F 
                 ; 0000 00A0   while (1)
                 _0x17:
                 ; 0000 00A1   {
                 ; 0000 00A2 
                 ; 0000 00A3     if (PINA .2 == 0)
000198 99ca      	SBIC 0x19,2
000199 c003      	RJMP _0x1A
                 ; 0000 00A4     {
                 ; 0000 00A5       while (PINA .2 == 0)
                 _0x1B:
00019a 9bca      	SBIS 0x19,2
                 ; 0000 00A6         ;
00019b cffe      	RJMP _0x1B
                 ; 0000 00A7       ok();
00019c d07b      	RCALL _ok
                 ; 0000 00A8     }
                 ; 0000 00A9 
                 ; 0000 00AA     if (hour == 0 & minute == 0 & second == 0)
                 _0x1A:
00019d 940e 0723 	CALL SUBOPT_0x7
00019f f181      	BREQ _0x1E
                 ; 0000 00AB     { //  data will save   in 0:0:00
                 ; 0000 00AC       vurud_stat[i] = n_vurud;
0001a0 940e 071e 	CALL SUBOPT_0x6
0001a2 e0a0      	LDI  R26,LOW(_vurud_stat)
0001a3 e0b0      	LDI  R27,HIGH(_vurud_stat)
0001a4 e0f0      	LDI  R31,0
0001a5 0fee      	LSL  R30
0001a6 1fff      	ROL  R31
0001a7 0fae      	ADD  R26,R30
0001a8 1fbf      	ADC  R27,R31
0001a9 01f3      	MOVW R30,R6
0001aa 940e 0851 	CALL __EEPROMWRW
                 ; 0000 00AD       khuruj_stat[i] = n_khuruj;
0001ac 940e 071e 	CALL SUBOPT_0x6
0001ae e3ae      	LDI  R26,LOW(_khuruj_stat)
0001af e0b0      	LDI  R27,HIGH(_khuruj_stat)
0001b0 e0f0      	LDI  R31,0
0001b1 0fee      	LSL  R30
0001b2 1fff      	ROL  R31
0001b3 0fae      	ADD  R26,R30
0001b4 1fbf      	ADC  R27,R31
0001b5 01f4      	MOVW R30,R8
0001b6 940e 0851 	CALL __EEPROMWRW
                 ; 0000 00AE       i++;
0001b8 940e 071e 	CALL SUBOPT_0x6
0001ba 5fef      	SUBI R30,-LOW(1)
0001bb 940e 0859 	CALL __EEPROMWRB
                 ; 0000 00AF 
                 ; 0000 00B0       if (i > 30) // 30 31 29 yek mah
0001bd 940e 071e 	CALL SUBOPT_0x6
0001bf 31ef      	CPI  R30,LOW(0x1F)
0001c0 f028      	BRLO _0x1F
                 ; 0000 00B1         i = 0;
0001c1 e7ac      	LDI  R26,LOW(_i)
0001c2 e0b0      	LDI  R27,HIGH(_i)
0001c3 e0e0      	LDI  R30,LOW(0)
0001c4 940e 0859 	CALL __EEPROMWRB
                 ; 0000 00B2 
                 ; 0000 00B3       while (hour == 0 & minute == 0 & second == 0)
                 _0x1F:
                 _0x20:
0001c6 940e 0723 	CALL SUBOPT_0x7
0001c8 f039      	BREQ _0x22
                 ; 0000 00B4       {
                 ; 0000 00B5         lcd_clear();
0001c9 940e 0657 	CALL _lcd_clear
                 ; 0000 00B6         lcd_putsf("saving data");
                +
0001cb e7a6     +LDI R26 , LOW ( 2 * _0x0 + ( 0 ) )
0001cc e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW2FN _0x0,0
0001cd 940e 0694 	CALL _lcd_putsf
                 ; 0000 00B7       }
0001cf cff6      	RJMP _0x20
                 _0x22:
                 ; 0000 00B8     }
                 ; 0000 00B9 
                 ; 0000 00BA     sprintf(line, "Cap=%d %d/%d/%d", capacity, year, month, day);
                 _0x1E:
0001d0 01fe      	MOVW R30,R28
0001d1 9671      	ADIW R30,17
0001d2 93fa      	ST   -Y,R31
0001d3 93ea      	ST   -Y,R30
                +
0001d4 e8e2     +LDI R30 , LOW ( 2 * _0x0 + ( 12 ) )
0001d5 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 12 ) )
                 	__POINTW1FN _0x0,12
0001d6 93fa      	ST   -Y,R31
0001d7 93ea      	ST   -Y,R30
0001d8 2de5      	MOV  R30,R5
0001d9 940e 0733 	CALL SUBOPT_0x8
0001db 940e 0738 	CALL SUBOPT_0x9
0001dd 91e0 0260 	LDS  R30,_month
0001df 940e 0733 	CALL SUBOPT_0x8
0001e1 2dec      	MOV  R30,R12
0001e2 940e 0733 	CALL SUBOPT_0x8
0001e4 e180      	LDI  R24,16
0001e5 940e 05e1 	CALL _sprintf
0001e7 9664      	ADIW R28,20
                 ; 0000 00BB     sprintf(line2, "%d:%d:%d  R=%d ", hour, minute, second, reserved);
0001e8 940e 0741 	CALL SUBOPT_0xA
                +
0001ea e9e2     +LDI R30 , LOW ( 2 * _0x0 + ( 28 ) )
0001eb e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 28 ) )
                 	__POINTW1FN _0x0,28
0001ec 93fa      	ST   -Y,R31
0001ed 93ea      	ST   -Y,R30
0001ee 2dea      	MOV  R30,R10
0001ef 940e 0733 	CALL SUBOPT_0x8
0001f1 2deb      	MOV  R30,R11
0001f2 940e 0733 	CALL SUBOPT_0x8
0001f4 2ded      	MOV  R30,R13
0001f5 940e 0733 	CALL SUBOPT_0x8
0001f7 2de4      	MOV  R30,R4
0001f8 940e 0733 	CALL SUBOPT_0x8
0001fa e180      	LDI  R24,16
0001fb 940e 05e1 	CALL _sprintf
0001fd 9664      	ADIW R28,20
                 ; 0000 00BC     // sprintf(line, "%d/%d/%d  %d:%d:%d", year, month, day, hour, minute, second);
                 ; 0000 00BD     // sprintf(line2, "Cap=%d   R=%d ", capacity, reserved);
                 ; 0000 00BE 
                 ; 0000 00BF     lcd_clear();
0001fe 940e 0657 	CALL _lcd_clear
                 ; 0000 00C0 
                 ; 0000 00C1     lcd_puts(line);
000200 01de      	MOVW R26,R28
000201 9651      	ADIW R26,17
000202 940e 0685 	CALL _lcd_puts
                 ; 0000 00C2 
                 ; 0000 00C3     if (_full == 1)
000204 fe20      	SBRS R2,0
000205 c004      	RJMP _0x23
                 ; 0000 00C4       lcd_putsf(" Full");
                +
000206 eaa2     +LDI R26 , LOW ( 2 * _0x0 + ( 44 ) )
000207 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 44 ) )
                 	__POINTW2FN _0x0,44
000208 940e 0694 	CALL _lcd_putsf
                 ; 0000 00C5 
                 ; 0000 00C6     if (_emp == 1)
                 _0x23:
00020a fe21      	SBRS R2,1
00020b c004      	RJMP _0x24
                 ; 0000 00C7       lcd_putsf(" Emp");
                +
00020c eaa8     +LDI R26 , LOW ( 2 * _0x0 + ( 50 ) )
00020d e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 50 ) )
                 	__POINTW2FN _0x0,50
00020e 940e 0694 	CALL _lcd_putsf
                 ; 0000 00C8 
                 ; 0000 00C9     lcd_gotoxy(0, 1);
                 _0x24:
000210 940e 0719 	CALL SUBOPT_0x5
                 ; 0000 00CA     lcd_puts(line2);
000212 940e 0745 	CALL SUBOPT_0xB
                 ; 0000 00CB     delay_ms(25);
000214 940e 0748 	CALL SUBOPT_0xC
                 ; 0000 00CC   }
000216 cf81      	RJMP _0x17
                 ; 0000 00CD }
                 _0x25:
000217 cfff      	RJMP _0x25
                 ; .FEND
                 ;
                 ;/// Functions 4 ok and...
                 ;char ok(void)
                 ; 0000 00D1 {
                 _ok:
                 ; .FSTART _ok
                 ; 0000 00D2   char _chose = 0;
                 ; 0000 00D3   while (1)
000218 931a      	ST   -Y,R17
                 ;	_chose -> R17
000219 e010      	LDI  R17,0
                 _0x26:
                 ; 0000 00D4   {
                 ; 0000 00D5     if (_chose == 0)
00021a 3010      	CPI  R17,0
00021b f431      	BRNE _0x29
                 ; 0000 00D6     {
                 ; 0000 00D7       lcd_clear();
00021c 940e 0657 	CALL _lcd_clear
                 ; 0000 00D8       lcd_putsf("Time Setting >>");
                +
00021e eaad     +LDI R26 , LOW ( 2 * _0x0 + ( 55 ) )
00021f e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 55 ) )
                 	__POINTW2FN _0x0,55
000220 940e 0694 	CALL _lcd_putsf
                 ; 0000 00D9     }
                 ; 0000 00DA 
                 ; 0000 00DB     if (_chose == 1)
                 _0x29:
000222 3011      	CPI  R17,1
000223 f431      	BRNE _0x2A
                 ; 0000 00DC     {
                 ; 0000 00DD       lcd_clear();
000224 940e 0657 	CALL _lcd_clear
                 ; 0000 00DE       lcd_putsf("IN&OUT Search >>");
                +
000226 ebad     +LDI R26 , LOW ( 2 * _0x0 + ( 71 ) )
000227 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 71 ) )
                 	__POINTW2FN _0x0,71
000228 940e 0694 	CALL _lcd_putsf
                 ; 0000 00DF     }
                 ; 0000 00E0 
                 ; 0000 00E1     if (_chose == 2)
                 _0x2A:
00022a 3012      	CPI  R17,2
00022b f431      	BRNE _0x2B
                 ; 0000 00E2     {
                 ; 0000 00E3       lcd_clear();
00022c 940e 0657 	CALL _lcd_clear
                 ; 0000 00E4       lcd_putsf("Reserve_Park >>");
                +
00022e ecae     +LDI R26 , LOW ( 2 * _0x0 + ( 88 ) )
00022f e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 88 ) )
                 	__POINTW2FN _0x0,88
000230 940e 0694 	CALL _lcd_putsf
                 ; 0000 00E5     }
                 ; 0000 00E6 
                 ; 0000 00E7     if (_chose == 3)
                 _0x2B:
000232 3013      	CPI  R17,3
000233 f431      	BRNE _0x2C
                 ; 0000 00E8     {
                 ; 0000 00E9       lcd_clear();
000234 940e 0657 	CALL _lcd_clear
                 ; 0000 00EA       lcd_putsf("Set data >>");
                +
000236 edae     +LDI R26 , LOW ( 2 * _0x0 + ( 104 ) )
000237 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 104 ) )
                 	__POINTW2FN _0x0,104
000238 940e 0694 	CALL _lcd_putsf
                 ; 0000 00EB     }
                 ; 0000 00EC 
                 ; 0000 00ED     if (PINA .3 == 0)
                 _0x2C:
00023a 99cb      	SBIC 0x19,3
00023b c006      	RJMP _0x2D
                 ; 0000 00EE     { // NEXT
                 ; 0000 00EF       while (PINA .3 == 0)
                 _0x2E:
00023c 9bcb      	SBIS 0x19,3
                 ; 0000 00F0         ;
00023d cffe      	RJMP _0x2E
                 ; 0000 00F1       _chose++;
00023e 5f1f      	SUBI R17,-1
                 ; 0000 00F2       if (_chose >= 4)
00023f 3014      	CPI  R17,4
000240 f008      	BRLO _0x31
                 ; 0000 00F3         _chose = 0;
000241 e010      	LDI  R17,LOW(0)
                 ; 0000 00F4     }
                 _0x31:
                 ; 0000 00F5 
                 ; 0000 00F6     if (PINA .4 == 0)
                 _0x2D:
000242 99cc      	SBIC 0x19,4
000243 c004      	RJMP _0x32
                 ; 0000 00F7     { // Back
                 ; 0000 00F8       while (PINA .4 == 0)
                 _0x33:
000244 9bcc      	SBIS 0x19,4
                 ; 0000 00F9         ;
000245 cffe      	RJMP _0x33
                 ; 0000 00FA       return 0;
000246 e0e0      	LDI  R30,LOW(0)
000247 c025      	RJMP _0x2080008
                 ; 0000 00FB     }
                 ; 0000 00FC 
                 ; 0000 00FD     if (PINA .2 == 0 & _chose == 0)
                 _0x32:
000248 940e 074c 	CALL SUBOPT_0xD
00024a 940e 0755 	CALL SUBOPT_0xE
00024c f019      	BREQ _0x36
                 ; 0000 00FE     { // chose time_setting
                 ; 0000 00FF       while (PINA .2 == 0)
                 _0x37:
00024d 9bca      	SBIS 0x19,2
                 ; 0000 0100         ;
00024e cffe      	RJMP _0x37
                 ; 0000 0101       time_set();
00024f d01f      	RCALL _time_set
                 ; 0000 0102     }
                 ; 0000 0103 
                 ; 0000 0104     if (PINA .2 == 0 & _chose == 1)
                 _0x36:
000250 940e 074c 	CALL SUBOPT_0xD
000252 940e 075a 	CALL SUBOPT_0xF
000254 f019      	BREQ _0x3A
                 ; 0000 0105     { // chose in_out_search
                 ; 0000 0106       while (PINA .2 == 0)
                 _0x3B:
000255 9bca      	SBIS 0x19,2
                 ; 0000 0107         ;
000256 cffe      	RJMP _0x3B
                 ; 0000 0108       in_out_search();
000257 d078      	RCALL _in_out_search
                 ; 0000 0109     }
                 ; 0000 010A 
                 ; 0000 010B     if (PINA .2 == 0 & _chose == 2)
                 _0x3A:
000258 940e 074c 	CALL SUBOPT_0xD
00025a 940e 075f 	CALL SUBOPT_0x10
00025c f019      	BREQ _0x3E
                 ; 0000 010C     { // chose reserve
                 ; 0000 010D       while (PINA .2 == 0)
                 _0x3F:
00025d 9bca      	SBIS 0x19,2
                 ; 0000 010E         ;
00025e cffe      	RJMP _0x3F
                 ; 0000 010F       reserve_park();
00025f d137      	RCALL _reserve_park
                 ; 0000 0110     }
                 ; 0000 0111 
                 ; 0000 0112     if (PINA .2 == 0 & _chose == 3)
                 _0x3E:
000260 940e 074c 	CALL SUBOPT_0xD
000262 e0e3      	LDI  R30,LOW(3)
000263 940e 0816 	CALL __EQB12
000265 21e0      	AND  R30,R0
000266 f019      	BREQ _0x42
                 ; 0000 0113     { // chose set data
                 ; 0000 0114       while (PINA .2 == 0)
                 _0x43:
000267 9bca      	SBIS 0x19,2
                 ; 0000 0115         ;
000268 cffe      	RJMP _0x43
                 ; 0000 0116       set_data();
000269 d157      	RCALL _set_data
                 ; 0000 0117     }
                 ; 0000 0118 
                 ; 0000 0119     delay_ms(25);
                 _0x42:
00026a 940e 0748 	CALL SUBOPT_0xC
                 ; 0000 011A   }
00026c cfad      	RJMP _0x26
                 ; 0000 011B }
                 _0x2080008:
00026d 9119      	LD   R17,Y+
00026e 9508      	RET
                 ; .FEND
                 ;
                 ;/// Time setting
                 ;char time_set(void)
                 ; 0000 011F {
                 _time_set:
                 ; .FSTART _time_set
00026f 92ff      	PUSH R15
                 ; 0000 0120   bit _chose = 0;
                 ; 0000 0121   char buff[17];
                 ; 0000 0122   while (1)
000270 9761      	SBIW R28,17
                 ;	_chose -> R15.0
                 ;	buff -> Y+0
000271 24ff      	CLR  R15
                 _0x46:
                 ; 0000 0123   {
                 ; 0000 0124     if (_chose == 0)
000272 fcf0      	SBRC R15,0
000273 c00b      	RJMP _0x49
                 ; 0000 0125     {
                 ; 0000 0126       sprintf(buff, "Set min=%d  >", minute);
000274 940e 0741 	CALL SUBOPT_0xA
                +
000276 eeea     +LDI R30 , LOW ( 2 * _0x0 + ( 116 ) )
000277 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 116 ) )
                 	__POINTW1FN _0x0,116
000278 93fa      	ST   -Y,R31
000279 93ea      	ST   -Y,R30
00027a 2deb      	MOV  R30,R11
00027b 940e 0733 	CALL SUBOPT_0x8
00027d 940e 0764 	CALL SUBOPT_0x11
                 ; 0000 0127       lcd_clear();
                 ; 0000 0128       lcd_puts(buff);
                 ; 0000 0129     }
                 ; 0000 012A 
                 ; 0000 012B     if (_chose == 1)
                 _0x49:
00027f fef0      	SBRS R15,0
000280 c00b      	RJMP _0x4A
                 ; 0000 012C     {
                 ; 0000 012D       sprintf(buff, "Set hour=%d  >", hour);
000281 940e 0741 	CALL SUBOPT_0xA
                +
000283 efe8     +LDI R30 , LOW ( 2 * _0x0 + ( 130 ) )
000284 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 130 ) )
                 	__POINTW1FN _0x0,130
000285 93fa      	ST   -Y,R31
000286 93ea      	ST   -Y,R30
000287 2dea      	MOV  R30,R10
000288 940e 0733 	CALL SUBOPT_0x8
00028a 940e 0764 	CALL SUBOPT_0x11
                 ; 0000 012E       lcd_clear();
                 ; 0000 012F       lcd_puts(buff);
                 ; 0000 0130     }
                 ; 0000 0131 
                 ; 0000 0132     if (PINA .1 == 0 & _chose == 0)
                 _0x4A:
00028c 940e 076b 	CALL SUBOPT_0x12
00028e 940e 0755 	CALL SUBOPT_0xE
000290 f039      	BREQ _0x4B
                 ; 0000 0133     { // UP     min
                 ; 0000 0134       while (PINA .1 == 0)
                 _0x4C:
000291 9bc9      	SBIS 0x19,1
                 ; 0000 0135         ;
000292 cffe      	RJMP _0x4C
                 ; 0000 0136       minute++;
000293 94b3      	INC  R11
                 ; 0000 0137       if (minute > 59)
000294 e3eb      	LDI  R30,LOW(59)
000295 15eb      	CP   R30,R11
000296 f40c      	BRGE _0x4F
                 ; 0000 0138         minute = 0;
000297 24bb      	CLR  R11
                 ; 0000 0139     }
                 _0x4F:
                 ; 0000 013A 
                 ; 0000 013B     if (PINA .0 == 0 & _chose == 0)
                 _0x4B:
000298 940e 0776 	CALL SUBOPT_0x13
00029a 940e 0755 	CALL SUBOPT_0xE
00029c f041      	BREQ _0x50
                 ; 0000 013C     { // DOWN    min
                 ; 0000 013D       while (PINA .0 == 0)
                 _0x51:
00029d 9bc8      	SBIS 0x19,0
                 ; 0000 013E         ;
00029e cffe      	RJMP _0x51
                 ; 0000 013F       minute--;
00029f 94ba      	DEC  R11
                 ; 0000 0140       if (minute < 0)
0002a0 e0e0      	LDI  R30,LOW(0)
0002a1 16be      	CP   R11,R30
0002a2 f414      	BRGE _0x54
                 ; 0000 0141         minute = 59;
0002a3 e3eb      	LDI  R30,LOW(59)
0002a4 2ebe      	MOV  R11,R30
                 ; 0000 0142     }
                 _0x54:
                 ; 0000 0143 
                 ; 0000 0144     if (PINA .1 == 0 & _chose == 1)
                 _0x50:
0002a5 940e 076b 	CALL SUBOPT_0x12
0002a7 940e 075a 	CALL SUBOPT_0xF
0002a9 f039      	BREQ _0x55
                 ; 0000 0145     { // UP    hour
                 ; 0000 0146       while (PINA .1 == 0)
                 _0x56:
0002aa 9bc9      	SBIS 0x19,1
                 ; 0000 0147         ;
0002ab cffe      	RJMP _0x56
                 ; 0000 0148       hour++;
0002ac 94a3      	INC  R10
                 ; 0000 0149       if (hour > 23)
0002ad e1e7      	LDI  R30,LOW(23)
0002ae 15ea      	CP   R30,R10
0002af f40c      	BRGE _0x59
                 ; 0000 014A         hour = 0;
0002b0 24aa      	CLR  R10
                 ; 0000 014B     }
                 _0x59:
                 ; 0000 014C 
                 ; 0000 014D     if (PINA .0 == 0 & _chose == 1)
                 _0x55:
0002b1 940e 0776 	CALL SUBOPT_0x13
0002b3 940e 075a 	CALL SUBOPT_0xF
0002b5 f041      	BREQ _0x5A
                 ; 0000 014E     { // DOWN    hour
                 ; 0000 014F       while (PINA .0 == 0)
                 _0x5B:
0002b6 9bc8      	SBIS 0x19,0
                 ; 0000 0150         ;
0002b7 cffe      	RJMP _0x5B
                 ; 0000 0151       hour--;
0002b8 94aa      	DEC  R10
                 ; 0000 0152       if (hour < 0)
0002b9 e0e0      	LDI  R30,LOW(0)
0002ba 16ae      	CP   R10,R30
0002bb f414      	BRGE _0x5E
                 ; 0000 0153         hour = 23;
0002bc e1e7      	LDI  R30,LOW(23)
0002bd 2eae      	MOV  R10,R30
                 ; 0000 0154     }
                 _0x5E:
                 ; 0000 0155 
                 ; 0000 0156     if (PINA .3 == 0)
                 _0x5A:
0002be 99cb      	SBIC 0x19,3
0002bf c004      	RJMP _0x5F
                 ; 0000 0157     { // NEXT
                 ; 0000 0158       while (PINA .3 == 0)
                 _0x60:
0002c0 9bcb      	SBIS 0x19,3
                 ; 0000 0159         ;
0002c1 cffe      	RJMP _0x60
                 ; 0000 015A       _chose = !_chose;
0002c2 e0e1      	LDI  R30,LOW(1)
0002c3 26fe      	EOR  R15,R30
                 ; 0000 015B     }
                 ; 0000 015C 
                 ; 0000 015D     if (PINA .4 == 0)
                 _0x5F:
0002c4 99cc      	SBIC 0x19,4
0002c5 c004      	RJMP _0x63
                 ; 0000 015E     { // Back
                 ; 0000 015F       while (PINA .4 == 0)
                 _0x64:
0002c6 9bcc      	SBIS 0x19,4
                 ; 0000 0160         ;
0002c7 cffe      	RJMP _0x64
                 ; 0000 0161       return 0;
0002c8 e0e0      	LDI  R30,LOW(0)
0002c9 c003      	RJMP _0x2080007
                 ; 0000 0162     }
                 ; 0000 0163 
                 ; 0000 0164     delay_ms(25);
                 _0x63:
0002ca 940e 0748 	CALL SUBOPT_0xC
                 ; 0000 0165   }
0002cc cfa5      	RJMP _0x46
                 ; 0000 0166 }
                 _0x2080007:
0002cd 9661      	ADIW R28,17
0002ce 90ff      	POP  R15
0002cf 9508      	RET
                 ; .FEND
                 ;
                 ;/// IN&OUT Search
                 ;char in_out_search(void)
                 ; 0000 016A {
                 _in_out_search:
                 ; .FSTART _in_out_search
0002d0 92ff      	PUSH R15
                 ; 0000 016B   char t_month = month, buff[17], buff2[17];
                 ; 0000 016C   char i_temp = i;
                 ; 0000 016D   bit bit_m = 0;
                 ; 0000 016E   while (1)
0002d1 97a2      	SBIW R28,34
0002d2 931a      	ST   -Y,R17
0002d3 930a      	ST   -Y,R16
                 ;	t_month -> R17
                 ;	buff -> Y+19
                 ;	buff2 -> Y+2
                 ;	i_temp -> R16
                 ;	bit_m -> R15.0
0002d4 24ff      	CLR  R15
0002d5 9110 0260 	LDS  R17,_month
0002d7 940e 071e 	CALL SUBOPT_0x6
0002d9 2f0e      	MOV  R16,R30
                 _0x67:
                 ; 0000 016F   {
                 ; 0000 0170 
                 ; 0000 0171     if (PINA .1 == 0)
0002da 99c9      	SBIC 0x19,1
0002db c03b      	RJMP _0x6A
                 ; 0000 0172     { // UP
                 ; 0000 0173       while (PINA .1 == 0)
                 _0x6B:
0002dc 9bc9      	SBIS 0x19,1
                 ; 0000 0174         ;
0002dd cffe      	RJMP _0x6B
                 ; 0000 0175       i_temp++;
0002de 5f0f      	SUBI R16,-1
                 ; 0000 0176 
                 ; 0000 0177       if (i_temp > i & bit_m == 0)
0002df 940e 071e 	CALL SUBOPT_0x6
0002e1 2fa0      	MOV  R26,R16
0002e2 940e 082f 	CALL __GTB12U
0002e4 940e 0781 	CALL SUBOPT_0x14
0002e6 f031      	BREQ _0x6E
                 ; 0000 0178       {
                 ; 0000 0179         i_temp = i;
0002e7 940e 071e 	CALL SUBOPT_0x6
0002e9 2f0e      	MOV  R16,R30
                 ; 0000 017A         t_month--;
0002ea 5011      	SUBI R17,1
                 ; 0000 017B         bit_m = 1;
0002eb 9468      	SET
0002ec f8f0      	BLD  R15,0
                 ; 0000 017C       }
                 ; 0000 017D 
                 ; 0000 017E       if (t_month <= 6 & i_temp > 31 & bit_m == 1)
                 _0x6E:
0002ed 2fa1      	MOV  R26,R17
0002ee e0e6      	LDI  R30,LOW(6)
0002ef 940e 0825 	CALL __LEB12U
0002f1 2e0e      	MOV  R0,R30
0002f2 2fa0      	MOV  R26,R16
0002f3 e1ef      	LDI  R30,LOW(31)
0002f4 940e 0786 	CALL SUBOPT_0x15
0002f6 f011      	BREQ _0x6F
                 ; 0000 017F       {
                 ; 0000 0180         i_temp = 1;
0002f7 940e 078d 	CALL SUBOPT_0x16
                 ; 0000 0181         t_month++;
                 ; 0000 0182         bit_m = 0;
                 ; 0000 0183       }
                 ; 0000 0184 
                 ; 0000 0185       if (t_month > 6 & i_temp > 30 & bit_m == 1)
                 _0x6F:
0002f9 2fa1      	MOV  R26,R17
0002fa e0e6      	LDI  R30,LOW(6)
0002fb 940e 082f 	CALL __GTB12U
0002fd 2e0e      	MOV  R0,R30
0002fe 2fa0      	MOV  R26,R16
0002ff e1ee      	LDI  R30,LOW(30)
000300 940e 0786 	CALL SUBOPT_0x15
000302 f011      	BREQ _0x70
                 ; 0000 0186       {
                 ; 0000 0187         i_temp = 1;
000303 940e 078d 	CALL SUBOPT_0x16
                 ; 0000 0188         t_month++;
                 ; 0000 0189         bit_m = 0;
                 ; 0000 018A       }
                 ; 0000 018B 
                 ; 0000 018C       if (t_month == 12 & i_temp > 29 & bit_m == 1)
                 _0x70:
000305 2fa1      	MOV  R26,R17
000306 e0ec      	LDI  R30,LOW(12)
000307 940e 0816 	CALL __EQB12
000309 2e0e      	MOV  R0,R30
00030a 2fa0      	MOV  R26,R16
00030b e1ed      	LDI  R30,LOW(29)
00030c 940e 0786 	CALL SUBOPT_0x15
00030e f011      	BREQ _0x71
                 ; 0000 018D       {
                 ; 0000 018E         i_temp = 1;
00030f 940e 078d 	CALL SUBOPT_0x16
                 ; 0000 018F         t_month++;
                 ; 0000 0190         bit_m = 0;
                 ; 0000 0191       }
                 ; 0000 0192 
                 ; 0000 0193       if (t_month == 0)
                 _0x71:
000311 3010      	CPI  R17,0
000312 f409      	BRNE _0x72
                 ; 0000 0194         t_month = 12;
000313 e01c      	LDI  R17,LOW(12)
                 ; 0000 0195 
                 ; 0000 0196       if (t_month > 12)
                 _0x72:
000314 301d      	CPI  R17,13
000315 f008      	BRLO _0x73
                 ; 0000 0197         t_month = 1;
000316 e011      	LDI  R17,LOW(1)
                 ; 0000 0198     }
                 _0x73:
                 ; 0000 0199 
                 ; 0000 019A     if (PINA .0 == 0)
                 _0x6A:
000317 99c8      	SBIC 0x19,0
000318 c034      	RJMP _0x74
                 ; 0000 019B     { // DOWN
                 ; 0000 019C       while (PINA .0 == 0)
                 _0x75:
000319 9bc8      	SBIS 0x19,0
                 ; 0000 019D         ;
00031a cffe      	RJMP _0x75
                 ; 0000 019E       i_temp--;
00031b 5001      	SUBI R16,1
                 ; 0000 019F 
                 ; 0000 01A0       if (i_temp == 0 & bit_m == 0)
00031c 2fa0      	MOV  R26,R16
00031d e0e0      	LDI  R30,LOW(0)
00031e 940e 0816 	CALL __EQB12
000320 940e 0781 	CALL SUBOPT_0x14
000322 f091      	BREQ _0x78
                 ; 0000 01A1       {
                 ; 0000 01A2 
                 ; 0000 01A3         t_month--;
000323 5011      	SUBI R17,1
                 ; 0000 01A4 
                 ; 0000 01A5         if (t_month == 0)
000324 3010      	CPI  R17,0
000325 f409      	BRNE _0x79
                 ; 0000 01A6           t_month = 12;
000326 e01c      	LDI  R17,LOW(12)
                 ; 0000 01A7 
                 ; 0000 01A8         if (t_month > 12)
                 _0x79:
000327 301d      	CPI  R17,13
000328 f008      	BRLO _0x7A
                 ; 0000 01A9           t_month = 1;
000329 e011      	LDI  R17,LOW(1)
                 ; 0000 01AA 
                 ; 0000 01AB         if (t_month <= 6)
                 _0x7A:
00032a 3017      	CPI  R17,7
00032b f408      	BRSH _0x7B
                 ; 0000 01AC           i_temp = 31;
00032c e10f      	LDI  R16,LOW(31)
                 ; 0000 01AD 
                 ; 0000 01AE         if (t_month > 6)
                 _0x7B:
00032d 3017      	CPI  R17,7
00032e f008      	BRLO _0x7C
                 ; 0000 01AF           i_temp = 30;
00032f e10e      	LDI  R16,LOW(30)
                 ; 0000 01B0 
                 ; 0000 01B1         if (t_month == 12)
                 _0x7C:
000330 301c      	CPI  R17,12
000331 f409      	BRNE _0x7D
                 ; 0000 01B2           i_temp = 29;
000332 e10d      	LDI  R16,LOW(29)
                 ; 0000 01B3 
                 ; 0000 01B4         bit_m = 1;
                 _0x7D:
000333 9468      	SET
000334 f8f0      	BLD  R15,0
                 ; 0000 01B5       }
                 ; 0000 01B6 
                 ; 0000 01B7       if (i_temp < i & bit_m == 1)
                 _0x78:
000335 940e 071e 	CALL SUBOPT_0x6
000337 2fa0      	MOV  R26,R16
000338 940e 082a 	CALL __LTB12U
00033a 2e0e      	MOV  R0,R30
00033b e0a0      	LDI  R26,0
00033c fcf0      	SBRC R15,0
00033d e0a1      	LDI  R26,1
00033e 940e 075a 	CALL SUBOPT_0xF
000340 f031      	BREQ _0x7E
                 ; 0000 01B8       {
                 ; 0000 01B9         i_temp = i;
000341 940e 071e 	CALL SUBOPT_0x6
000343 2f0e      	MOV  R16,R30
                 ; 0000 01BA         t_month++;
000344 5f1f      	SUBI R17,-1
                 ; 0000 01BB         bit_m = 0;
000345 94e8      	CLT
000346 f8f0      	BLD  R15,0
                 ; 0000 01BC       }
                 ; 0000 01BD 
                 ; 0000 01BE       if (t_month == 0)
                 _0x7E:
000347 3010      	CPI  R17,0
000348 f409      	BRNE _0x7F
                 ; 0000 01BF         t_month = 12;
000349 e01c      	LDI  R17,LOW(12)
                 ; 0000 01C0 
                 ; 0000 01C1       if (t_month > 12)
                 _0x7F:
00034a 301d      	CPI  R17,13
00034b f008      	BRLO _0x80
                 ; 0000 01C2         t_month = 1;
00034c e011      	LDI  R17,LOW(1)
                 ; 0000 01C3     }
                 _0x80:
                 ; 0000 01C4 
                 ; 0000 01C5     sprintf(buff, "%d/%d/%d ", year, t_month, i_temp);
                 _0x74:
00034d 01fe      	MOVW R30,R28
00034e 9673      	ADIW R30,19
00034f 93fa      	ST   -Y,R31
000350 93ea      	ST   -Y,R30
                +
000351 e0e7     +LDI R30 , LOW ( 2 * _0x0 + ( 145 ) )
000352 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 145 ) )
                 	__POINTW1FN _0x0,145
000353 93fa      	ST   -Y,R31
000354 93ea      	ST   -Y,R30
000355 940e 0738 	CALL SUBOPT_0x9
000357 2fe1      	MOV  R30,R17
000358 27ff      	CLR  R31
000359 2766      	CLR  R22
00035a 2777      	CLR  R23
00035b 940e 083c 	CALL __PUTPARD1
00035d 2fe0      	MOV  R30,R16
00035e 27ff      	CLR  R31
00035f 2766      	CLR  R22
000360 2777      	CLR  R23
000361 940e 083c 	CALL __PUTPARD1
000363 e08c      	LDI  R24,12
000364 940e 05e1 	CALL _sprintf
000366 9660      	ADIW R28,16
                 ; 0000 01C6     sprintf(buff2, "in=%d out=%d", vurud_stat[i_temp], khuruj_stat[i_temp]);
000367 01fe      	MOVW R30,R28
000368 9632      	ADIW R30,2
000369 93fa      	ST   -Y,R31
00036a 93ea      	ST   -Y,R30
                +
00036b e1e1     +LDI R30 , LOW ( 2 * _0x0 + ( 155 ) )
00036c e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 155 ) )
                 	__POINTW1FN _0x0,155
00036d 93fa      	ST   -Y,R31
00036e 93ea      	ST   -Y,R30
00036f 2fe0      	MOV  R30,R16
000370 e0a0      	LDI  R26,LOW(_vurud_stat)
000371 e0b0      	LDI  R27,HIGH(_vurud_stat)
000372 940e 0792 	CALL SUBOPT_0x17
000374 2fe0      	MOV  R30,R16
000375 e3ae      	LDI  R26,LOW(_khuruj_stat)
000376 e0b0      	LDI  R27,HIGH(_khuruj_stat)
000377 940e 0792 	CALL SUBOPT_0x17
000379 e088      	LDI  R24,8
00037a 940e 05e1 	CALL _sprintf
00037c 962c      	ADIW R28,12
                 ; 0000 01C7 
                 ; 0000 01C8     lcd_clear();
00037d 940e 0657 	CALL _lcd_clear
                 ; 0000 01C9     lcd_puts(buff);
00037f 01de      	MOVW R26,R28
000380 9653      	ADIW R26,19
000381 940e 0685 	CALL _lcd_puts
                 ; 0000 01CA     lcd_gotoxy(0, 1);
000383 940e 0719 	CALL SUBOPT_0x5
                 ; 0000 01CB     lcd_puts(buff2);
000385 01de      	MOVW R26,R28
000386 9612      	ADIW R26,2
000387 940e 0685 	CALL _lcd_puts
                 ; 0000 01CC 
                 ; 0000 01CD     if (PINA .4 == 0)
000389 99cc      	SBIC 0x19,4
00038a c004      	RJMP _0x81
                 ; 0000 01CE     { // Back
                 ; 0000 01CF       while (PINA .4 == 0)
                 _0x82:
00038b 9bcc      	SBIS 0x19,4
                 ; 0000 01D0         ;
00038c cffe      	RJMP _0x82
                 ; 0000 01D1       return 0;
00038d e0e0      	LDI  R30,LOW(0)
00038e c003      	RJMP _0x2080006
                 ; 0000 01D2     }
                 ; 0000 01D3     delay_ms(25);
                 _0x81:
00038f 940e 0748 	CALL SUBOPT_0xC
                 ; 0000 01D4   }
000391 cf48      	RJMP _0x67
                 ; 0000 01D5 }
                 _0x2080006:
000392 8119      	LDD  R17,Y+1
000393 8108      	LDD  R16,Y+0
000394 96a4      	ADIW R28,36
000395 90ff      	POP  R15
000396 9508      	RET
                 ; .FEND
                 ;
                 ;// reserve_park
                 ;char reserve_park(void)
                 ; 0000 01D9 {
                 _reserve_park:
                 ; .FSTART _reserve_park
                 ; 0000 01DA   char buff[17];
                 ; 0000 01DB 
                 ; 0000 01DC   while (1)
000397 9761      	SBIW R28,17
                 ;	buff -> Y+0
                 _0x85:
                 ; 0000 01DD   {
                 ; 0000 01DE     sprintf(buff, "Reserved=%d", reserved);
000398 940e 0741 	CALL SUBOPT_0xA
                +
00039a e1ee     +LDI R30 , LOW ( 2 * _0x0 + ( 168 ) )
00039b e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 168 ) )
                 	__POINTW1FN _0x0,168
00039c 93fa      	ST   -Y,R31
00039d 93ea      	ST   -Y,R30
00039e 2de4      	MOV  R30,R4
00039f 940e 0733 	CALL SUBOPT_0x8
0003a1 940e 0764 	CALL SUBOPT_0x11
                 ; 0000 01DF     lcd_clear();
                 ; 0000 01E0     lcd_puts(buff);
                 ; 0000 01E1 
                 ; 0000 01E2     if (PINA .1 == 0)
0003a3 99c9      	SBIC 0x19,1
0003a4 c003      	RJMP _0x88
                 ; 0000 01E3     { // UP
                 ; 0000 01E4       while (PINA .1 == 0)
                 _0x89:
0003a5 9bc9      	SBIS 0x19,1
                 ; 0000 01E5         ;
0003a6 cffe      	RJMP _0x89
                 ; 0000 01E6       reserved++;
0003a7 9443      	INC  R4
                 ; 0000 01E7     }
                 ; 0000 01E8 
                 ; 0000 01E9     if (reserved >= 100)
                 _0x88:
0003a8 e6e4      	LDI  R30,LOW(100)
0003a9 164e      	CP   R4,R30
0003aa f014      	BRLT _0x8C
                 ; 0000 01EA     {
                 ; 0000 01EB       reserved = 99;
0003ab e6e3      	LDI  R30,LOW(99)
0003ac 2e4e      	MOV  R4,R30
                 ; 0000 01EC     }
                 ; 0000 01ED 
                 ; 0000 01EE     if (PINA .0 == 0)
                 _0x8C:
0003ad 99c8      	SBIC 0x19,0
0003ae c003      	RJMP _0x8D
                 ; 0000 01EF     { // DOWN
                 ; 0000 01F0       while (PINA .0 == 0)
                 _0x8E:
0003af 9bc8      	SBIS 0x19,0
                 ; 0000 01F1         ;
0003b0 cffe      	RJMP _0x8E
                 ; 0000 01F2       reserved--;
0003b1 944a      	DEC  R4
                 ; 0000 01F3     }
                 ; 0000 01F4 
                 ; 0000 01F5     if (reserved <= 0)
                 _0x8D:
0003b2 e0e0      	LDI  R30,LOW(0)
0003b3 15e4      	CP   R30,R4
0003b4 f00c      	BRLT _0x91
                 ; 0000 01F6     {
                 ; 0000 01F7       reserved = 0;
0003b5 2444      	CLR  R4
                 ; 0000 01F8     }
                 ; 0000 01F9 
                 ; 0000 01FA     if (PINA .4 == 0)
                 _0x91:
0003b6 99cc      	SBIC 0x19,4
0003b7 c004      	RJMP _0x92
                 ; 0000 01FB     { // Back
                 ; 0000 01FC       while (PINA .4 == 0)
                 _0x93:
0003b8 9bcc      	SBIS 0x19,4
                 ; 0000 01FD         ;
0003b9 cffe      	RJMP _0x93
                 ; 0000 01FE       return 0;
0003ba e0e0      	LDI  R30,LOW(0)
0003bb c003      	RJMP _0x2080005
                 ; 0000 01FF     }
                 ; 0000 0200     delay_ms(25);
                 _0x92:
0003bc 940e 0748 	CALL SUBOPT_0xC
                 ; 0000 0201   }
0003be cfd9      	RJMP _0x85
                 ; 0000 0202 }
                 _0x2080005:
0003bf 9661      	ADIW R28,17
0003c0 9508      	RET
                 ; .FEND
                 ;
                 ;//// data setting
                 ;char set_data(void)
                 ; 0000 0206 {
                 _set_data:
                 ; .FSTART _set_data
                 ; 0000 0207   char _chose = 0;
                 ; 0000 0208   char buff[17];
                 ; 0000 0209   while (1)
0003c1 9761      	SBIW R28,17
0003c2 931a      	ST   -Y,R17
                 ;	_chose -> R17
                 ;	buff -> Y+1
0003c3 e010      	LDI  R17,0
                 _0x96:
                 ; 0000 020A   {
                 ; 0000 020B     if (_chose == 1)
0003c4 3011      	CPI  R17,1
0003c5 f461      	BRNE _0x99
                 ; 0000 020C     {
                 ; 0000 020D       sprintf(buff, "Set month=%d  >", month);
0003c6 940e 079e 	CALL SUBOPT_0x18
                +
0003c8 e2ea     +LDI R30 , LOW ( 2 * _0x0 + ( 180 ) )
0003c9 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 180 ) )
                 	__POINTW1FN _0x0,180
0003ca 93fa      	ST   -Y,R31
0003cb 93ea      	ST   -Y,R30
0003cc 91e0 0260 	LDS  R30,_month
0003ce 940e 0733 	CALL SUBOPT_0x8
0003d0 940e 07a3 	CALL SUBOPT_0x19
                 ; 0000 020E       lcd_clear();
                 ; 0000 020F       lcd_puts(buff);
                 ; 0000 0210     }
                 ; 0000 0211 
                 ; 0000 0212     if (_chose == 0)
                 _0x99:
0003d2 3010      	CPI  R17,0
0003d3 f459      	BRNE _0x9A
                 ; 0000 0213     {
                 ; 0000 0214       sprintf(buff, "Set day=%d  >", day);
0003d4 940e 079e 	CALL SUBOPT_0x18
                +
0003d6 e3ea     +LDI R30 , LOW ( 2 * _0x0 + ( 196 ) )
0003d7 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 196 ) )
                 	__POINTW1FN _0x0,196
0003d8 93fa      	ST   -Y,R31
0003d9 93ea      	ST   -Y,R30
0003da 2dec      	MOV  R30,R12
0003db 940e 0733 	CALL SUBOPT_0x8
0003dd 940e 07a3 	CALL SUBOPT_0x19
                 ; 0000 0215       lcd_clear();
                 ; 0000 0216       lcd_puts(buff);
                 ; 0000 0217     }
                 ; 0000 0218 
                 ; 0000 0219     if (_chose == 2)
                 _0x9A:
0003df 3012      	CPI  R17,2
0003e0 f451      	BRNE _0x9B
                 ; 0000 021A     {
                 ; 0000 021B       sprintf(buff, "Set year=%d  >", year);
0003e1 940e 079e 	CALL SUBOPT_0x18
                +
0003e3 e4e8     +LDI R30 , LOW ( 2 * _0x0 + ( 210 ) )
0003e4 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 210 ) )
                 	__POINTW1FN _0x0,210
0003e5 93fa      	ST   -Y,R31
0003e6 93ea      	ST   -Y,R30
0003e7 940e 0738 	CALL SUBOPT_0x9
0003e9 940e 07a3 	CALL SUBOPT_0x19
                 ; 0000 021C       lcd_clear();
                 ; 0000 021D       lcd_puts(buff);
                 ; 0000 021E     }
                 ; 0000 021F 
                 ; 0000 0220     if (PINA .1 == 0 & _chose == 1)
                 _0x9B:
0003eb 940e 07ad 	CALL SUBOPT_0x1A
0003ed 940e 075a 	CALL SUBOPT_0xF
0003ef f071      	BREQ _0x9C
                 ; 0000 0221     { // UP     month
                 ; 0000 0222       while (PINA .1 == 0)
                 _0x9D:
0003f0 9bc9      	SBIS 0x19,1
                 ; 0000 0223         ;
0003f1 cffe      	RJMP _0x9D
                 ; 0000 0224       month++;
0003f2 91e0 0260 	LDS  R30,_month
0003f4 5fef      	SUBI R30,-LOW(1)
0003f5 93e0 0260 	STS  _month,R30
                 ; 0000 0225       if (month > 12)
0003f7 91a0 0260 	LDS  R26,_month
0003f9 30ad      	CPI  R26,LOW(0xD)
0003fa f01c      	BRLT _0xA0
                 ; 0000 0226         month = 1;
0003fb e0e1      	LDI  R30,LOW(1)
0003fc 93e0 0260 	STS  _month,R30
                 ; 0000 0227     }
                 _0xA0:
                 ; 0000 0228 
                 ; 0000 0229     if (PINA .0 == 0 & _chose == 1)
                 _0x9C:
0003fe 940e 07b6 	CALL SUBOPT_0x1B
000400 940e 075a 	CALL SUBOPT_0xF
000402 f071      	BREQ _0xA1
                 ; 0000 022A     { // DOWN    month
                 ; 0000 022B       while (PINA .0 == 0)
                 _0xA2:
000403 9bc8      	SBIS 0x19,0
                 ; 0000 022C         ;
000404 cffe      	RJMP _0xA2
                 ; 0000 022D       month--;
000405 91e0 0260 	LDS  R30,_month
000407 50e1      	SUBI R30,LOW(1)
000408 93e0 0260 	STS  _month,R30
                 ; 0000 022E       if (month < 1)
00040a 91a0 0260 	LDS  R26,_month
00040c 30a1      	CPI  R26,LOW(0x1)
00040d f41c      	BRGE _0xA5
                 ; 0000 022F         month = 12;
00040e e0ec      	LDI  R30,LOW(12)
00040f 93e0 0260 	STS  _month,R30
                 ; 0000 0230     }
                 _0xA5:
                 ; 0000 0231 
                 ; 0000 0232     if (PINA .1 == 0 & _chose == 0)
                 _0xA1:
000411 940e 07ad 	CALL SUBOPT_0x1A
000413 940e 0755 	CALL SUBOPT_0xE
000415 f069      	BREQ _0xA6
                 ; 0000 0233     { // UP    day
                 ; 0000 0234       while (PINA .1 == 0)
                 _0xA7:
000416 9bc9      	SBIS 0x19,1
                 ; 0000 0235         ;
000417 cffe      	RJMP _0xA7
                 ; 0000 0236       day++;
000418 94c3      	INC  R12
                 ; 0000 0237       i = day;
000419 2dec      	MOV  R30,R12
00041a e7ac      	LDI  R26,LOW(_i)
00041b e0b0      	LDI  R27,HIGH(_i)
00041c 940e 0859 	CALL __EEPROMWRB
                 ; 0000 0238       if (day > 31)
00041e e1ef      	LDI  R30,LOW(31)
00041f 15ec      	CP   R30,R12
000420 f414      	BRGE _0xAA
                 ; 0000 0239         day = 1;
000421 e0e1      	LDI  R30,LOW(1)
000422 2ece      	MOV  R12,R30
                 ; 0000 023A     }
                 _0xAA:
                 ; 0000 023B 
                 ; 0000 023C     if (PINA .0 == 0 & _chose == 0)
                 _0xA6:
000423 940e 07b6 	CALL SUBOPT_0x1B
000425 940e 0755 	CALL SUBOPT_0xE
000427 f069      	BREQ _0xAB
                 ; 0000 023D     { // DOWN    day
                 ; 0000 023E       while (PINA .0 == 0)
                 _0xAC:
000428 9bc8      	SBIS 0x19,0
                 ; 0000 023F         ;
000429 cffe      	RJMP _0xAC
                 ; 0000 0240       day--;
00042a 94ca      	DEC  R12
                 ; 0000 0241       i = day;
00042b 2dec      	MOV  R30,R12
00042c e7ac      	LDI  R26,LOW(_i)
00042d e0b0      	LDI  R27,HIGH(_i)
00042e 940e 0859 	CALL __EEPROMWRB
                 ; 0000 0242       if (day < 1)
000430 e0e1      	LDI  R30,LOW(1)
000431 16ce      	CP   R12,R30
000432 f414      	BRGE _0xAF
                 ; 0000 0243         day = 31;
000433 e1ef      	LDI  R30,LOW(31)
000434 2ece      	MOV  R12,R30
                 ; 0000 0244     }
                 _0xAF:
                 ; 0000 0245 
                 ; 0000 0246     if (PINA .0 == 0 & _chose == 2)
                 _0xAB:
000435 940e 07b6 	CALL SUBOPT_0x1B
000437 940e 075f 	CALL SUBOPT_0x10
000439 f099      	BREQ _0xB0
                 ; 0000 0247     { // DOWN    year
                 ; 0000 0248       while (PINA .0 == 0)
                 _0xB1:
00043a 9bc8      	SBIS 0x19,0
                 ; 0000 0249         ;
00043b cffe      	RJMP _0xB1
                 ; 0000 024A       year--;
00043c 940e 06ff 	CALL SUBOPT_0x2
00043e 9731      	SBIW R30,1
00043f 93fe      	ST   -X,R31
000440 93ee      	ST   -X,R30
                 ; 0000 024B       if (year < 1)
000441 91a0 0261 	LDS  R26,_year
000443 91b0 0262 	LDS  R27,_year+1
000445 9711      	SBIW R26,1
000446 f434      	BRGE _0xB4
                 ; 0000 024C         year = 1300;
000447 e1e4      	LDI  R30,LOW(1300)
000448 e0f5      	LDI  R31,HIGH(1300)
000449 93e0 0261 	STS  _year,R30
00044b 93f0 0262 	STS  _year+1,R31
                 ; 0000 024D     }
                 _0xB4:
                 ; 0000 024E 
                 ; 0000 024F     if (PINA .1 == 0 & _chose == 2)
                 _0xB0:
00044d 940e 07ad 	CALL SUBOPT_0x1A
00044f 940e 075f 	CALL SUBOPT_0x10
000451 f039      	BREQ _0xB5
                 ; 0000 0250     { // UP    year
                 ; 0000 0251       while (PINA .1 == 0)
                 _0xB6:
000452 9bc9      	SBIS 0x19,1
                 ; 0000 0252         ;
000453 cffe      	RJMP _0xB6
                 ; 0000 0253       year++;
000454 940e 06ff 	CALL SUBOPT_0x2
000456 9631      	ADIW R30,1
000457 93fe      	ST   -X,R31
000458 93ee      	ST   -X,R30
                 ; 0000 0254       // if(year>1404)
                 ; 0000 0255       // year=0;
                 ; 0000 0256     }
                 ; 0000 0257 
                 ; 0000 0258     if (PINA .3 == 0)
                 _0xB5:
000459 99cb      	SBIC 0x19,3
00045a c006      	RJMP _0xB9
                 ; 0000 0259     { // NEXT
                 ; 0000 025A       while (PINA .3 == 0)
                 _0xBA:
00045b 9bcb      	SBIS 0x19,3
                 ; 0000 025B         ;
00045c cffe      	RJMP _0xBA
                 ; 0000 025C       _chose++;
00045d 5f1f      	SUBI R17,-1
                 ; 0000 025D       if (_chose >= 3)
00045e 3013      	CPI  R17,3
00045f f008      	BRLO _0xBD
                 ; 0000 025E         _chose = 0;
000460 e010      	LDI  R17,LOW(0)
                 ; 0000 025F     }
                 _0xBD:
                 ; 0000 0260 
                 ; 0000 0261     if (PINA .4 == 0)
                 _0xB9:
000461 99cc      	SBIC 0x19,4
000462 c004      	RJMP _0xBE
                 ; 0000 0262     { // Back
                 ; 0000 0263       while (PINA .4 == 0)
                 _0xBF:
000463 9bcc      	SBIS 0x19,4
                 ; 0000 0264         ;
000464 cffe      	RJMP _0xBF
                 ; 0000 0265       return 0;
000465 e0e0      	LDI  R30,LOW(0)
000466 c003      	RJMP _0x2080004
                 ; 0000 0266     }
                 ; 0000 0267 
                 ; 0000 0268     delay_ms(25);
                 _0xBE:
000467 940e 0748 	CALL SUBOPT_0xC
                 ; 0000 0269   }
000469 cf5a      	RJMP _0x96
                 ; 0000 026A }
                 _0x2080004:
00046a 8118      	LDD  R17,Y+0
00046b 9662      	ADIW R28,18
00046c 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G100:
                 ; .FSTART _put_buff_G100
00046d 93ba      	ST   -Y,R27
00046e 93aa      	ST   -Y,R26
00046f 931a      	ST   -Y,R17
000470 930a      	ST   -Y,R16
000471 81aa      	LDD  R26,Y+2
000472 81bb      	LDD  R27,Y+2+1
000473 9612      	ADIW R26,2
000474 940e 0834 	CALL __GETW1P
000476 9730      	SBIW R30,0
000477 f159      	BREQ _0x2000010
000478 81aa      	LDD  R26,Y+2
000479 81bb      	LDD  R27,Y+2+1
00047a 9614      	ADIW R26,4
00047b 940e 0834 	CALL __GETW1P
00047d 018f      	MOVW R16,R30
00047e 9730      	SBIW R30,0
00047f f061      	BREQ _0x2000012
                +
000480 3002     +CPI R16 , LOW ( 2 )
000481 e0e0     +LDI R30 , HIGH ( 2 )
000482 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
000483 f098      	BRLO _0x2000013
000484 01f8      	MOVW R30,R16
000485 9731      	SBIW R30,1
000486 018f      	MOVW R16,R30
                +
000487 81aa     +LDD R26 , Y + 2
000488 81bb     +LDD R27 , Y + 2 + 1
000489 9614     +ADIW R26 , 4
00048a 93ed     +ST X + , R30
00048b 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2000012:
00048c 81aa      	LDD  R26,Y+2
00048d 81bb      	LDD  R27,Y+2+1
00048e 9612      	ADIW R26,2
00048f 91ed      	LD   R30,X+
000490 91fd      	LD   R31,X+
000491 9631      	ADIW R30,1
000492 93fe      	ST   -X,R31
000493 93ee      	ST   -X,R30
000494 9731      	SBIW R30,1
000495 81ac      	LDD  R26,Y+4
000496 83a0      	STD  Z+0,R26
                 _0x2000013:
000497 81aa      	LDD  R26,Y+2
000498 81bb      	LDD  R27,Y+2+1
000499 940e 0834 	CALL __GETW1P
00049b 23ff      	TST  R31
00049c f02a      	BRMI _0x2000014
00049d 91ed      	LD   R30,X+
00049e 91fd      	LD   R31,X+
00049f 9631      	ADIW R30,1
0004a0 93fe      	ST   -X,R31
0004a1 93ee      	ST   -X,R30
                 _0x2000014:
0004a2 c006      	RJMP _0x2000015
                 _0x2000010:
0004a3 81aa      	LDD  R26,Y+2
0004a4 81bb      	LDD  R27,Y+2+1
0004a5 efef      	LDI  R30,LOW(65535)
0004a6 efff      	LDI  R31,HIGH(65535)
0004a7 93ed      	ST   X+,R30
0004a8 93fc      	ST   X,R31
                 _0x2000015:
0004a9 8119      	LDD  R17,Y+1
0004aa 8108      	LDD  R16,Y+0
0004ab 9625      	ADIW R28,5
0004ac 9508      	RET
                 ; .FEND
                 __print_G100:
                 ; .FSTART __print_G100
0004ad 93ba      	ST   -Y,R27
0004ae 93aa      	ST   -Y,R26
0004af 9726      	SBIW R28,6
0004b0 940e 086a 	CALL __SAVELOCR6
0004b2 e010      	LDI  R17,0
0004b3 85ac      	LDD  R26,Y+12
0004b4 85bd      	LDD  R27,Y+12+1
0004b5 e0e0      	LDI  R30,LOW(0)
0004b6 e0f0      	LDI  R31,HIGH(0)
0004b7 93ed      	ST   X+,R30
0004b8 93fc      	ST   X,R31
                 _0x2000016:
0004b9 89ea      	LDD  R30,Y+18
0004ba 89fb      	LDD  R31,Y+18+1
0004bb 9631      	ADIW R30,1
0004bc 8bea      	STD  Y+18,R30
0004bd 8bfb      	STD  Y+18+1,R31
0004be 9731      	SBIW R30,1
0004bf 91e4      	LPM  R30,Z
0004c0 2f2e      	MOV  R18,R30
0004c1 30e0      	CPI  R30,0
0004c2 f409      	BRNE PC+2
0004c3 c115      	RJMP _0x2000018
0004c4 2fe1      	MOV  R30,R17
0004c5 30e0      	CPI  R30,0
0004c6 f439      	BRNE _0x200001C
0004c7 3225      	CPI  R18,37
0004c8 f411      	BRNE _0x200001D
0004c9 e011      	LDI  R17,LOW(1)
0004ca c002      	RJMP _0x200001E
                 _0x200001D:
0004cb 940e 07bf 	CALL SUBOPT_0x1C
                 _0x200001E:
0004cd c10a      	RJMP _0x200001B
                 _0x200001C:
0004ce 30e1      	CPI  R30,LOW(0x1)
0004cf f4a9      	BRNE _0x200001F
0004d0 3225      	CPI  R18,37
0004d1 f419      	BRNE _0x2000020
0004d2 940e 07bf 	CALL SUBOPT_0x1C
0004d4 c102      	RJMP _0x20000CC
                 _0x2000020:
0004d5 e012      	LDI  R17,LOW(2)
0004d6 e040      	LDI  R20,LOW(0)
0004d7 e000      	LDI  R16,LOW(0)
0004d8 322d      	CPI  R18,45
0004d9 f411      	BRNE _0x2000021
0004da e001      	LDI  R16,LOW(1)
0004db c0fc      	RJMP _0x200001B
                 _0x2000021:
0004dc 322b      	CPI  R18,43
0004dd f411      	BRNE _0x2000022
0004de e24b      	LDI  R20,LOW(43)
0004df c0f8      	RJMP _0x200001B
                 _0x2000022:
0004e0 3220      	CPI  R18,32
0004e1 f411      	BRNE _0x2000023
0004e2 e240      	LDI  R20,LOW(32)
0004e3 c0f4      	RJMP _0x200001B
                 _0x2000023:
0004e4 c002      	RJMP _0x2000024
                 _0x200001F:
0004e5 30e2      	CPI  R30,LOW(0x2)
0004e6 f439      	BRNE _0x2000025
                 _0x2000024:
0004e7 e050      	LDI  R21,LOW(0)
0004e8 e013      	LDI  R17,LOW(3)
0004e9 3320      	CPI  R18,48
0004ea f411      	BRNE _0x2000026
0004eb 6800      	ORI  R16,LOW(128)
0004ec c0eb      	RJMP _0x200001B
                 _0x2000026:
0004ed c003      	RJMP _0x2000027
                 _0x2000025:
0004ee 30e3      	CPI  R30,LOW(0x3)
0004ef f009      	BREQ PC+2
0004f0 c0e7      	RJMP _0x200001B
                 _0x2000027:
0004f1 3320      	CPI  R18,48
0004f2 f010      	BRLO _0x200002A
0004f3 332a      	CPI  R18,58
0004f4 f008      	BRLO _0x200002B
                 _0x200002A:
0004f5 c007      	RJMP _0x2000029
                 _0x200002B:
0004f6 e0aa      	LDI  R26,LOW(10)
0004f7 9f5a      	MUL  R21,R26
0004f8 2d50      	MOV  R21,R0
0004f9 2fe2      	MOV  R30,R18
0004fa 53e0      	SUBI R30,LOW(48)
0004fb 0f5e      	ADD  R21,R30
0004fc c0db      	RJMP _0x200001B
                 _0x2000029:
0004fd 2fe2      	MOV  R30,R18
0004fe 36e3      	CPI  R30,LOW(0x63)
0004ff f449      	BRNE _0x200002F
000500 940e 07c6 	CALL SUBOPT_0x1D
000502 89e8      	LDD  R30,Y+16
000503 89f9      	LDD  R31,Y+16+1
000504 81a4      	LDD  R26,Z+4
000505 93aa      	ST   -Y,R26
000506 940e 07cc 	CALL SUBOPT_0x1E
000508 c0ce      	RJMP _0x2000030
                 _0x200002F:
000509 37e3      	CPI  R30,LOW(0x73)
00050a f441      	BRNE _0x2000032
00050b 940e 07c6 	CALL SUBOPT_0x1D
00050d 940e 07d2 	CALL SUBOPT_0x1F
00050f 940e 06d7 	CALL _strlen
000511 2f1e      	MOV  R17,R30
000512 c00a      	RJMP _0x2000033
                 _0x2000032:
000513 37e0      	CPI  R30,LOW(0x70)
000514 f461      	BRNE _0x2000035
000515 940e 07c6 	CALL SUBOPT_0x1D
000517 940e 07d2 	CALL SUBOPT_0x1F
000519 940e 06e3 	CALL _strlenf
00051b 2f1e      	MOV  R17,R30
00051c 6008      	ORI  R16,LOW(8)
                 _0x2000033:
00051d 6002      	ORI  R16,LOW(2)
00051e 770f      	ANDI R16,LOW(127)
00051f e030      	LDI  R19,LOW(0)
000520 c034      	RJMP _0x2000036
                 _0x2000035:
000521 36e4      	CPI  R30,LOW(0x64)
000522 f011      	BREQ _0x2000039
000523 36e9      	CPI  R30,LOW(0x69)
000524 f411      	BRNE _0x200003A
                 _0x2000039:
000525 6004      	ORI  R16,LOW(4)
000526 c002      	RJMP _0x200003B
                 _0x200003A:
000527 37e5      	CPI  R30,LOW(0x75)
000528 f431      	BRNE _0x200003C
                 _0x200003B:
000529 e5e4      	LDI  R30,LOW(_tbl10_G100*2)
00052a e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
00052b 83ee      	STD  Y+6,R30
00052c 83ff      	STD  Y+6+1,R31
00052d e015      	LDI  R17,LOW(5)
00052e c00c      	RJMP _0x200003D
                 _0x200003C:
00052f 35e8      	CPI  R30,LOW(0x58)
000530 f411      	BRNE _0x200003F
000531 6008      	ORI  R16,LOW(8)
000532 c003      	RJMP _0x2000040
                 _0x200003F:
000533 37e8      	CPI  R30,LOW(0x78)
000534 f009      	BREQ PC+2
000535 c0a1      	RJMP _0x2000071
                 _0x2000040:
000536 e5ee      	LDI  R30,LOW(_tbl16_G100*2)
000537 e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
000538 83ee      	STD  Y+6,R30
000539 83ff      	STD  Y+6+1,R31
00053a e014      	LDI  R17,LOW(4)
                 _0x200003D:
00053b ff02      	SBRS R16,2
00053c c014      	RJMP _0x2000042
00053d 940e 07c6 	CALL SUBOPT_0x1D
00053f 940e 07dc 	CALL SUBOPT_0x20
000541 85ab      	LDD  R26,Y+11
000542 23aa      	TST  R26
000543 f43a      	BRPL _0x2000043
000544 85ea      	LDD  R30,Y+10
000545 85fb      	LDD  R31,Y+10+1
000546 940e 0807 	CALL __ANEGW1
000548 87ea      	STD  Y+10,R30
000549 87fb      	STD  Y+10+1,R31
00054a e24d      	LDI  R20,LOW(45)
                 _0x2000043:
00054b 3040      	CPI  R20,0
00054c f011      	BREQ _0x2000044
00054d 5f1f      	SUBI R17,-LOW(1)
00054e c001      	RJMP _0x2000045
                 _0x2000044:
00054f 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
000550 c004      	RJMP _0x2000046
                 _0x2000042:
000551 940e 07c6 	CALL SUBOPT_0x1D
000553 940e 07dc 	CALL SUBOPT_0x20
                 _0x2000046:
                 _0x2000036:
000555 fd00      	SBRC R16,0
000556 c011      	RJMP _0x2000047
                 _0x2000048:
000557 1715      	CP   R17,R21
000558 f478      	BRSH _0x200004A
000559 ff07      	SBRS R16,7
00055a c008      	RJMP _0x200004B
00055b ff02      	SBRS R16,2
00055c c004      	RJMP _0x200004C
00055d 7f0b      	ANDI R16,LOW(251)
00055e 2f24      	MOV  R18,R20
00055f 5011      	SUBI R17,LOW(1)
000560 c001      	RJMP _0x200004D
                 _0x200004C:
000561 e320      	LDI  R18,LOW(48)
                 _0x200004D:
000562 c001      	RJMP _0x200004E
                 _0x200004B:
000563 e220      	LDI  R18,LOW(32)
                 _0x200004E:
000564 940e 07bf 	CALL SUBOPT_0x1C
000566 5051      	SUBI R21,LOW(1)
000567 cfef      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
000568 2f31      	MOV  R19,R17
000569 ff01      	SBRS R16,1
00056a c017      	RJMP _0x200004F
                 _0x2000050:
00056b 3030      	CPI  R19,0
00056c f0a1      	BREQ _0x2000052
00056d ff03      	SBRS R16,3
00056e c006      	RJMP _0x2000053
00056f 81ee      	LDD  R30,Y+6
000570 81ff      	LDD  R31,Y+6+1
000571 9125      	LPM  R18,Z+
000572 83ee      	STD  Y+6,R30
000573 83ff      	STD  Y+6+1,R31
000574 c005      	RJMP _0x2000054
                 _0x2000053:
000575 81ae      	LDD  R26,Y+6
000576 81bf      	LDD  R27,Y+6+1
000577 912d      	LD   R18,X+
000578 83ae      	STD  Y+6,R26
000579 83bf      	STD  Y+6+1,R27
                 _0x2000054:
00057a 940e 07bf 	CALL SUBOPT_0x1C
00057c 3050      	CPI  R21,0
00057d f009      	BREQ _0x2000055
00057e 5051      	SUBI R21,LOW(1)
                 _0x2000055:
00057f 5031      	SUBI R19,LOW(1)
000580 cfea      	RJMP _0x2000050
                 _0x2000052:
000581 c04b      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
000582 e320      	LDI  R18,LOW(48)
000583 81ee      	LDD  R30,Y+6
000584 81ff      	LDD  R31,Y+6+1
000585 940e 0838 	CALL __GETW1PF
000587 87e8      	STD  Y+8,R30
000588 87f9      	STD  Y+8+1,R31
000589 81ee      	LDD  R30,Y+6
00058a 81ff      	LDD  R31,Y+6+1
00058b 9632      	ADIW R30,2
00058c 83ee      	STD  Y+6,R30
00058d 83ff      	STD  Y+6+1,R31
                 _0x200005A:
00058e 85e8      	LDD  R30,Y+8
00058f 85f9      	LDD  R31,Y+8+1
000590 85aa      	LDD  R26,Y+10
000591 85bb      	LDD  R27,Y+10+1
000592 17ae      	CP   R26,R30
000593 07bf      	CPC  R27,R31
000594 f050      	BRLO _0x200005C
000595 5f2f      	SUBI R18,-LOW(1)
000596 85a8      	LDD  R26,Y+8
000597 85b9      	LDD  R27,Y+8+1
000598 85ea      	LDD  R30,Y+10
000599 85fb      	LDD  R31,Y+10+1
00059a 1bea      	SUB  R30,R26
00059b 0bfb      	SBC  R31,R27
00059c 87ea      	STD  Y+10,R30
00059d 87fb      	STD  Y+10+1,R31
00059e cfef      	RJMP _0x200005A
                 _0x200005C:
00059f 332a      	CPI  R18,58
0005a0 f028      	BRLO _0x200005D
0005a1 ff03      	SBRS R16,3
0005a2 c002      	RJMP _0x200005E
0005a3 5f29      	SUBI R18,-LOW(7)
0005a4 c001      	RJMP _0x200005F
                 _0x200005E:
0005a5 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
0005a6 fd04      	SBRC R16,4
0005a7 c01a      	RJMP _0x2000061
0005a8 3321      	CPI  R18,49
0005a9 f420      	BRSH _0x2000063
0005aa 85a8      	LDD  R26,Y+8
0005ab 85b9      	LDD  R27,Y+8+1
0005ac 9711      	SBIW R26,1
0005ad f409      	BRNE _0x2000062
                 _0x2000063:
0005ae c009      	RJMP _0x20000CD
                 _0x2000062:
0005af 1753      	CP   R21,R19
0005b0 f010      	BRLO _0x2000067
0005b1 ff00      	SBRS R16,0
0005b2 c001      	RJMP _0x2000068
                 _0x2000067:
0005b3 c013      	RJMP _0x2000066
                 _0x2000068:
0005b4 e220      	LDI  R18,LOW(32)
0005b5 ff07      	SBRS R16,7
0005b6 c00b      	RJMP _0x2000069
0005b7 e320      	LDI  R18,LOW(48)
                 _0x20000CD:
0005b8 6100      	ORI  R16,LOW(16)
0005b9 ff02      	SBRS R16,2
0005ba c007      	RJMP _0x200006A
0005bb 7f0b      	ANDI R16,LOW(251)
0005bc 934a      	ST   -Y,R20
0005bd 940e 07cc 	CALL SUBOPT_0x1E
0005bf 3050      	CPI  R21,0
0005c0 f009      	BREQ _0x200006B
0005c1 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
0005c2 940e 07bf 	CALL SUBOPT_0x1C
0005c4 3050      	CPI  R21,0
0005c5 f009      	BREQ _0x200006C
0005c6 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
0005c7 5031      	SUBI R19,LOW(1)
0005c8 85a8      	LDD  R26,Y+8
0005c9 85b9      	LDD  R27,Y+8+1
0005ca 9712      	SBIW R26,2
0005cb f008      	BRLO _0x2000059
0005cc cfb5      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
0005cd ff00      	SBRS R16,0
0005ce c008      	RJMP _0x200006D
                 _0x200006E:
0005cf 3050      	CPI  R21,0
0005d0 f031      	BREQ _0x2000070
0005d1 5051      	SUBI R21,LOW(1)
0005d2 e2e0      	LDI  R30,LOW(32)
0005d3 93ea      	ST   -Y,R30
0005d4 940e 07cc 	CALL SUBOPT_0x1E
0005d6 cff8      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000CC:
0005d7 e010      	LDI  R17,LOW(0)
                 _0x200001B:
0005d8 cee0      	RJMP _0x2000016
                 _0x2000018:
0005d9 85ac      	LDD  R26,Y+12
0005da 85bd      	LDD  R27,Y+12+1
0005db 940e 0834 	CALL __GETW1P
0005dd 940e 0871 	CALL __LOADLOCR6
0005df 9664      	ADIW R28,20
0005e0 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
0005e1 92ff      	PUSH R15
0005e2 2ef8      	MOV  R15,R24
0005e3 9726      	SBIW R28,6
0005e4 940e 086c 	CALL __SAVELOCR4
0005e6 940e 07e4 	CALL SUBOPT_0x21
0005e8 9730      	SBIW R30,0
0005e9 f419      	BRNE _0x2000072
0005ea efef      	LDI  R30,LOW(65535)
0005eb efff      	LDI  R31,HIGH(65535)
0005ec c023      	RJMP _0x2080003
                 _0x2000072:
0005ed 01de      	MOVW R26,R28
0005ee 9616      	ADIW R26,6
0005ef 940e 0803 	CALL __ADDW2R15
0005f1 018d      	MOVW R16,R26
0005f2 940e 07e4 	CALL SUBOPT_0x21
0005f4 83ee      	STD  Y+6,R30
0005f5 83ff      	STD  Y+6+1,R31
0005f6 e0e0      	LDI  R30,LOW(0)
0005f7 87e8      	STD  Y+8,R30
0005f8 87e9      	STD  Y+8+1,R30
0005f9 01de      	MOVW R26,R28
0005fa 961a      	ADIW R26,10
0005fb 940e 0803 	CALL __ADDW2R15
0005fd 940e 0834 	CALL __GETW1P
0005ff 93fa      	ST   -Y,R31
000600 93ea      	ST   -Y,R30
000601 931a      	ST   -Y,R17
000602 930a      	ST   -Y,R16
000603 e6ed      	LDI  R30,LOW(_put_buff_G100)
000604 e0f4      	LDI  R31,HIGH(_put_buff_G100)
000605 93fa      	ST   -Y,R31
000606 93ea      	ST   -Y,R30
000607 01de      	MOVW R26,R28
000608 961a      	ADIW R26,10
000609 dea3      	RCALL __print_G100
00060a 019f      	MOVW R18,R30
00060b 81ae      	LDD  R26,Y+6
00060c 81bf      	LDD  R27,Y+6+1
00060d e0e0      	LDI  R30,LOW(0)
00060e 93ec      	ST   X,R30
00060f 01f9      	MOVW R30,R18
                 _0x2080003:
000610 940e 0873 	CALL __LOADLOCR4
000612 962a      	ADIW R28,10
000613 90ff      	POP  R15
000614 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G101:
                 ; .FSTART __lcd_write_nibble_G101
000615 93aa      	ST   -Y,R26
000616 81e8      	LD   R30,Y
000617 71e0      	ANDI R30,LOW(0x10)
000618 f011      	BREQ _0x2020004
000619 9ac3      	SBI  0x18,3
00061a c001      	RJMP _0x2020005
                 _0x2020004:
00061b 98c3      	CBI  0x18,3
                 _0x2020005:
00061c 81e8      	LD   R30,Y
00061d 72e0      	ANDI R30,LOW(0x20)
00061e f011      	BREQ _0x2020006
00061f 9ac4      	SBI  0x18,4
000620 c001      	RJMP _0x2020007
                 _0x2020006:
000621 98c4      	CBI  0x18,4
                 _0x2020007:
000622 81e8      	LD   R30,Y
000623 74e0      	ANDI R30,LOW(0x40)
000624 f011      	BREQ _0x2020008
000625 9ac5      	SBI  0x18,5
000626 c001      	RJMP _0x2020009
                 _0x2020008:
000627 98c5      	CBI  0x18,5
                 _0x2020009:
000628 81e8      	LD   R30,Y
000629 78e0      	ANDI R30,LOW(0x80)
00062a f011      	BREQ _0x202000A
00062b 9ac6      	SBI  0x18,6
00062c c001      	RJMP _0x202000B
                 _0x202000A:
00062d 98c6      	CBI  0x18,6
                 _0x202000B:
                +
00062e e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00062f 958a     +DEC R24
000630 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000631 9ac2      	SBI  0x18,2
                +
000632 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000633 958a     +DEC R24
000634 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000635 98c2      	CBI  0x18,2
                +
000636 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000637 958a     +DEC R24
000638 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000639 c09b      	RJMP _0x2080001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
00063a 93aa      	ST   -Y,R26
00063b 81a8      	LD   R26,Y
00063c dfd8      	RCALL __lcd_write_nibble_G101
00063d 81e8          ld    r30,y
00063e 95e2          swap  r30
00063f 83e8          st    y,r30
000640 81a8      	LD   R26,Y
000641 dfd3      	RCALL __lcd_write_nibble_G101
                +
000642 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
000643 958a     +DEC R24
000644 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
000645 c08f      	RJMP _0x2080001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000646 93aa      	ST   -Y,R26
000647 81e8      	LD   R30,Y
000648 e0f0      	LDI  R31,0
000649 59ed      	SUBI R30,LOW(-__base_y_G101)
00064a 4ffd      	SBCI R31,HIGH(-__base_y_G101)
00064b 81e0      	LD   R30,Z
00064c 81a9      	LDD  R26,Y+1
00064d 0fae      	ADD  R26,R30
00064e dfeb      	RCALL __lcd_write_data
00064f 81e9      	LDD  R30,Y+1
000650 93e0 0267 	STS  __lcd_x,R30
000652 81e8      	LD   R30,Y
000653 93e0 0268 	STS  __lcd_y,R30
000655 9622      	ADIW R28,2
000656 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000657 e0a2      	LDI  R26,LOW(2)
000658 940e 07eb 	CALL SUBOPT_0x22
00065a e0ac      	LDI  R26,LOW(12)
00065b dfde      	RCALL __lcd_write_data
00065c e0a1      	LDI  R26,LOW(1)
00065d 940e 07eb 	CALL SUBOPT_0x22
00065f e0e0      	LDI  R30,LOW(0)
000660 93e0 0268 	STS  __lcd_y,R30
000662 93e0 0267 	STS  __lcd_x,R30
000664 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000665 93aa      	ST   -Y,R26
000666 81a8      	LD   R26,Y
000667 30aa      	CPI  R26,LOW(0xA)
000668 f031      	BREQ _0x2020011
000669 91e0 0269 	LDS  R30,__lcd_maxx
00066b 91a0 0267 	LDS  R26,__lcd_x
00066d 17ae      	CP   R26,R30
00066e f060      	BRLO _0x2020010
                 _0x2020011:
00066f e0e0      	LDI  R30,LOW(0)
000670 93ea      	ST   -Y,R30
000671 91a0 0268 	LDS  R26,__lcd_y
000673 5faf      	SUBI R26,-LOW(1)
000674 93a0 0268 	STS  __lcd_y,R26
000676 dfcf      	RCALL _lcd_gotoxy
000677 81a8      	LD   R26,Y
000678 30aa      	CPI  R26,LOW(0xA)
000679 f409      	BRNE _0x2020013
00067a c05a      	RJMP _0x2080001
                 _0x2020013:
                 _0x2020010:
00067b 91e0 0267 	LDS  R30,__lcd_x
00067d 5fef      	SUBI R30,-LOW(1)
00067e 93e0 0267 	STS  __lcd_x,R30
000680 9ac0      	SBI  0x18,0
000681 81a8      	LD   R26,Y
000682 dfb7      	RCALL __lcd_write_data
000683 98c0      	CBI  0x18,0
000684 c050      	RJMP _0x2080001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000685 93ba      	ST   -Y,R27
000686 93aa      	ST   -Y,R26
000687 931a      	ST   -Y,R17
                 _0x2020014:
000688 81a9      	LDD  R26,Y+1
000689 81ba      	LDD  R27,Y+1+1
00068a 91ed      	LD   R30,X+
00068b 83a9      	STD  Y+1,R26
00068c 83ba      	STD  Y+1+1,R27
00068d 2f1e      	MOV  R17,R30
00068e 30e0      	CPI  R30,0
00068f f019      	BREQ _0x2020016
000690 2fa1      	MOV  R26,R17
000691 dfd3      	RCALL _lcd_putchar
000692 cff5      	RJMP _0x2020014
                 _0x2020016:
000693 c010      	RJMP _0x2080002
                 ; .FEND
                 _lcd_putsf:
                 ; .FSTART _lcd_putsf
000694 93ba      	ST   -Y,R27
000695 93aa      	ST   -Y,R26
000696 931a      	ST   -Y,R17
                 _0x2020017:
000697 81e9      	LDD  R30,Y+1
000698 81fa      	LDD  R31,Y+1+1
000699 9631      	ADIW R30,1
00069a 83e9      	STD  Y+1,R30
00069b 83fa      	STD  Y+1+1,R31
00069c 9731      	SBIW R30,1
00069d 91e4      	LPM  R30,Z
00069e 2f1e      	MOV  R17,R30
00069f 30e0      	CPI  R30,0
0006a0 f019      	BREQ _0x2020019
0006a1 2fa1      	MOV  R26,R17
0006a2 dfc2      	RCALL _lcd_putchar
0006a3 cff3      	RJMP _0x2020017
                 _0x2020019:
                 _0x2080002:
0006a4 8118      	LDD  R17,Y+0
0006a5 9623      	ADIW R28,3
0006a6 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
0006a7 93aa      	ST   -Y,R26
0006a8 9abb      	SBI  0x17,3
0006a9 9abc      	SBI  0x17,4
0006aa 9abd      	SBI  0x17,5
0006ab 9abe      	SBI  0x17,6
0006ac 9aba      	SBI  0x17,2
0006ad 9ab8      	SBI  0x17,0
0006ae 9ab9      	SBI  0x17,1
0006af 98c2      	CBI  0x18,2
0006b0 98c0      	CBI  0x18,0
0006b1 98c1      	CBI  0x18,1
0006b2 81e8      	LD   R30,Y
0006b3 93e0 0269 	STS  __lcd_maxx,R30
0006b5 58e0      	SUBI R30,-LOW(128)
                +
0006b6 93e0 0265+STS __base_y_G101 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G101,2
0006b8 81e8      	LD   R30,Y
0006b9 54e0      	SUBI R30,-LOW(192)
                +
0006ba 93e0 0266+STS __base_y_G101 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G101,3
0006bc e1a4      	LDI  R26,LOW(20)
0006bd e0b0      	LDI  R27,0
0006be 940e 07f9 	CALL _delay_ms
0006c0 940e 07f1 	CALL SUBOPT_0x23
0006c2 940e 07f1 	CALL SUBOPT_0x23
0006c4 940e 07f1 	CALL SUBOPT_0x23
0006c6 e2a0      	LDI  R26,LOW(32)
0006c7 df4d      	RCALL __lcd_write_nibble_G101
                +
0006c8 ec88     +LDI R24 , LOW ( 200 )
0006c9 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0006ca 9701     +SBIW R24 , 1
0006cb f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0006cc e2a8      	LDI  R26,LOW(40)
0006cd df6c      	RCALL __lcd_write_data
0006ce e0a4      	LDI  R26,LOW(4)
0006cf df6a      	RCALL __lcd_write_data
0006d0 e8a5      	LDI  R26,LOW(133)
0006d1 df68      	RCALL __lcd_write_data
0006d2 e0a6      	LDI  R26,LOW(6)
0006d3 df66      	RCALL __lcd_write_data
0006d4 df82      	RCALL _lcd_clear
                 _0x2080001:
0006d5 9621      	ADIW R28,1
0006d6 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
0006d7 93ba      	ST   -Y,R27
0006d8 93aa      	ST   -Y,R26
0006d9 91a9          ld   r26,y+
0006da 91b9          ld   r27,y+
0006db 27ee          clr  r30
0006dc 27ff          clr  r31
                 strlen0:
0006dd 916d          ld   r22,x+
0006de 2366          tst  r22
0006df f011          breq strlen1
0006e0 9631          adiw r30,1
0006e1 cffb          rjmp strlen0
                 strlen1:
0006e2 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
0006e3 93ba      	ST   -Y,R27
0006e4 93aa      	ST   -Y,R26
0006e5 27aa          clr  r26
0006e6 27bb          clr  r27
0006e7 91e9          ld   r30,y+
0006e8 91f9          ld   r31,y+
                 strlenf0:
0006e9 9005      	lpm  r0,z+
0006ea 2000          tst  r0
0006eb f011          breq strlenf1
0006ec 9611          adiw r26,1
0006ed cffb          rjmp strlenf0
                 strlenf1:
0006ee 01fd          movw r30,r26
0006ef 9508          ret
                 ; .FEND
                 
                 	.ESEG
                 _vurud_stat:
000000           	.BYTE 0x3E
                 _khuruj_stat:
00003e           	.BYTE 0x3E
                 _i:
00007c           	.BYTE 0x1
                 
                 	.DSEG
                 _month:
000260           	.BYTE 0x1
                 _year:
000261           	.BYTE 0x2
                 __base_y_G101:
000263           	.BYTE 0x4
                 __lcd_x:
000267           	.BYTE 0x1
                 __lcd_y:
000268           	.BYTE 0x1
                 __lcd_maxx:
000269           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
0006f0 940e 0820 	CALL __GTB12
0006f2 2e0e      	MOV  R0,R30
0006f3 91a0 0260 	LDS  R26,_month
0006f5 e0e6      	LDI  R30,LOW(6)
0006f6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x1:
0006f7 e0e1      	LDI  R30,LOW(1)
0006f8 2ece      	MOV  R12,R30
0006f9 91e0 0260 	LDS  R30,_month
0006fb 5fef      	SUBI R30,-LOW(1)
0006fc 93e0 0260 	STS  _month,R30
0006fe 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
0006ff e6a1      	LDI  R26,LOW(_year)
000700 e0b2      	LDI  R27,HIGH(_year)
000701 91ed      	LD   R30,X+
000702 91fd      	LD   R31,X+
000703 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
000704 93aa      	ST   -Y,R26
000705 93ba      	ST   -Y,R27
000706 93ea      	ST   -Y,R30
000707 93fa      	ST   -Y,R31
000708 b7ef      	IN   R30,SREG
000709 93ea      	ST   -Y,R30
00070a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x4:
00070b 2da5      	MOV  R26,R5
00070c e0b0      	LDI  R27,0
00070d fda7      	SBRC R26,7
00070e efbf      	SER  R27
00070f 2de4      	MOV  R30,R4
000710 e0f0      	LDI  R31,0
000711 fde7      	SBRC R30,7
000712 efff      	SER  R31
000713 0fae      	ADD  R26,R30
000714 1fbf      	ADC  R27,R31
000715 36a4      	CPI  R26,LOW(0x64)
000716 e0e0      	LDI  R30,HIGH(0x64)
000717 07be      	CPC  R27,R30
000718 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x5:
000719 e0e0      	LDI  R30,LOW(0)
00071a 93ea      	ST   -Y,R30
00071b e0a1      	LDI  R26,LOW(1)
00071c 940c 0646 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x6:
00071e e7ac      	LDI  R26,LOW(_i)
00071f e0b0      	LDI  R27,HIGH(_i)
000720 940e 0845 	CALL __EEPROMRDB
000722 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x7:
000723 2daa      	MOV  R26,R10
000724 e0e0      	LDI  R30,LOW(0)
000725 940e 0816 	CALL __EQB12
000727 2e0e      	MOV  R0,R30
000728 2dab      	MOV  R26,R11
000729 e0e0      	LDI  R30,LOW(0)
00072a 940e 0816 	CALL __EQB12
00072c 220e      	AND  R0,R30
00072d 2dad      	MOV  R26,R13
00072e e0e0      	LDI  R30,LOW(0)
00072f 940e 0816 	CALL __EQB12
000731 21e0      	AND  R30,R0
000732 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 12 TIMES, CODE SIZE REDUCTION:30 WORDS
                 SUBOPT_0x8:
000733 940e 080b 	CALL __CBD1
000735 940e 083c 	CALL __PUTPARD1
000737 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x9:
000738 91e0 0261 	LDS  R30,_year
00073a 91f0 0262 	LDS  R31,_year+1
00073c 940e 0811 	CALL __CWD1
00073e 940e 083c 	CALL __PUTPARD1
000740 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xA:
000741 01fe      	MOVW R30,R28
000742 93fa      	ST   -Y,R31
000743 93ea      	ST   -Y,R30
000744 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xB:
000745 01de      	MOVW R26,R28
000746 940c 0685 	JMP  _lcd_puts
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0xC:
000748 e1a9      	LDI  R26,LOW(25)
000749 e0b0      	LDI  R27,0
00074a 940c 07f9 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0xD:
00074c e0a0      	LDI  R26,0
00074d 99ca      	SBIC 0x19,2
00074e e0a1      	LDI  R26,1
00074f e0e0      	LDI  R30,LOW(0)
000750 940e 0816 	CALL __EQB12
000752 2e0e      	MOV  R0,R30
000753 2fa1      	MOV  R26,R17
000754 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0xE:
000755 e0e0      	LDI  R30,LOW(0)
000756 940e 0816 	CALL __EQB12
000758 21e0      	AND  R30,R0
000759 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0xF:
00075a e0e1      	LDI  R30,LOW(1)
00075b 940e 0816 	CALL __EQB12
00075d 21e0      	AND  R30,R0
00075e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x10:
00075f e0e2      	LDI  R30,LOW(2)
000760 940e 0816 	CALL __EQB12
000762 21e0      	AND  R30,R0
000763 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x11:
000764 e084      	LDI  R24,4
000765 940e 05e1 	CALL _sprintf
000767 9628      	ADIW R28,8
000768 940e 0657 	CALL _lcd_clear
00076a cfda      	RJMP SUBOPT_0xB
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x12:
00076b e0a0      	LDI  R26,0
00076c 99c9      	SBIC 0x19,1
00076d e0a1      	LDI  R26,1
00076e e0e0      	LDI  R30,LOW(0)
00076f 940e 0816 	CALL __EQB12
000771 2e0e      	MOV  R0,R30
000772 e0a0      	LDI  R26,0
000773 fcf0      	SBRC R15,0
000774 e0a1      	LDI  R26,1
000775 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x13:
000776 e0a0      	LDI  R26,0
000777 99c8      	SBIC 0x19,0
000778 e0a1      	LDI  R26,1
000779 e0e0      	LDI  R30,LOW(0)
00077a 940e 0816 	CALL __EQB12
00077c 2e0e      	MOV  R0,R30
00077d e0a0      	LDI  R26,0
00077e fcf0      	SBRC R15,0
00077f e0a1      	LDI  R26,1
000780 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x14:
000781 2e0e      	MOV  R0,R30
000782 e0a0      	LDI  R26,0
000783 fcf0      	SBRC R15,0
000784 e0a1      	LDI  R26,1
000785 cfcf      	RJMP SUBOPT_0xE
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x15:
000786 940e 082f 	CALL __GTB12U
000788 220e      	AND  R0,R30
000789 e0a0      	LDI  R26,0
00078a fcf0      	SBRC R15,0
00078b e0a1      	LDI  R26,1
00078c cfcd      	RJMP SUBOPT_0xF
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x16:
00078d e001      	LDI  R16,LOW(1)
00078e 5f1f      	SUBI R17,-1
00078f 94e8      	CLT
000790 f8f0      	BLD  R15,0
000791 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x17:
000792 e0f0      	LDI  R31,0
000793 0fee      	LSL  R30
000794 1fff      	ROL  R31
000795 0fae      	ADD  R26,R30
000796 1fbf      	ADC  R27,R31
000797 940e 0841 	CALL __EEPROMRDW
000799 2766      	CLR  R22
00079a 2777      	CLR  R23
00079b 940e 083c 	CALL __PUTPARD1
00079d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x18:
00079e 01fe      	MOVW R30,R28
00079f 9631      	ADIW R30,1
0007a0 93fa      	ST   -Y,R31
0007a1 93ea      	ST   -Y,R30
0007a2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x19:
0007a3 e084      	LDI  R24,4
0007a4 940e 05e1 	CALL _sprintf
0007a6 9628      	ADIW R28,8
0007a7 940e 0657 	CALL _lcd_clear
0007a9 01de      	MOVW R26,R28
0007aa 9611      	ADIW R26,1
0007ab 940c 0685 	JMP  _lcd_puts
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x1A:
0007ad e0a0      	LDI  R26,0
0007ae 99c9      	SBIC 0x19,1
0007af e0a1      	LDI  R26,1
0007b0 e0e0      	LDI  R30,LOW(0)
0007b1 940e 0816 	CALL __EQB12
0007b3 2e0e      	MOV  R0,R30
0007b4 2fa1      	MOV  R26,R17
0007b5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x1B:
0007b6 e0a0      	LDI  R26,0
0007b7 99c8      	SBIC 0x19,0
0007b8 e0a1      	LDI  R26,1
0007b9 e0e0      	LDI  R30,LOW(0)
0007ba 940e 0816 	CALL __EQB12
0007bc 2e0e      	MOV  R0,R30
0007bd 2fa1      	MOV  R26,R17
0007be 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x1C:
0007bf 932a      	ST   -Y,R18
0007c0 85ad      	LDD  R26,Y+13
0007c1 85be      	LDD  R27,Y+13+1
0007c2 85ef      	LDD  R30,Y+15
0007c3 89f8      	LDD  R31,Y+15+1
0007c4 9509      	ICALL
0007c5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x1D:
0007c6 89e8      	LDD  R30,Y+16
0007c7 89f9      	LDD  R31,Y+16+1
0007c8 9734      	SBIW R30,4
0007c9 8be8      	STD  Y+16,R30
0007ca 8bf9      	STD  Y+16+1,R31
0007cb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1E:
0007cc 85ad      	LDD  R26,Y+13
0007cd 85be      	LDD  R27,Y+13+1
0007ce 85ef      	LDD  R30,Y+15
0007cf 89f8      	LDD  R31,Y+15+1
0007d0 9509      	ICALL
0007d1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x1F:
0007d2 89a8      	LDD  R26,Y+16
0007d3 89b9      	LDD  R27,Y+16+1
0007d4 9614      	ADIW R26,4
0007d5 940e 0834 	CALL __GETW1P
0007d7 83ee      	STD  Y+6,R30
0007d8 83ff      	STD  Y+6+1,R31
0007d9 81ae      	LDD  R26,Y+6
0007da 81bf      	LDD  R27,Y+6+1
0007db 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x20:
0007dc 89a8      	LDD  R26,Y+16
0007dd 89b9      	LDD  R27,Y+16+1
0007de 9614      	ADIW R26,4
0007df 940e 0834 	CALL __GETW1P
0007e1 87ea      	STD  Y+10,R30
0007e2 87fb      	STD  Y+10+1,R31
0007e3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x21:
0007e4 01de      	MOVW R26,R28
0007e5 961c      	ADIW R26,12
0007e6 940e 0803 	CALL __ADDW2R15
0007e8 940e 0834 	CALL __GETW1P
0007ea 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x22:
0007eb 940e 063a 	CALL __lcd_write_data
0007ed e0a3      	LDI  R26,LOW(3)
0007ee e0b0      	LDI  R27,0
0007ef 940c 07f9 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x23:
0007f1 e3a0      	LDI  R26,LOW(48)
0007f2 940e 0615 	CALL __lcd_write_nibble_G101
                +
0007f4 ec88     +LDI R24 , LOW ( 200 )
0007f5 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0007f6 9701     +SBIW R24 , 1
0007f7 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0007f8 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0007f9 9610      	adiw r26,0
0007fa f039      	breq __delay_ms1
                 __delay_ms0:
0007fb 95a8      	wdr
                +
0007fc ed80     +LDI R24 , LOW ( 0x7D0 )
0007fd e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0007fe 9701     +SBIW R24 , 1
0007ff f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000800 9711      	sbiw r26,1
000801 f7c9      	brne __delay_ms0
                 __delay_ms1:
000802 9508      	ret
                 
                 __ADDW2R15:
000803 2400      	CLR  R0
000804 0daf      	ADD  R26,R15
000805 1db0      	ADC  R27,R0
000806 9508      	RET
                 
                 __ANEGW1:
000807 95f1      	NEG  R31
000808 95e1      	NEG  R30
000809 40f0      	SBCI R31,0
00080a 9508      	RET
                 
                 __CBD1:
00080b 2ffe      	MOV  R31,R30
00080c 0fff      	ADD  R31,R31
00080d 0bff      	SBC  R31,R31
00080e 2f6f      	MOV  R22,R31
00080f 2f7f      	MOV  R23,R31
000810 9508      	RET
                 
                 __CWD1:
000811 2f6f      	MOV  R22,R31
000812 0f66      	ADD  R22,R22
000813 0b66      	SBC  R22,R22
000814 2f76      	MOV  R23,R22
000815 9508      	RET
                 
                 __EQB12:
000816 17ea      	CP   R30,R26
000817 e0e1      	LDI  R30,1
000818 f009      	BREQ __EQB12T
000819 27ee      	CLR  R30
                 __EQB12T:
00081a 9508      	RET
                 
                 __LEB12:
00081b 17ea      	CP   R30,R26
00081c e0e1      	LDI  R30,1
00081d f40c      	BRGE __LEB12T
00081e 27ee      	CLR  R30
                 __LEB12T:
00081f 9508      	RET
                 
                 __GTB12:
000820 17ea      	CP   R30,R26
000821 e0e1      	LDI  R30,1
000822 f00c      	BRLT __GTB12T
000823 27ee      	CLR  R30
                 __GTB12T:
000824 9508      	RET
                 
                 __LEB12U:
000825 17ea      	CP   R30,R26
000826 e0e1      	LDI  R30,1
000827 f408      	BRSH __LEB12U1
000828 27ee      	CLR  R30
                 __LEB12U1:
000829 9508      	RET
                 
                 __LTB12U:
00082a 17ae      	CP   R26,R30
00082b e0e1      	LDI  R30,1
00082c f008      	BRLO __LTB12U1
00082d 27ee      	CLR  R30
                 __LTB12U1:
00082e 9508      	RET
                 
                 __GTB12U:
00082f 17ea      	CP   R30,R26
000830 e0e1      	LDI  R30,1
000831 f008      	BRLO __GTB12U1
000832 27ee      	CLR  R30
                 __GTB12U1:
000833 9508      	RET
                 
                 __GETW1P:
000834 91ed      	LD   R30,X+
000835 91fc      	LD   R31,X
000836 9711      	SBIW R26,1
000837 9508      	RET
                 
                 __GETW1PF:
000838 9005      	LPM  R0,Z+
000839 91f4      	LPM  R31,Z
00083a 2de0      	MOV  R30,R0
00083b 9508      	RET
                 
                 __PUTPARD1:
00083c 937a      	ST   -Y,R23
00083d 936a      	ST   -Y,R22
00083e 93fa      	ST   -Y,R31
00083f 93ea      	ST   -Y,R30
000840 9508      	RET
                 
                 __EEPROMRDW:
000841 9611      	ADIW R26,1
000842 d002      	RCALL __EEPROMRDB
000843 2ffe      	MOV  R31,R30
000844 9711      	SBIW R26,1
                 
                 __EEPROMRDB:
000845 99e1      	SBIC EECR,EEWE
000846 cffe      	RJMP __EEPROMRDB
000847 93ff      	PUSH R31
000848 b7ff      	IN   R31,SREG
000849 94f8      	CLI
00084a bbae      	OUT  EEARL,R26
00084b bbbf      	OUT  EEARH,R27
00084c 9ae0      	SBI  EECR,EERE
00084d b3ed      	IN   R30,EEDR
00084e bfff      	OUT  SREG,R31
00084f 91ff      	POP  R31
000850 9508      	RET
                 
                 __EEPROMWRW:
000851 d007      	RCALL __EEPROMWRB
000852 9611      	ADIW R26,1
000853 93ef      	PUSH R30
000854 2fef      	MOV  R30,R31
000855 d003      	RCALL __EEPROMWRB
000856 91ef      	POP  R30
000857 9711      	SBIW R26,1
000858 9508      	RET
                 
                 __EEPROMWRB:
000859 9be1      	SBIS EECR,EEWE
00085a c002      	RJMP __EEPROMWRB1
00085b 95a8      	WDR
00085c cffc      	RJMP __EEPROMWRB
                 __EEPROMWRB1:
00085d b79f      	IN   R25,SREG
00085e 94f8      	CLI
00085f bbae      	OUT  EEARL,R26
000860 bbbf      	OUT  EEARH,R27
000861 9ae0      	SBI  EECR,EERE
000862 b38d      	IN   R24,EEDR
000863 17e8      	CP   R30,R24
000864 f019      	BREQ __EEPROMWRB0
000865 bbed      	OUT  EEDR,R30
000866 9ae2      	SBI  EECR,EEMWE
000867 9ae1      	SBI  EECR,EEWE
                 __EEPROMWRB0:
000868 bf9f      	OUT  SREG,R25
000869 9508      	RET
                 
                 __SAVELOCR6:
00086a 935a      	ST   -Y,R21
                 __SAVELOCR5:
00086b 934a      	ST   -Y,R20
                 __SAVELOCR4:
00086c 933a      	ST   -Y,R19
                 __SAVELOCR3:
00086d 932a      	ST   -Y,R18
                 __SAVELOCR2:
00086e 931a      	ST   -Y,R17
00086f 930a      	ST   -Y,R16
000870 9508      	RET
                 
                 __LOADLOCR6:
000871 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000872 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000873 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000874 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000875 8119      	LDD  R17,Y+1
000876 8108      	LD   R16,Y
000877 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32A register use summary:
r0 :  36 r1 :   1 r2 :   6 r3 :   0 r4 :  12 r5 :  11 r6 :   3 r7 :   0 
r8 :   3 r9 :   0 r10:  12 r11:  12 r12:  16 r13:   5 r14:   0 r15:  22 
r16:  54 r17:  75 r18:  29 r19:   8 r20:   9 r21:  17 r22:  15 r23:   6 
r24:  30 r25:   7 r26: 198 r27:  69 r28:  38 r29:   1 r30: 415 r31: 121 
x  :  31 y  : 231 z  :  16 
Registers used: 31 out of 35 (88.6%)

ATmega32A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   5 add   :   9 
adiw  :  48 and   :  10 andi  :   8 asr   :   0 bclr  :   0 bld   :   8 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  49 
brge  :   9 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  17 
brlt  :   9 brmi  :   1 brne  :  44 brpl  :   1 brsh  :   4 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  : 213 
cbi   :   9 cbr   :   0 clc   :   0 clh   :   0 cli   :   3 cln   :   0 
clr   :  31 cls   :   0 clt   :   6 clv   :   0 clz   :   0 com   :   0 
cp    :  24 cpc   :   3 cpi   :  57 cpse  :   0 dec   :  10 des   :   0 
eor   :   1 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   7 inc   :   9 jmp   :  27 ld    :  43 ldd   :  80 ldi   : 251 
lds   :  19 lpm   :  16 lsl   :   3 lsr   :   0 mov   :  83 movw  :  30 
mul   :   1 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   0 
ori   :   7 out   :  26 pop   :   5 push  :   5 rcall :  23 ret   :  61 
reti  :   2 rjmp  : 134 rol   :   3 ror   :   0 sbc   :   3 sbci  :   2 
sbi   :  17 sbic  :  19 sbis  :  28 sbiw  :  29 sbr   :   0 sbrc  :  10 
sbrs  :  13 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   2 
ses   :   0 set   :   6 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    : 109 std   :  33 sts   :  17 sub   :   4 subi  :  30 swap  :   1 
tst   :   4 wdr   :   2 
Instructions used: 66 out of 116 (56.9%)

ATmega32A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0010f0   4042    294   4336   32768  13.2%
[.dseg] 0x000060 0x00026a      0     10     10    2048   0.5%
[.eseg] 0x000000 0x00007d      0    125    125    1024  12.2%

Assembly complete, 0 errors, 12 warnings
