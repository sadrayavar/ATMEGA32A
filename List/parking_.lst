
AVRASM ver. 2.1.30  D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm Fri Feb 09 11:47:23 2024

D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1087): warning: Register r4 already defined by the .DEF directive
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1088): warning: Register r5 already defined by the .DEF directive
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1089): warning: Register r6 already defined by the .DEF directive
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1090): warning: Register r7 already defined by the .DEF directive
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1091): warning: Register r9 already defined by the .DEF directive
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1092): warning: Register r8 already defined by the .DEF directive
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1093): warning: Register r11 already defined by the .DEF directive
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1094): warning: Register r12 already defined by the .DEF directive
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1095): warning: Register r13 already defined by the .DEF directive
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1096): warning: Register r10 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Release
                 ;Chip type              : ATmega32A
                 ;Program type           : Application
                 ;Clock frequency        : 8/000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32A
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _number_of_enters=R4
                 	.DEF _number_of_enters_msb=R5
                 	.DEF _number_of_exits=R6
                 	.DEF _number_of_exits_msb=R7
                 	.DEF _day_index=R9
                 	.DEF _capacity=R8
                 	.DEF _reserved=R11
                 	.DEF _second=R12
                 	.DEF _second_msb=R13
                 	.DEF __lcd_x=R10
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 00d4 	JMP  __RESET
000002 940c 0161 	JMP  _ext_int0_isr
000004 940c 0184 	JMP  _ext_int1_isr
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0103 	JMP  _timer2_ovf_isr
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
000033 0002      	.DW  0x0002
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000034 0000
000035 0000      	.DB  0x0,0x0,0x0,0x0
000036 000a
000037 0000      	.DB  0xA,0x0,0x0,0x0
000038 0032      	.DB  0x32,0x0
                 
                 _0x3:
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1144): warning: .cseg .db misalignment - padding zero byte
000039 000a      	.DB  0xA
                 _0x4:
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1146): warning: .cseg .db misalignment - padding zero byte
00003a 003b      	.DB  0x3B
                 _0x5:
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1148): warning: .cseg .db misalignment - padding zero byte
00003b 0017      	.DB  0x17
                 _0x6:
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1150): warning: .cseg .db misalignment - padding zero byte
00003c 001d      	.DB  0x1D
                 _0x7:
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1152): warning: .cseg .db misalignment - padding zero byte
00003d 000c      	.DB  0xC
                 _0x8:
00003e 057a      	.DB  0x7A,0x5
                 _0x0:
00003f 6d45
000040 7470
000041 0079
000042 7546      	.DB  0x45,0x6D,0x70,0x74,0x79,0x0,0x46,0x75
000043 6c6c
000044 7300
000045 7661
000046 6e69      	.DB  0x6C,0x6C,0x0,0x73,0x61,0x76,0x69,0x6E
000047 2067
000048 6164
000049 6174
00004a 4300      	.DB  0x67,0x20,0x64,0x61,0x74,0x61,0x0,0x43
00004b 253d
00004c 2064
00004d 6425
00004e 252f      	.DB  0x3D,0x25,0x64,0x20,0x25,0x64,0x2F,0x25
00004f 2f64
000050 6425
000051 2500
000052 3a64      	.DB  0x64,0x2F,0x25,0x64,0x0,0x25,0x64,0x3A
000053 6425
000054 253a
000055 2064
000056 5220      	.DB  0x25,0x64,0x3A,0x25,0x64,0x20,0x20,0x52
000057 253d
000058 2064
000059 5400
00005a 6d69      	.DB  0x3D,0x25,0x64,0x20,0x0,0x54,0x69,0x6D
00005b 2065
00005c 6553
00005d 7474
00005e 6e69      	.DB  0x65,0x20,0x53,0x65,0x74,0x74,0x69,0x6E
00005f 2067
000060 3e3e
000061 4900
000062 264e      	.DB  0x67,0x20,0x3E,0x3E,0x0,0x49,0x4E,0x26
000063 554f
000064 2054
000065 6553
000066 7261      	.DB  0x4F,0x55,0x54,0x20,0x53,0x65,0x61,0x72
000067 6863
000068 3e20
000069 003e
00006a 6552      	.DB  0x63,0x68,0x20,0x3E,0x3E,0x0,0x52,0x65
00006b 6573
00006c 7672
00006d 5f65
00006e 6150      	.DB  0x73,0x65,0x72,0x76,0x65,0x5F,0x50,0x61
00006f 6b72
000070 3e20
000071 003e
000072 6553      	.DB  0x72,0x6B,0x20,0x3E,0x3E,0x0,0x53,0x65
000073 2074
000074 6164
000075 6574
000076 3e20      	.DB  0x74,0x20,0x64,0x61,0x74,0x65,0x20,0x3E
000077 003e
000078 6553
000079 2074
00007a 696d      	.DB  0x3E,0x0,0x53,0x65,0x74,0x20,0x6D,0x69
00007b 3d6e
00007c 6425
00007d 2020
00007e 003e      	.DB  0x6E,0x3D,0x25,0x64,0x20,0x20,0x3E,0x0
00007f 6553
000080 2074
000081 6f68
000082 7275      	.DB  0x53,0x65,0x74,0x20,0x68,0x6F,0x75,0x72
000083 253d
000084 2064
000085 3e20
000086 4f00      	.DB  0x3D,0x25,0x64,0x20,0x20,0x3E,0x0,0x4F
000087 7475
000088 6f20
000089 2066
00008a 6e69      	.DB  0x75,0x74,0x20,0x6F,0x66,0x20,0x69,0x6E
00008b 6564
00008c 2e78
00008d 6900
00008e 3d6e      	.DB  0x64,0x65,0x78,0x2E,0x0,0x69,0x6E,0x3D
00008f 6425
000090 6f20
000091 7475
000092 253d      	.DB  0x25,0x64,0x20,0x6F,0x75,0x74,0x3D,0x25
000093 2064
000094 6425
000095 2520
000096 0064      	.DB  0x64,0x20,0x25,0x64,0x20,0x25,0x64,0x0
000097 6552
000098 6573
000099 7672
00009a 6465      	.DB  0x52,0x65,0x73,0x65,0x72,0x76,0x65,0x64
00009b 253d
00009c 0064
00009d 6553
00009e 2074      	.DB  0x3D,0x25,0x64,0x0,0x53,0x65,0x74,0x20
00009f 6f6d
0000a0 746e
0000a1 3d68
0000a2 6425      	.DB  0x6D,0x6F,0x6E,0x74,0x68,0x3D,0x25,0x64
0000a3 2020
0000a4 003e
0000a5 6553
0000a6 2074      	.DB  0x20,0x20,0x3E,0x0,0x53,0x65,0x74,0x20
0000a7 6164
0000a8 3d79
0000a9 6425
0000aa 2020      	.DB  0x64,0x61,0x79,0x3D,0x25,0x64,0x20,0x20
0000ab 003e
0000ac 6553
0000ad 2074
0000ae 6579      	.DB  0x3E,0x0,0x53,0x65,0x74,0x20,0x79,0x65
0000af 7261
0000b0 253d
0000b1 2064
0000b2 3e20      	.DB  0x61,0x72,0x3D,0x25,0x64,0x20,0x20,0x3E
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1185): warning: .cseg .db misalignment - padding zero byte
0000b3 0000      	.DB  0x0
                 _0x2020003:
0000b4 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
0000b5 0001      	.DW  0x01
0000b6 0002      	.DW  0x02
0000b7 0066      	.DW  __REG_BIT_VARS*2
                 
0000b8 000a      	.DW  0x0A
0000b9 0004      	.DW  0x04
0000ba 0068      	.DW  __REG_VARS*2
                 
0000bb 0001      	.DW  0x01
0000bc 02f8      	.DW  _minute
0000bd 0074      	.DW  _0x4*2
                 
0000be 0001      	.DW  0x01
0000bf 02fa      	.DW  _hour
0000c0 0076      	.DW  _0x5*2
                 
0000c1 0001      	.DW  0x01
0000c2 02fc      	.DW  _day
0000c3 0078      	.DW  _0x6*2
                 
0000c4 0001      	.DW  0x01
0000c5 02fe      	.DW  _month
0000c6 007a      	.DW  _0x7*2
                 
0000c7 0002      	.DW  0x02
0000c8 0300      	.DW  _year
0000c9 007c      	.DW  _0x8*2
                 
0000ca 000e      	.DW  0x0E
0000cb 0260      	.DW  _0x7F
0000cc 010d      	.DW  _0x0*2+143
                 
0000cd 000e      	.DW  0x0E
0000ce 026e      	.DW  _0x7F+14
0000cf 010d      	.DW  _0x0*2+143
                 
0000d0 0002      	.DW  0x02
0000d1 0302      	.DW  __base_y_G101
0000d2 0168      	.DW  _0x2020003*2
                 
                 _0xFFFFFFFF:
0000d3 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
0000d4 94f8      	CLI
0000d5 27ee      	CLR  R30
0000d6 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
0000d7 e0f1      	LDI  R31,1
0000d8 bff5      	OUT  MCUCR,R31
0000d9 bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
0000da e1f8      	LDI  R31,0x18
0000db bdf1      	OUT  WDTCR,R31
0000dc bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
0000dd e08d      	LDI  R24,(14-2)+1
0000de e0a2      	LDI  R26,2
0000df 27bb      	CLR  R27
                 __CLEAR_REG:
0000e0 93ed      	ST   X+,R30
0000e1 958a      	DEC  R24
0000e2 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0000e3 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
0000e4 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
0000e5 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
0000e6 93ed      	ST   X+,R30
0000e7 9701      	SBIW R24,1
0000e8 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0000e9 e6ea      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0000ea e0f1      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0000eb 9185      	LPM  R24,Z+
0000ec 9195      	LPM  R25,Z+
0000ed 9700      	SBIW R24,0
0000ee f061      	BREQ __GLOBAL_INI_END
0000ef 91a5      	LPM  R26,Z+
0000f0 91b5      	LPM  R27,Z+
0000f1 9005      	LPM  R0,Z+
0000f2 9015      	LPM  R1,Z+
0000f3 01bf      	MOVW R22,R30
0000f4 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0000f5 9005      	LPM  R0,Z+
0000f6 920d      	ST   X+,R0
0000f7 9701      	SBIW R24,1
0000f8 f7e1      	BRNE __GLOBAL_INI_LOOP
0000f9 01fb      	MOVW R30,R22
0000fa cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0000fb e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0000fc bfed      	OUT  SPL,R30
0000fd e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000fe bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000ff e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000100 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000101 940c 01b4 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <mega32a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h> // delay_ms functions
                 ;#include <stdio.h> // sprintf function
                 ;#include <alcd.h>  // lcd related functions
                 ;#define xtal 8'000'000
                 ;
                 ;// prototyping functions
                 ;char menu(void);
                 ;char in_out_search(void);
                 ;char set_time(void);
                 ;char reserve_park(void);
                 ;char set_date(void);
                 ;
                 ;unsigned int number_of_enters = 0, number_of_exits = 0;
                 ;int enter_array[31] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
                 ;int exit_array[31] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
                 ;unsigned char day_index = 0;
                 ;unsigned char const init_capacity = 10;
                 
                 	.DSEG
                 ;signed char capacity = init_capacity, reserved = 0;
                 ;bit is_full = 0, is_empty = 1;
                 ;unsigned int second = 50, minute = 59, hour = 23, day = 29, month = 12, year = 1402;
                 ;
                 ;// define timer interrupt: clock and date logic
                 ;interrupt[TIM2_OVF] void timer2_ovf_isr(void)
                 ; 0000 0019 {
                 
                 	.CSEG
                 _timer2_ovf_isr:
                 ; .FSTART _timer2_ovf_isr
000103 93aa      	ST   -Y,R26
000104 93ba      	ST   -Y,R27
000105 93ea      	ST   -Y,R30
000106 93fa      	ST   -Y,R31
000107 b7ef      	IN   R30,SREG
000108 93ea      	ST   -Y,R30
                 ; 0000 001A 
                 ; 0000 001B     // logic of second, minute, hour
                 ; 0000 001C     if (second == 59)
000109 e3eb      	LDI  R30,LOW(59)
00010a e0f0      	LDI  R31,HIGH(59)
00010b 15ec      	CP   R30,R12
00010c 05fd      	CPC  R31,R13
00010d f511      	BRNE _0x9
                 ; 0000 001D     {
                 ; 0000 001E         second = 0;
00010e 24cc      	CLR  R12
00010f 24dd      	CLR  R13
                 ; 0000 001F         if (minute == 59)
000110 940e 0759 	CALL SUBOPT_0x0
000112 97db      	SBIW R26,59
000113 f4c9      	BRNE _0xA
                 ; 0000 0020         {
                 ; 0000 0021             minute = 0;
000114 e0e0      	LDI  R30,LOW(0)
000115 93e0 02f8 	STS  _minute,R30
000117 93e0 02f9 	STS  _minute+1,R30
                 ; 0000 0022             if (hour == 23)
000119 940e 075e 	CALL SUBOPT_0x1
00011b 9757      	SBIW R26,23
00011c f441      	BRNE _0xB
                 ; 0000 0023             {
                 ; 0000 0024                 hour = 0;
00011d e0e0      	LDI  R30,LOW(0)
00011e 93e0 02fa 	STS  _hour,R30
000120 93e0 02fb 	STS  _hour+1,R30
                 ; 0000 0025                 day++;
000122 efac      	LDI  R26,LOW(_day)
000123 e0b2      	LDI  R27,HIGH(_day)
000124 c002      	RJMP _0xDB
                 ; 0000 0026             }
                 ; 0000 0027             else
                 _0xB:
                 ; 0000 0028                 hour++;
000125 efaa      	LDI  R26,LOW(_hour)
000126 e0b2      	LDI  R27,HIGH(_hour)
                 _0xDB:
000127 91ed      	LD   R30,X+
000128 91fd      	LD   R31,X+
000129 9631      	ADIW R30,1
00012a 93fe      	ST   -X,R31
00012b 93ee      	ST   -X,R30
                 ; 0000 0029         }
                 ; 0000 002A         else
00012c c002      	RJMP _0xD
                 _0xA:
                 ; 0000 002B             minute++;
00012d 940e 0763 	CALL SUBOPT_0x2
                 ; 0000 002C     }
                 _0xD:
                 ; 0000 002D     else
00012f c003      	RJMP _0xE
                 _0x9:
                 ; 0000 002E         second++;
000130 01f6      	MOVW R30,R12
000131 9631      	ADIW R30,1
000132 016f      	MOVW R12,R30
                 ; 0000 002F 
                 ; 0000 0030     // logic of day, month
                 ; 0000 0031     if (month <= 6)
                 _0xE:
000133 940e 076b 	CALL SUBOPT_0x3
000135 9717      	SBIW R26,7
000136 f438      	BRSH _0xF
                 ; 0000 0032     {
                 ; 0000 0033         if (day > 31)
000137 940e 0770 	CALL SUBOPT_0x4
000139 9790      	SBIW R26,32
00013a f010      	BRLO _0x10
                 ; 0000 0034         {
                 ; 0000 0035             day = 1;
00013b 940e 0775 	CALL SUBOPT_0x5
                 ; 0000 0036             month++;
                 ; 0000 0037         }
                 ; 0000 0038     }
                 _0x10:
                 ; 0000 0039     else
00013d c011      	RJMP _0x11
                 _0xF:
                 ; 0000 003A     {
                 ; 0000 003B         if (month == 12)
00013e 940e 076b 	CALL SUBOPT_0x3
000140 971c      	SBIW R26,12
000141 f439      	BRNE _0x12
                 ; 0000 003C         {
                 ; 0000 003D             if (day > 29)
000142 940e 0770 	CALL SUBOPT_0x4
000144 975e      	SBIW R26,30
000145 f010      	BRLO _0x13
                 ; 0000 003E             {
                 ; 0000 003F                 day = 1;
000146 940e 0775 	CALL SUBOPT_0x5
                 ; 0000 0040                 month++;
                 ; 0000 0041             }
                 ; 0000 0042         }
                 _0x13:
                 ; 0000 0043         else
000148 c006      	RJMP _0x14
                 _0x12:
                 ; 0000 0044         {
                 ; 0000 0045             if (day > 30)
000149 940e 0770 	CALL SUBOPT_0x4
00014b 975f      	SBIW R26,31
00014c f010      	BRLO _0x15
                 ; 0000 0046             {
                 ; 0000 0047                 day = 1;
00014d 940e 0775 	CALL SUBOPT_0x5
                 ; 0000 0048                 month++;
                 ; 0000 0049             }
                 ; 0000 004A         }
                 _0x15:
                 _0x14:
                 ; 0000 004B     }
                 _0x11:
                 ; 0000 004C 
                 ; 0000 004D     // logic of year
                 ; 0000 004E     if (month > 12)
00014f 940e 076b 	CALL SUBOPT_0x3
000151 971d      	SBIW R26,13
000152 f038      	BRLO _0x16
                 ; 0000 004F     {
                 ; 0000 0050         month = 1;
000153 940e 0783 	CALL SUBOPT_0x6
                 ; 0000 0051         year++;
000155 940e 078a 	CALL SUBOPT_0x7
000157 9631      	ADIW R30,1
000158 93fe      	ST   -X,R31
000159 93ee      	ST   -X,R30
                 ; 0000 0052     }
                 ; 0000 0053 }
                 _0x16:
00015a 91e9      	LD   R30,Y+
00015b bfef      	OUT  SREG,R30
00015c 91f9      	LD   R31,Y+
00015d 91e9      	LD   R30,Y+
00015e 91b9      	LD   R27,Y+
00015f 91a9      	LD   R26,Y+
000160 9518      	RETI
                 ; .FEND
                 ;
                 ;// define interrupt 0: for exiting cars
                 ;interrupt[EXT_INT0] void ext_int0_isr(void)
                 ; 0000 0057 {
                 _ext_int0_isr:
                 ; .FSTART _ext_int0_isr
000161 940e 078f 	CALL SUBOPT_0x8
                 ; 0000 0058     if (is_empty == 1)
000163 fe21      	SBRS R2,1
000164 c007      	RJMP _0x17
                 ; 0000 0059     {
                 ; 0000 005A         lcd_clear();
000165 940e 06c7 	CALL _lcd_clear
                 ; 0000 005B         lcd_putsf("Empty");
                +
000167 e7ae     +LDI R26 , LOW ( 2 * _0x0 + ( 0 ) )
000168 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW2FN _0x0,0
000169 940e 079d 	CALL SUBOPT_0x9
                 ; 0000 005C         delay_ms(500);
                 ; 0000 005D     }
                 ; 0000 005E     else
00016b c017      	RJMP _0x18
                 _0x17:
                 ; 0000 005F     {
                 ; 0000 0060 
                 ; 0000 0061         capacity++;
00016c 9483      	INC  R8
                 ; 0000 0062         number_of_exits++;
00016d 01f3      	MOVW R30,R6
00016e 9631      	ADIW R30,1
00016f 013f      	MOVW R6,R30
000170 9731      	SBIW R30,1
                 ; 0000 0063 
                 ; 0000 0064         // check if the parking is empty
                 ; 0000 0065         if ((capacity + reserved) >= init_capacity)
000171 940e 07a3 	CALL SUBOPT_0xA
000173 f02c      	BRLT _0x19
                 ; 0000 0066         {
                 ; 0000 0067             capacity = init_capacity - reserved;
000174 e0ea      	LDI  R30,LOW(10)
000175 19eb      	SUB  R30,R11
000176 2e8e      	MOV  R8,R30
                 ; 0000 0068             is_empty = 1;
000177 9468      	SET
000178 c001      	RJMP _0xDC
                 ; 0000 0069         }
                 ; 0000 006A         else
                 _0x19:
                 ; 0000 006B         {
                 ; 0000 006C             is_empty = 0;
000179 94e8      	CLT
                 _0xDC:
00017a f821      	BLD  R2,1
                 ; 0000 006D         }
                 ; 0000 006E 
                 ; 0000 006F         // checking if the parking is full
                 ; 0000 0070         if (capacity <= 0)
00017b e0e0      	LDI  R30,LOW(0)
00017c 15e8      	CP   R30,R8
00017d f01c      	BRLT _0x1B
                 ; 0000 0071         {
                 ; 0000 0072             capacity = 0;
00017e 2488      	CLR  R8
                 ; 0000 0073             is_full = 1;
00017f 9468      	SET
000180 c001      	RJMP _0xDD
                 ; 0000 0074         }
                 ; 0000 0075         else
                 _0x1B:
                 ; 0000 0076         {
                 ; 0000 0077             is_full = 0;
000181 94e8      	CLT
                 _0xDD:
000182 f820      	BLD  R2,0
                 ; 0000 0078         }
                 ; 0000 0079     }
                 _0x18:
                 ; 0000 007A }
000183 c022      	RJMP _0xE0
                 ; .FEND
                 ;
                 ;// define interrupt 1: for entering cars
                 ;interrupt[EXT_INT1] void ext_int1_isr(void)
                 ; 0000 007E {
                 _ext_int1_isr:
                 ; .FSTART _ext_int1_isr
000184 940e 078f 	CALL SUBOPT_0x8
                 ; 0000 007F     if (is_full == 1)
000186 fe20      	SBRS R2,0
000187 c007      	RJMP _0x1D
                 ; 0000 0080     {
                 ; 0000 0081         lcd_clear();
000188 940e 06c7 	CALL _lcd_clear
                 ; 0000 0082         lcd_putsf("Full");
                +
00018a e8a4     +LDI R26 , LOW ( 2 * _0x0 + ( 6 ) )
00018b e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 6 ) )
                 	__POINTW2FN _0x0,6
00018c 940e 079d 	CALL SUBOPT_0x9
                 ; 0000 0083         delay_ms(500);
                 ; 0000 0084     }
                 ; 0000 0085     else
00018e c017      	RJMP _0x1E
                 _0x1D:
                 ; 0000 0086     {
                 ; 0000 0087 
                 ; 0000 0088         capacity--;
00018f 948a      	DEC  R8
                 ; 0000 0089         number_of_enters++;
000190 01f2      	MOVW R30,R4
000191 9631      	ADIW R30,1
000192 012f      	MOVW R4,R30
000193 9731      	SBIW R30,1
                 ; 0000 008A 
                 ; 0000 008B         // checking if the parking is full
                 ; 0000 008C         if ((capacity) <= 0)
000194 e0e0      	LDI  R30,LOW(0)
000195 15e8      	CP   R30,R8
000196 f01c      	BRLT _0x1F
                 ; 0000 008D         {
                 ; 0000 008E             capacity = 0;
000197 2488      	CLR  R8
                 ; 0000 008F             is_full = 1;
000198 9468      	SET
000199 c001      	RJMP _0xDE
                 ; 0000 0090         }
                 ; 0000 0091         else
                 _0x1F:
                 ; 0000 0092         {
                 ; 0000 0093             is_full = 0;
00019a 94e8      	CLT
                 _0xDE:
00019b f820      	BLD  R2,0
                 ; 0000 0094         }
                 ; 0000 0095 
                 ; 0000 0096         // check if the parking is empty
                 ; 0000 0097         if ((capacity + reserved) >= init_capacity)
00019c 940e 07a3 	CALL SUBOPT_0xA
00019e f02c      	BRLT _0x21
                 ; 0000 0098         {
                 ; 0000 0099             capacity = init_capacity - reserved;
00019f e0ea      	LDI  R30,LOW(10)
0001a0 19eb      	SUB  R30,R11
0001a1 2e8e      	MOV  R8,R30
                 ; 0000 009A             is_empty = 1;
0001a2 9468      	SET
0001a3 c001      	RJMP _0xDF
                 ; 0000 009B         }
                 ; 0000 009C         else
                 _0x21:
                 ; 0000 009D         {
                 ; 0000 009E             is_empty = 0;
0001a4 94e8      	CLT
                 _0xDF:
0001a5 f821      	BLD  R2,1
                 ; 0000 009F         }
                 ; 0000 00A0     }
                 _0x1E:
                 ; 0000 00A1 }
                 _0xE0:
0001a6 91e9      	LD   R30,Y+
0001a7 bfef      	OUT  SREG,R30
0001a8 91f9      	LD   R31,Y+
0001a9 91e9      	LD   R30,Y+
0001aa 91b9      	LD   R27,Y+
0001ab 91a9      	LD   R26,Y+
0001ac 9199      	LD   R25,Y+
0001ad 9189      	LD   R24,Y+
0001ae 9179      	LD   R23,Y+
0001af 9169      	LD   R22,Y+
0001b0 90f9      	LD   R15,Y+
0001b1 9019      	LD   R1,Y+
0001b2 9009      	LD   R0,Y+
0001b3 9518      	RETI
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 00A4 {
                 _main:
                 ; .FSTART _main
                 ; 0000 00A5     char line[17], line2[17];
                 ; 0000 00A6 
                 ; 0000 00A7     GICR |= 0xC0;
0001b4 97a2      	SBIW R28,34
                 ;	line -> Y+17
                 ;	line2 -> Y+0
0001b5 b7eb      	IN   R30,0x3B
0001b6 6ce0      	ORI  R30,LOW(0xC0)
0001b7 bfeb      	OUT  0x3B,R30
                 ; 0000 00A8     MCUCR = 0x0B;
0001b8 e0eb      	LDI  R30,LOW(11)
0001b9 bfe5      	OUT  0x35,R30
                 ; 0000 00A9     MCUCSR = 0x00;
0001ba e0e0      	LDI  R30,LOW(0)
0001bb bfe4      	OUT  0x34,R30
                 ; 0000 00AA     GIFR = 0xC0;
0001bc ece0      	LDI  R30,LOW(192)
0001bd bfea      	OUT  0x3A,R30
                 ; 0000 00AB 
                 ; 0000 00AC     // initilize lcd
                 ; 0000 00AD     lcd_init(16);
0001be e1a0      	LDI  R26,LOW(16)
0001bf 940e 0710 	CALL _lcd_init
                 ; 0000 00AE     lcd_clear();
0001c1 940e 06c7 	CALL _lcd_clear
                 ; 0000 00AF     lcd_gotoxy(0, 1);
0001c3 940e 07af 	CALL SUBOPT_0xB
                 ; 0000 00B0     delay_ms(300);
0001c5 940e 07b4 	CALL SUBOPT_0xC
                 ; 0000 00B1 
                 ; 0000 00B2     ASSR = 0x08; // timer2
0001c7 e0e8      	LDI  R30,LOW(8)
0001c8 bde2      	OUT  0x22,R30
                 ; 0000 00B3     TCCR2 = 0x05;
0001c9 e0e5      	LDI  R30,LOW(5)
0001ca bde5      	OUT  0x25,R30
                 ; 0000 00B4     TCNT2 = 0x00;
0001cb e0e0      	LDI  R30,LOW(0)
0001cc bde4      	OUT  0x24,R30
                 ; 0000 00B5     OCR2 = 0x00;
0001cd bde3      	OUT  0x23,R30
                 ; 0000 00B6     TIMSK = 0x40;
0001ce e4e0      	LDI  R30,LOW(64)
0001cf bfe9      	OUT  0x39,R30
                 ; 0000 00B7 
                 ; 0000 00B8     PORTA = 0b00011111;
0001d0 e1ef      	LDI  R30,LOW(31)
0001d1 bbeb      	OUT  0x1B,R30
                 ; 0000 00B9 
                 ; 0000 00BA #asm("sei")
0001d2 9478      	sei
                 ; 0000 00BB     capacity = capacity - reserved;
0001d3 188b      	SUB  R8,R11
                 ; 0000 00BC 
                 ; 0000 00BD     while (1)
                 _0x23:
                 ; 0000 00BE     {
                 ; 0000 00BF         if (PINA .2 == 0)
0001d4 99ca      	SBIC 0x19,2
0001d5 c003      	RJMP _0x26
                 ; 0000 00C0         {
                 ; 0000 00C1             while (PINA .2 == 0)
                 _0x27:
0001d6 9bca      	SBIS 0x19,2
                 ; 0000 00C2                 ;
0001d7 cffe      	RJMP _0x27
                 ; 0000 00C3             menu();
0001d8 d074      	RCALL _menu
                 ; 0000 00C4         }
                 ; 0000 00C5 
                 ; 0000 00C6         // save the enter and exits at the end of the day
                 ; 0000 00C7         if (hour == 0 & minute == 0 & second == 0)
                 _0x26:
0001d9 940e 07b8 	CALL SUBOPT_0xD
0001db f1d1      	BREQ _0x2A
                 ; 0000 00C8         {
                 ; 0000 00C9             // save the data
                 ; 0000 00CA             enter_array[day_index] = number_of_enters;
0001dc 2de9      	MOV  R30,R9
0001dd 940e 07cb 	CALL SUBOPT_0xE
0001df 8240      	ST   Z,R4
0001e0 8251      	STD  Z+1,R5
                 ; 0000 00CB             exit_array[day_index] = number_of_exits;
0001e1 2de9      	MOV  R30,R9
0001e2 940e 07d3 	CALL SUBOPT_0xF
0001e4 8260      	ST   Z,R6
0001e5 8271      	STD  Z+1,R7
                 ; 0000 00CC 
                 ; 0000 00CD             if (day_index >= 31) // shift the data if array is full
0001e6 e1ef      	LDI  R30,LOW(31)
0001e7 169e      	CP   R9,R30
0001e8 f110      	BRLO _0x2B
                 ; 0000 00CE             {
                 ; 0000 00CF                 char i = 0;
                 ; 0000 00D0                 while (i < 31)
0001e9 9721      	SBIW R28,1
0001ea e0e0      	LDI  R30,LOW(0)
0001eb 83e8      	ST   Y,R30
                 ;	line -> Y+18
                 ;	line2 -> Y+1
                 ;	i -> Y+0
                 _0x2C:
0001ec 81a8      	LD   R26,Y
0001ed 31af      	CPI  R26,LOW(0x1F)
0001ee f4d0      	BRSH _0x2E
                 ; 0000 00D1                 {
                 ; 0000 00D2                     enter_array[i] = enter_array[i + 1];
0001ef 81e8      	LD   R30,Y
0001f0 940e 07cb 	CALL SUBOPT_0xE
0001f2 010f      	MOVW R0,R30
0001f3 81a8      	LD   R26,Y
0001f4 27bb      	CLR  R27
0001f5 0faa      	LSL  R26
0001f6 1fbb      	ROL  R27
                +
0001f7 58a2     +SUBI R26 , LOW ( - _enter_array - ( 2 ) )
0001f8 4fbd     +SBCI R27 , HIGH ( - _enter_array - ( 2 ) )
                 	__ADDW2MN _enter_array,2
0001f9 940e 07db 	CALL SUBOPT_0x10
                 ; 0000 00D3                     exit_array[i] = exit_array[i + 1];
0001fb 940e 07d3 	CALL SUBOPT_0xF
0001fd 010f      	MOVW R0,R30
0001fe 81a8      	LD   R26,Y
0001ff 27bb      	CLR  R27
000200 0faa      	LSL  R26
000201 1fbb      	ROL  R27
                +
000202 54a4     +SUBI R26 , LOW ( - _exit_array - ( 2 ) )
000203 4fbd     +SBCI R27 , HIGH ( - _exit_array - ( 2 ) )
                 	__ADDW2MN _exit_array,2
000204 940e 07db 	CALL SUBOPT_0x10
                 ; 0000 00D4                     i++;
000206 5fef      	SUBI R30,-LOW(1)
000207 83e8      	ST   Y,R30
                 ; 0000 00D5                 }
000208 cfe3      	RJMP _0x2C
                 _0x2E:
                 ; 0000 00D6             }
000209 9621      	ADIW R28,1
                 ; 0000 00D7             else // increment array index
00020a c001      	RJMP _0x2F
                 _0x2B:
                 ; 0000 00D8                 day_index++;
00020b 9493      	INC  R9
                 ; 0000 00D9 
                 ; 0000 00DA             while (hour == 0 & minute == 0 & second == 0)
                 _0x2F:
                 _0x30:
00020c 940e 07b8 	CALL SUBOPT_0xD
00020e f039      	BREQ _0x32
                 ; 0000 00DB             {
                 ; 0000 00DC                 lcd_clear();
00020f 940e 06c7 	CALL _lcd_clear
                 ; 0000 00DD                 lcd_putsf("saving data");
                +
000211 e8a9     +LDI R26 , LOW ( 2 * _0x0 + ( 11 ) )
000212 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 11 ) )
                 	__POINTW2FN _0x0,11
000213 940e 06fd 	CALL _lcd_putsf
                 ; 0000 00DE             }
000215 cff6      	RJMP _0x30
                 _0x32:
                 ; 0000 00DF         }
                 ; 0000 00E0 
                 ; 0000 00E1         sprintf(line, "C=%d %d/%d/%d", capacity, year, month, day);
                 _0x2A:
000216 01fe      	MOVW R30,R28
000217 9671      	ADIW R30,17
000218 93fa      	ST   -Y,R31
000219 93ea      	ST   -Y,R30
                +
00021a e9e5     +LDI R30 , LOW ( 2 * _0x0 + ( 23 ) )
00021b e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 23 ) )
                 	__POINTW1FN _0x0,23
00021c 93fa      	ST   -Y,R31
00021d 93ea      	ST   -Y,R30
00021e 2de8      	MOV  R30,R8
00021f 940e 07e2 	CALL SUBOPT_0x11
000221 940e 07e7 	CALL SUBOPT_0x12
000223 940e 07f0 	CALL SUBOPT_0x13
000225 940e 07f9 	CALL SUBOPT_0x14
000227 e180      	LDI  R24,16
000228 940e 0653 	CALL _sprintf
00022a 9664      	ADIW R28,20
                 ; 0000 00E2         sprintf(line2, "%d:%d:%d  R=%d ", hour, minute, second, reserved);
00022b 940e 0802 	CALL SUBOPT_0x15
                +
00022d eae3     +LDI R30 , LOW ( 2 * _0x0 + ( 37 ) )
00022e e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 37 ) )
                 	__POINTW1FN _0x0,37
00022f 940e 0806 	CALL SUBOPT_0x16
000231 940e 0811 	CALL SUBOPT_0x17
000233 01f6      	MOVW R30,R12
000234 2766      	CLR  R22
000235 2777      	CLR  R23
000236 940e 08fe 	CALL __PUTPARD1
000238 2deb      	MOV  R30,R11
000239 940e 07e2 	CALL SUBOPT_0x11
00023b e180      	LDI  R24,16
00023c 940e 0653 	CALL _sprintf
00023e 9664      	ADIW R28,20
                 ; 0000 00E3         lcd_clear();
00023f 940e 06c7 	CALL _lcd_clear
                 ; 0000 00E4         lcd_puts(line);
000241 01de      	MOVW R26,R28
000242 9651      	ADIW R26,17
000243 940e 06ee 	CALL _lcd_puts
                 ; 0000 00E5         lcd_gotoxy(0, 1);
000245 940e 07af 	CALL SUBOPT_0xB
                 ; 0000 00E6         lcd_puts(line2);
000247 940e 081a 	CALL SUBOPT_0x18
                 ; 0000 00E7         delay_ms(25);
000249 940e 081d 	CALL SUBOPT_0x19
                 ; 0000 00E8     }
00024b cf88      	RJMP _0x23
                 ; 0000 00E9 }
                 _0x33:
00024c cfff      	RJMP _0x33
                 ; .FEND
                 ;
                 ;/// Functions 4 menu and...
                 ;char menu(void)
                 ; 0000 00ED {
                 _menu:
                 ; .FSTART _menu
                 ; 0000 00EE     char choice = 0;
                 ; 0000 00EF     while (1)
00024d 931a      	ST   -Y,R17
                 ;	choice -> R17
00024e e010      	LDI  R17,0
                 _0x34:
                 ; 0000 00F0     {
                 ; 0000 00F1         // iterate through menu items
                 ; 0000 00F2         if (choice == 0)
00024f 3010      	CPI  R17,0
000250 f431      	BRNE _0x37
                 ; 0000 00F3         {
                 ; 0000 00F4             lcd_clear();
000251 940e 06c7 	CALL _lcd_clear
                 ; 0000 00F5             lcd_putsf("Time Setting >>");
                +
000253 eba3     +LDI R26 , LOW ( 2 * _0x0 + ( 53 ) )
000254 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 53 ) )
                 	__POINTW2FN _0x0,53
000255 940e 06fd 	CALL _lcd_putsf
                 ; 0000 00F6         }
                 ; 0000 00F7         if (choice == 1)
                 _0x37:
000257 3011      	CPI  R17,1
000258 f431      	BRNE _0x38
                 ; 0000 00F8         {
                 ; 0000 00F9             lcd_clear();
000259 940e 06c7 	CALL _lcd_clear
                 ; 0000 00FA             lcd_putsf("IN&OUT Search >>");
                +
00025b eca3     +LDI R26 , LOW ( 2 * _0x0 + ( 69 ) )
00025c e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 69 ) )
                 	__POINTW2FN _0x0,69
00025d 940e 06fd 	CALL _lcd_putsf
                 ; 0000 00FB         }
                 ; 0000 00FC         if (choice == 2)
                 _0x38:
00025f 3012      	CPI  R17,2
000260 f431      	BRNE _0x39
                 ; 0000 00FD         {
                 ; 0000 00FE             lcd_clear();
000261 940e 06c7 	CALL _lcd_clear
                 ; 0000 00FF             lcd_putsf("Reserve_Park >>");
                +
000263 eda4     +LDI R26 , LOW ( 2 * _0x0 + ( 86 ) )
000264 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 86 ) )
                 	__POINTW2FN _0x0,86
000265 940e 06fd 	CALL _lcd_putsf
                 ; 0000 0100         }
                 ; 0000 0101         if (choice == 3)
                 _0x39:
000267 3013      	CPI  R17,3
000268 f431      	BRNE _0x3A
                 ; 0000 0102         {
                 ; 0000 0103             lcd_clear();
000269 940e 06c7 	CALL _lcd_clear
                 ; 0000 0104             lcd_putsf("Set date >>");
                +
00026b eea4     +LDI R26 , LOW ( 2 * _0x0 + ( 102 ) )
00026c e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 102 ) )
                 	__POINTW2FN _0x0,102
00026d 940e 06fd 	CALL _lcd_putsf
                 ; 0000 0105         }
                 ; 0000 0106         if (PINA .3 == 0) // next item
                 _0x3A:
00026f 99cb      	SBIC 0x19,3
000270 c006      	RJMP _0x3B
                 ; 0000 0107         {
                 ; 0000 0108             while (PINA .3 == 0)
                 _0x3C:
000271 9bcb      	SBIS 0x19,3
                 ; 0000 0109                 ;
000272 cffe      	RJMP _0x3C
                 ; 0000 010A             choice++;
000273 5f1f      	SUBI R17,-1
                 ; 0000 010B             if (choice >= 4)
000274 3014      	CPI  R17,4
000275 f008      	BRLO _0x3F
                 ; 0000 010C                 choice = 0;
000276 e010      	LDI  R17,LOW(0)
                 ; 0000 010D         }
                 _0x3F:
                 ; 0000 010E 
                 ; 0000 010F         if (PINA .4 == 0) // close menu
                 _0x3B:
000277 99cc      	SBIC 0x19,4
000278 c004      	RJMP _0x40
                 ; 0000 0110         {                 // Back
                 ; 0000 0111             while (PINA .4 == 0)
                 _0x41:
000279 9bcc      	SBIS 0x19,4
                 ; 0000 0112                 ;
00027a cffe      	RJMP _0x41
                 ; 0000 0113             return 0;
00027b e0e0      	LDI  R30,LOW(0)
00027c c025      	RJMP _0x2080008
                 ; 0000 0114         }
                 ; 0000 0115 
                 ; 0000 0116         // choose time_setting
                 ; 0000 0117         if (PINA .2 == 0 & choice == 0)
                 _0x40:
00027d 940e 0821 	CALL SUBOPT_0x1A
00027f 940e 082a 	CALL SUBOPT_0x1B
000281 f019      	BREQ _0x44
                 ; 0000 0118         {
                 ; 0000 0119             while (PINA .2 == 0)
                 _0x45:
000282 9bca      	SBIS 0x19,2
                 ; 0000 011A                 ;
000283 cffe      	RJMP _0x45
                 ; 0000 011B             set_time();
000284 d01f      	RCALL _set_time
                 ; 0000 011C         }
                 ; 0000 011D 
                 ; 0000 011E         // choose in_out_search
                 ; 0000 011F         if (PINA .2 == 0 & choice == 1)
                 _0x44:
000285 940e 0821 	CALL SUBOPT_0x1A
000287 940e 082f 	CALL SUBOPT_0x1C
000289 f019      	BREQ _0x48
                 ; 0000 0120         {
                 ; 0000 0121             while (PINA .2 == 0)
                 _0x49:
00028a 9bca      	SBIS 0x19,2
                 ; 0000 0122                 ;
00028b cffe      	RJMP _0x49
                 ; 0000 0123             in_out_search();
00028c d098      	RCALL _in_out_search
                 ; 0000 0124         }
                 ; 0000 0125 
                 ; 0000 0126         // choose reserve
                 ; 0000 0127         if (PINA .2 == 0 & choice == 2)
                 _0x48:
00028d 940e 0821 	CALL SUBOPT_0x1A
00028f 940e 0834 	CALL SUBOPT_0x1D
000291 f019      	BREQ _0x4C
                 ; 0000 0128         {
                 ; 0000 0129             while (PINA .2 == 0)
                 _0x4D:
000292 9bca      	SBIS 0x19,2
                 ; 0000 012A                 ;
000293 cffe      	RJMP _0x4D
                 ; 0000 012B             reserve_park();
000294 d16b      	RCALL _reserve_park
                 ; 0000 012C         }
                 ; 0000 012D 
                 ; 0000 012E         // choose set date
                 ; 0000 012F         if (PINA .2 == 0 & choice == 3)
                 _0x4C:
000295 940e 0821 	CALL SUBOPT_0x1A
000297 e0e3      	LDI  R30,LOW(3)
000298 940e 08eb 	CALL __EQB12
00029a 21e0      	AND  R30,R0
00029b f019      	BREQ _0x50
                 ; 0000 0130         {
                 ; 0000 0131             while (PINA .2 == 0)
                 _0x51:
00029c 9bca      	SBIS 0x19,2
                 ; 0000 0132                 ;
00029d cffe      	RJMP _0x51
                 ; 0000 0133             set_date();
00029e d193      	RCALL _set_date
                 ; 0000 0134         }
                 ; 0000 0135 
                 ; 0000 0136         delay_ms(25);
                 _0x50:
00029f 940e 081d 	CALL SUBOPT_0x19
                 ; 0000 0137     }
0002a1 cfad      	RJMP _0x34
                 ; 0000 0138 }
                 _0x2080008:
0002a2 9119      	LD   R17,Y+
0002a3 9508      	RET
                 ; .FEND
                 ;
                 ;// Time setting
                 ;char set_time(void)
                 ; 0000 013C {
                 _set_time:
                 ; .FSTART _set_time
0002a4 92ff      	PUSH R15
                 ; 0000 013D     bit choice = 0;
                 ; 0000 013E     char line[17];
                 ; 0000 013F     while (1)
0002a5 9761      	SBIW R28,17
                 ;	choice -> R15.0
                 ;	line -> Y+0
0002a6 24ff      	CLR  R15
                 _0x54:
                 ; 0000 0140     {
                 ; 0000 0141         if (choice == 0)
0002a7 fcf0      	SBRC R15,0
0002a8 c00a      	RJMP _0x57
                 ; 0000 0142         {
                 ; 0000 0143             sprintf(line, "Set min=%d  >", minute);
0002a9 940e 0802 	CALL SUBOPT_0x15
                +
0002ab efe0     +LDI R30 , LOW ( 2 * _0x0 + ( 114 ) )
0002ac e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 114 ) )
                 	__POINTW1FN _0x0,114
0002ad 93fa      	ST   -Y,R31
0002ae 93ea      	ST   -Y,R30
0002af 940e 0811 	CALL SUBOPT_0x17
0002b1 940e 0839 	CALL SUBOPT_0x1E
                 ; 0000 0144             lcd_clear();
                 ; 0000 0145             lcd_puts(line);
                 ; 0000 0146         }
                 ; 0000 0147 
                 ; 0000 0148         if (choice == 1)
                 _0x57:
0002b3 fef0      	SBRS R15,0
0002b4 c008      	RJMP _0x58
                 ; 0000 0149         {
                 ; 0000 014A             sprintf(line, "Set hour=%d  >", hour);
0002b5 940e 0802 	CALL SUBOPT_0x15
                +
0002b7 efee     +LDI R30 , LOW ( 2 * _0x0 + ( 128 ) )
0002b8 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 128 ) )
                 	__POINTW1FN _0x0,128
0002b9 940e 0806 	CALL SUBOPT_0x16
0002bb 940e 0839 	CALL SUBOPT_0x1E
                 ; 0000 014B             lcd_clear();
                 ; 0000 014C             lcd_puts(line);
                 ; 0000 014D         }
                 ; 0000 014E 
                 ; 0000 014F         if (PINA .1 == 0 & choice == 0)
                 _0x58:
0002bd 940e 0840 	CALL SUBOPT_0x1F
0002bf 940e 082a 	CALL SUBOPT_0x1B
0002c1 f069      	BREQ _0x59
                 ; 0000 0150         { // UP     min
                 ; 0000 0151             while (PINA .1 == 0)
                 _0x5A:
0002c2 9bc9      	SBIS 0x19,1
                 ; 0000 0152                 ;
0002c3 cffe      	RJMP _0x5A
                 ; 0000 0153             minute++;
0002c4 940e 0763 	CALL SUBOPT_0x2
                 ; 0000 0154             if (minute > 59)
0002c6 940e 0759 	CALL SUBOPT_0x0
0002c8 97dc      	SBIW R26,60
0002c9 f028      	BRLO _0x5D
                 ; 0000 0155                 minute = 0;
0002ca e0e0      	LDI  R30,LOW(0)
0002cb 93e0 02f8 	STS  _minute,R30
0002cd 93e0 02f9 	STS  _minute+1,R30
                 ; 0000 0156         }
                 _0x5D:
                 ; 0000 0157 
                 ; 0000 0158         if (PINA .0 == 0 & choice == 0)
                 _0x59:
0002cf 940e 084b 	CALL SUBOPT_0x20
0002d1 940e 082a 	CALL SUBOPT_0x1B
0002d3 f099      	BREQ _0x5E
                 ; 0000 0159         { // DOWN    min
                 ; 0000 015A             while (PINA .0 == 0)
                 _0x5F:
0002d4 9bc8      	SBIS 0x19,0
                 ; 0000 015B                 ;
0002d5 cffe      	RJMP _0x5F
                 ; 0000 015C             if (minute == 0)
0002d6 91e0 02f8 	LDS  R30,_minute
0002d8 91f0 02f9 	LDS  R31,_minute+1
0002da 9730      	SBIW R30,0
0002db f439      	BRNE _0x62
                 ; 0000 015D                 minute = 59;
0002dc e3eb      	LDI  R30,LOW(59)
0002dd e0f0      	LDI  R31,HIGH(59)
0002de 93e0 02f8 	STS  _minute,R30
0002e0 93f0 02f9 	STS  _minute+1,R31
                 ; 0000 015E             else
0002e2 c004      	RJMP _0x63
                 _0x62:
                 ; 0000 015F                 minute--;
0002e3 efa8      	LDI  R26,LOW(_minute)
0002e4 e0b2      	LDI  R27,HIGH(_minute)
0002e5 940e 0856 	CALL SUBOPT_0x21
                 ; 0000 0160         }
                 _0x63:
                 ; 0000 0161 
                 ; 0000 0162         if (PINA .1 == 0 & choice == 1)
                 _0x5E:
0002e7 940e 0840 	CALL SUBOPT_0x1F
0002e9 940e 082f 	CALL SUBOPT_0x1C
0002eb f079      	BREQ _0x64
                 ; 0000 0163         { // UP    hour
                 ; 0000 0164             while (PINA .1 == 0)
                 _0x65:
0002ec 9bc9      	SBIS 0x19,1
                 ; 0000 0165                 ;
0002ed cffe      	RJMP _0x65
                 ; 0000 0166             hour++;
0002ee efaa      	LDI  R26,LOW(_hour)
0002ef e0b2      	LDI  R27,HIGH(_hour)
0002f0 940e 085c 	CALL SUBOPT_0x22
                 ; 0000 0167             if (hour > 23)
0002f2 940e 075e 	CALL SUBOPT_0x1
0002f4 9758      	SBIW R26,24
0002f5 f028      	BRLO _0x68
                 ; 0000 0168                 hour = 0;
0002f6 e0e0      	LDI  R30,LOW(0)
0002f7 93e0 02fa 	STS  _hour,R30
0002f9 93e0 02fb 	STS  _hour+1,R30
                 ; 0000 0169         }
                 _0x68:
                 ; 0000 016A 
                 ; 0000 016B         if (PINA .0 == 0 & choice == 1)
                 _0x64:
0002fb 940e 084b 	CALL SUBOPT_0x20
0002fd 940e 082f 	CALL SUBOPT_0x1C
0002ff f099      	BREQ _0x69
                 ; 0000 016C         { // DOWN    hour
                 ; 0000 016D             while (PINA .0 == 0)
                 _0x6A:
000300 9bc8      	SBIS 0x19,0
                 ; 0000 016E                 ;
000301 cffe      	RJMP _0x6A
                 ; 0000 016F             if (hour == 0)
000302 91e0 02fa 	LDS  R30,_hour
000304 91f0 02fb 	LDS  R31,_hour+1
000306 9730      	SBIW R30,0
000307 f439      	BRNE _0x6D
                 ; 0000 0170                 hour = 23;
000308 e1e7      	LDI  R30,LOW(23)
000309 e0f0      	LDI  R31,HIGH(23)
00030a 93e0 02fa 	STS  _hour,R30
00030c 93f0 02fb 	STS  _hour+1,R31
                 ; 0000 0171             else
00030e c004      	RJMP _0x6E
                 _0x6D:
                 ; 0000 0172                 hour--;
00030f efaa      	LDI  R26,LOW(_hour)
000310 e0b2      	LDI  R27,HIGH(_hour)
000311 940e 0856 	CALL SUBOPT_0x21
                 ; 0000 0173         }
                 _0x6E:
                 ; 0000 0174 
                 ; 0000 0175         if (PINA .3 == 0)
                 _0x69:
000313 99cb      	SBIC 0x19,3
000314 c004      	RJMP _0x6F
                 ; 0000 0176         { // NEXT
                 ; 0000 0177             while (PINA .3 == 0)
                 _0x70:
000315 9bcb      	SBIS 0x19,3
                 ; 0000 0178                 ;
000316 cffe      	RJMP _0x70
                 ; 0000 0179             choice = !choice;
000317 e0e1      	LDI  R30,LOW(1)
000318 26fe      	EOR  R15,R30
                 ; 0000 017A         }
                 ; 0000 017B 
                 ; 0000 017C         if (PINA .4 == 0)
                 _0x6F:
000319 99cc      	SBIC 0x19,4
00031a c004      	RJMP _0x73
                 ; 0000 017D         { // Back
                 ; 0000 017E             while (PINA .4 == 0)
                 _0x74:
00031b 9bcc      	SBIS 0x19,4
                 ; 0000 017F                 ;
00031c cffe      	RJMP _0x74
                 ; 0000 0180             return 0;
00031d e0e0      	LDI  R30,LOW(0)
00031e c003      	RJMP _0x2080007
                 ; 0000 0181         }
                 ; 0000 0182 
                 ; 0000 0183         delay_ms(25);
                 _0x73:
00031f 940e 081d 	CALL SUBOPT_0x19
                 ; 0000 0184     }
000321 cf85      	RJMP _0x54
                 ; 0000 0185 }
                 _0x2080007:
000322 9661      	ADIW R28,17
000323 90ff      	POP  R15
000324 9508      	RET
                 ; .FEND
                 ;
                 ;// IN&OUT Search
                 ;char in_out_search(void)
                 ; 0000 0189 {
                 _in_out_search:
                 ; .FSTART _in_out_search
                 ; 0000 018A     char line[17], line2[17];
                 ; 0000 018B     int temp_year = year, temp_month = month, temp_day = day;
                 ; 0000 018C     int temp_day_index = day_index;
                 ; 0000 018D 
                 ; 0000 018E     while (1)
000325 97a4      	SBIW R28,36
000326 940e 0903 	CALL __SAVELOCR6
                 ;	line -> Y+25
                 ;	line2 -> Y+8
                 ;	temp_year -> R16,R17
                 ;	temp_month -> R18,R19
                 ;	temp_day -> R20,R21
                 ;	temp_day_index -> Y+6
                +
000328 9100 0300+LDS R16 , 0 + ( _year )
00032a 9110 0301+LDS R17 , 0 + ( _year ) + 1
                 	__GETWRMN 16,17,0,_year
                +
00032c 9120 02fe+LDS R18 , 0 + ( _month )
00032e 9130 02ff+LDS R19 , 0 + ( _month ) + 1
                 	__GETWRMN 18,19,0,_month
                +
000330 9140 02fc+LDS R20 , 0 + ( _day )
000332 9150 02fd+LDS R21 , 0 + ( _day ) + 1
                 	__GETWRMN 20,21,0,_day
000334 2de9      	MOV  R30,R9
000335 e0f0      	LDI  R31,0
000336 83ee      	STD  Y+6,R30
000337 83ff      	STD  Y+6+1,R31
                 _0x77:
                 ; 0000 018F     {
                 ; 0000 0190         // UP
                 ; 0000 0191         if (PINA .1 == 0)
000338 99c9      	SBIC 0x19,1
000339 c03b      	RJMP _0x7A
                 ; 0000 0192         {
                 ; 0000 0193             while (PINA .1 == 0)
                 _0x7B:
00033a 9bc9      	SBIS 0x19,1
                 ; 0000 0194                 ;
00033b cffe      	RJMP _0x7B
                 ; 0000 0195             if (temp_day_index == 30)
00033c 81ae      	LDD  R26,Y+6
00033d 81bf      	LDD  R27,Y+6+1
00033e 975e      	SBIW R26,30
00033f f449      	BRNE _0x7E
                 ; 0000 0196             {
                 ; 0000 0197                 lcd_clear();
000340 940e 06c7 	CALL _lcd_clear
                 ; 0000 0198                 lcd_puts("Out of index.");
                +
000342 e6a0     +LDI R26 , LOW ( _0x7F + ( 0 ) )
000343 e0b2     +LDI R27 , HIGH ( _0x7F + ( 0 ) )
                 	__POINTW2MN _0x7F,0
000344 940e 06ee 	CALL _lcd_puts
                 ; 0000 0199                 delay_ms(300);
000346 940e 07b4 	CALL SUBOPT_0xC
                 ; 0000 019A             }
                 ; 0000 019B             else
000348 c02c      	RJMP _0x80
                 _0x7E:
                 ; 0000 019C             {
                 ; 0000 019D                 temp_day++;
                +
000349 5f4f     +SUBI R20 , LOW ( - 1 )
00034a 4f5f     +SBCI R21 , HIGH ( - 1 )
                 	__ADDWRN 20,21,1
                 ; 0000 019E                 temp_day_index++;
00034b 81ee      	LDD  R30,Y+6
00034c 81ff      	LDD  R31,Y+6+1
00034d 9631      	ADIW R30,1
00034e 83ee      	STD  Y+6,R30
00034f 83ff      	STD  Y+6+1,R31
                 ; 0000 019F 
                 ; 0000 01A0                 // logic of day, month
                 ; 0000 01A1                 if (temp_month <= 6)
                +
000350 3027     +CPI R18 , LOW ( 7 )
000351 e0e0     +LDI R30 , HIGH ( 7 )
000352 073e     +CPC R19 , R30
                 	__CPWRN 18,19,7
000353 f43c      	BRGE _0x81
                 ; 0000 01A2                 {
                 ; 0000 01A3                     if (temp_day > 31)
                +
000354 3240     +CPI R20 , LOW ( 32 )
000355 e0e0     +LDI R30 , HIGH ( 32 )
000356 075e     +CPC R21 , R30
                 	__CPWRN 20,21,32
000357 f014      	BRLT _0x82
                 ; 0000 01A4                     {
                 ; 0000 01A5                         temp_day = 1;
000358 940e 0862 	CALL SUBOPT_0x23
                 ; 0000 01A6                         temp_month++;
                 ; 0000 01A7                     }
                 ; 0000 01A8                 }
                 _0x82:
                 ; 0000 01A9                 else
00035a c012      	RJMP _0x83
                 _0x81:
                 ; 0000 01AA                 {
                 ; 0000 01AB                     if (temp_month == 12)
00035b e0ec      	LDI  R30,LOW(12)
00035c e0f0      	LDI  R31,HIGH(12)
00035d 17e2      	CP   R30,R18
00035e 07f3      	CPC  R31,R19
00035f f439      	BRNE _0x84
                 ; 0000 01AC                     {
                 ; 0000 01AD                         if (temp_day > 29)
                +
000360 314e     +CPI R20 , LOW ( 30 )
000361 e0e0     +LDI R30 , HIGH ( 30 )
000362 075e     +CPC R21 , R30
                 	__CPWRN 20,21,30
000363 f014      	BRLT _0x85
                 ; 0000 01AE                         {
                 ; 0000 01AF                             temp_day = 1;
000364 940e 0862 	CALL SUBOPT_0x23
                 ; 0000 01B0                             temp_month++;
                 ; 0000 01B1                         }
                 ; 0000 01B2                     }
                 _0x85:
                 ; 0000 01B3                     else
000366 c006      	RJMP _0x86
                 _0x84:
                 ; 0000 01B4                     {
                 ; 0000 01B5                         if (temp_day > 30)
                +
000367 314f     +CPI R20 , LOW ( 31 )
000368 e0e0     +LDI R30 , HIGH ( 31 )
000369 075e     +CPC R21 , R30
                 	__CPWRN 20,21,31
00036a f014      	BRLT _0x87
                 ; 0000 01B6                         {
                 ; 0000 01B7                             temp_day = 1;
00036b 940e 0862 	CALL SUBOPT_0x23
                 ; 0000 01B8                             temp_month++;
                 ; 0000 01B9                         }
                 ; 0000 01BA                     }
                 _0x87:
                 _0x86:
                 ; 0000 01BB                 }
                 _0x83:
                 ; 0000 01BC 
                 ; 0000 01BD                 // logic of year
                 ; 0000 01BE                 if (temp_month > 12)
                +
00036d 302d     +CPI R18 , LOW ( 13 )
00036e e0e0     +LDI R30 , HIGH ( 13 )
00036f 073e     +CPC R19 , R30
                 	__CPWRN 18,19,13
000370 f024      	BRLT _0x88
                 ; 0000 01BF                 {
                 ; 0000 01C0                     temp_month = 1;
                +
000371 e021     +LDI R18 , LOW ( 1 )
000372 e030     +LDI R19 , HIGH ( 1 )
                 	__GETWRN 18,19,1
                 ; 0000 01C1                     temp_year++;
                +
000373 5f0f     +SUBI R16 , LOW ( - 1 )
000374 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
                 ; 0000 01C2                 }
                 ; 0000 01C3             }
                 _0x88:
                 _0x80:
                 ; 0000 01C4         }
                 ; 0000 01C5 
                 ; 0000 01C6         // DOWN
                 ; 0000 01C7         if (PINA .0 == 0)
                 _0x7A:
000375 99c8      	SBIC 0x19,0
000376 c043      	RJMP _0x89
                 ; 0000 01C8         {
                 ; 0000 01C9             while (PINA .0 == 0)
                 _0x8A:
000377 9bc8      	SBIS 0x19,0
                 ; 0000 01CA                 ;
000378 cffe      	RJMP _0x8A
                 ; 0000 01CB 
                 ; 0000 01CC             if (temp_day_index == 0)
000379 81ee      	LDD  R30,Y+6
00037a 81ff      	LDD  R31,Y+6+1
00037b 9730      	SBIW R30,0
00037c f449      	BRNE _0x8D
                 ; 0000 01CD             {
                 ; 0000 01CE                 lcd_clear();
00037d 940e 06c7 	CALL _lcd_clear
                 ; 0000 01CF                 lcd_puts("Out of index.");
                +
00037f e6ae     +LDI R26 , LOW ( _0x7F + ( 14 ) )
000380 e0b2     +LDI R27 , HIGH ( _0x7F + ( 14 ) )
                 	__POINTW2MN _0x7F,14
000381 940e 06ee 	CALL _lcd_puts
                 ; 0000 01D0                 delay_ms(300);
000383 940e 07b4 	CALL SUBOPT_0xC
                 ; 0000 01D1             }
                 ; 0000 01D2             else
000385 c034      	RJMP _0x8E
                 _0x8D:
                 ; 0000 01D3             {
                 ; 0000 01D4                 temp_day_index--;
000386 81ee      	LDD  R30,Y+6
000387 81ff      	LDD  R31,Y+6+1
000388 9731      	SBIW R30,1
000389 83ee      	STD  Y+6,R30
00038a 83ff      	STD  Y+6+1,R31
                 ; 0000 01D5                 if (temp_day == 1)
00038b e0e1      	LDI  R30,LOW(1)
00038c e0f0      	LDI  R31,HIGH(1)
00038d 17e4      	CP   R30,R20
00038e 07f5      	CPC  R31,R21
00038f f541      	BRNE _0x8F
                 ; 0000 01D6                 {
                 ; 0000 01D7                     if (temp_month == 1)
000390 17e2      	CP   R30,R18
000391 07f3      	CPC  R31,R19
000392 f429      	BRNE _0x90
                 ; 0000 01D8                     {
                 ; 0000 01D9                         temp_month = 12;
                +
000393 e02c     +LDI R18 , LOW ( 12 )
000394 e030     +LDI R19 , HIGH ( 12 )
                 	__GETWRN 18,19,12
                 ; 0000 01DA                         temp_year--;
                +
000395 5001     +SUBI R16 , LOW ( 1 )
000396 4010     +SBCI R17 , HIGH ( 1 )
                 	__SUBWRN 16,17,1
                 ; 0000 01DB                     }
                 ; 0000 01DC                     else
000397 c002      	RJMP _0x91
                 _0x90:
                 ; 0000 01DD                         temp_month--;
                +
000398 5021     +SUBI R18 , LOW ( 1 )
000399 4030     +SBCI R19 , HIGH ( 1 )
                 	__SUBWRN 18,19,1
                 ; 0000 01DE 
                 ; 0000 01DF                     if (1 <= temp_month && temp_month <= 6)
                 _0x91:
                +
00039a 3021     +CPI R18 , LOW ( 1 )
00039b e0e0     +LDI R30 , HIGH ( 1 )
00039c 073e     +CPC R19 , R30
                 	__CPWRN 18,19,1
00039d f024      	BRLT _0x93
                +
00039e 3027     +CPI R18 , LOW ( 7 )
00039f e0e0     +LDI R30 , HIGH ( 7 )
0003a0 073e     +CPC R19 , R30
                 	__CPWRN 18,19,7
0003a1 f00c      	BRLT _0x94
                 _0x93:
0003a2 c002      	RJMP _0x92
                 _0x94:
                 ; 0000 01E0                         temp_day = 31;
                +
0003a3 e14f     +LDI R20 , LOW ( 31 )
0003a4 e050     +LDI R21 , HIGH ( 31 )
                 	__GETWRN 20,21,31
                 ; 0000 01E1                     if (7 <= temp_month && temp_month <= 11)
                 _0x92:
                +
0003a5 3027     +CPI R18 , LOW ( 7 )
0003a6 e0e0     +LDI R30 , HIGH ( 7 )
0003a7 073e     +CPC R19 , R30
                 	__CPWRN 18,19,7
0003a8 f024      	BRLT _0x96
                +
0003a9 302c     +CPI R18 , LOW ( 12 )
0003aa e0e0     +LDI R30 , HIGH ( 12 )
0003ab 073e     +CPC R19 , R30
                 	__CPWRN 18,19,12
0003ac f00c      	BRLT _0x97
                 _0x96:
0003ad c002      	RJMP _0x95
                 _0x97:
                 ; 0000 01E2                         temp_day = 30;
                +
0003ae e14e     +LDI R20 , LOW ( 30 )
0003af e050     +LDI R21 , HIGH ( 30 )
                 	__GETWRN 20,21,30
                 ; 0000 01E3                     if (temp_month == 12)
                 _0x95:
0003b0 e0ec      	LDI  R30,LOW(12)
0003b1 e0f0      	LDI  R31,HIGH(12)
0003b2 17e2      	CP   R30,R18
0003b3 07f3      	CPC  R31,R19
0003b4 f411      	BRNE _0x98
                 ; 0000 01E4                         temp_day = 29;
                +
0003b5 e14d     +LDI R20 , LOW ( 29 )
0003b6 e050     +LDI R21 , HIGH ( 29 )
                 	__GETWRN 20,21,29
                 ; 0000 01E5                 }
                 _0x98:
                 ; 0000 01E6                 else
0003b7 c002      	RJMP _0x99
                 _0x8F:
                 ; 0000 01E7                     temp_day--;
                +
0003b8 5041     +SUBI R20 , LOW ( 1 )
0003b9 4050     +SBCI R21 , HIGH ( 1 )
                 	__SUBWRN 20,21,1
                 ; 0000 01E8             }
                 _0x99:
                 _0x8E:
                 ; 0000 01E9         }
                 ; 0000 01EA 
                 ; 0000 01EB         sprintf(line, "%d/%d/%d", temp_year, temp_month, temp_day);
                 _0x89:
0003ba 01fe      	MOVW R30,R28
0003bb 9679      	ADIW R30,25
0003bc 93fa      	ST   -Y,R31
0003bd 93ea      	ST   -Y,R30
                +
0003be e9ea     +LDI R30 , LOW ( 2 * _0x0 + ( 28 ) )
0003bf e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 28 ) )
                 	__POINTW1FN _0x0,28
0003c0 93fa      	ST   -Y,R31
0003c1 93ea      	ST   -Y,R30
0003c2 01f8      	MOVW R30,R16
0003c3 940e 0867 	CALL SUBOPT_0x24
0003c5 01f9      	MOVW R30,R18
0003c6 940e 0867 	CALL SUBOPT_0x24
0003c8 01fa      	MOVW R30,R20
0003c9 940e 0867 	CALL SUBOPT_0x24
0003cb e08c      	LDI  R24,12
0003cc 940e 0653 	CALL _sprintf
0003ce 9660      	ADIW R28,16
                 ; 0000 01EC         sprintf(line2, "in=%d out=%d %d %d", enter_array[temp_day_index], exit_array[temp_day_index]);
0003cf 01fe      	MOVW R30,R28
0003d0 9638      	ADIW R30,8
0003d1 93fa      	ST   -Y,R31
0003d2 93ea      	ST   -Y,R30
                +
0003d3 e1eb     +LDI R30 , LOW ( 2 * _0x0 + ( 157 ) )
0003d4 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 157 ) )
                 	__POINTW1FN _0x0,157
0003d5 93fa      	ST   -Y,R31
0003d6 93ea      	ST   -Y,R30
0003d7 85ea      	LDD  R30,Y+10
0003d8 85fb      	LDD  R31,Y+10+1
0003d9 e7ac      	LDI  R26,LOW(_enter_array)
0003da e0b2      	LDI  R27,HIGH(_enter_array)
0003db 940e 086c 	CALL SUBOPT_0x25
0003dd 85ee      	LDD  R30,Y+14
0003de 85ff      	LDD  R31,Y+14+1
0003df ebaa      	LDI  R26,LOW(_exit_array)
0003e0 e0b2      	LDI  R27,HIGH(_exit_array)
0003e1 940e 086c 	CALL SUBOPT_0x25
0003e3 e088      	LDI  R24,8
0003e4 940e 0653 	CALL _sprintf
0003e6 962c      	ADIW R28,12
                 ; 0000 01ED 
                 ; 0000 01EE         lcd_clear();
0003e7 940e 06c7 	CALL _lcd_clear
                 ; 0000 01EF         lcd_puts(line);
0003e9 01de      	MOVW R26,R28
0003ea 9659      	ADIW R26,25
0003eb 940e 06ee 	CALL _lcd_puts
                 ; 0000 01F0         lcd_gotoxy(0, 1);
0003ed 940e 07af 	CALL SUBOPT_0xB
                 ; 0000 01F1         lcd_puts(line2);
0003ef 01de      	MOVW R26,R28
0003f0 9618      	ADIW R26,8
0003f1 940e 06ee 	CALL _lcd_puts
                 ; 0000 01F2 
                 ; 0000 01F3         // Back
                 ; 0000 01F4         if (PINA .4 == 0)
0003f3 99cc      	SBIC 0x19,4
0003f4 c004      	RJMP _0x9A
                 ; 0000 01F5         {
                 ; 0000 01F6             while (PINA .4 == 0)
                 _0x9B:
0003f5 9bcc      	SBIS 0x19,4
                 ; 0000 01F7                 ;
0003f6 cffe      	RJMP _0x9B
                 ; 0000 01F8             return 0;
0003f7 e0e0      	LDI  R30,LOW(0)
0003f8 c003      	RJMP _0x2080006
                 ; 0000 01F9         }
                 ; 0000 01FA         delay_ms(25);
                 _0x9A:
0003f9 940e 081d 	CALL SUBOPT_0x19
                 ; 0000 01FB     }
0003fb cf3c      	RJMP _0x77
                 ; 0000 01FC }
                 _0x2080006:
0003fc 940e 090a 	CALL __LOADLOCR6
0003fe 96aa      	ADIW R28,42
0003ff 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0x7F:
000260           	.BYTE 0x1C
                 ;
                 ;// reserve_park
                 ;char reserve_park(void)
                 ; 0000 0200 {
                 
                 	.CSEG
                 _reserve_park:
                 ; .FSTART _reserve_park
                 ; 0000 0201     char line[17];
                 ; 0000 0202 
                 ; 0000 0203     while (1)
000400 9761      	SBIW R28,17
                 ;	line -> Y+0
                 _0x9E:
                 ; 0000 0204     {
                 ; 0000 0205         sprintf(line, "Reserved=%d", reserved);
000401 940e 0802 	CALL SUBOPT_0x15
                +
000403 e2ee     +LDI R30 , LOW ( 2 * _0x0 + ( 176 ) )
000404 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 176 ) )
                 	__POINTW1FN _0x0,176
000405 93fa      	ST   -Y,R31
000406 93ea      	ST   -Y,R30
000407 2deb      	MOV  R30,R11
000408 940e 07e2 	CALL SUBOPT_0x11
00040a 940e 0839 	CALL SUBOPT_0x1E
                 ; 0000 0206         lcd_clear();
                 ; 0000 0207         lcd_puts(line);
                 ; 0000 0208 
                 ; 0000 0209         if (PINA .1 == 0)
00040c 99c9      	SBIC 0x19,1
00040d c004      	RJMP _0xA1
                 ; 0000 020A         {
                 ; 0000 020B             while (PINA .1 == 0)
                 _0xA2:
00040e 9bc9      	SBIS 0x19,1
                 ; 0000 020C                 ;
00040f cffe      	RJMP _0xA2
                 ; 0000 020D             reserved++;
000410 94b3      	INC  R11
                 ; 0000 020E             capacity--;
000411 948a      	DEC  R8
                 ; 0000 020F         }
                 ; 0000 0210 
                 ; 0000 0211         if (reserved >= init_capacity)
                 _0xA1:
000412 2dab      	MOV  R26,R11
000413 e0ea      	LDI  R30,LOW(10)
000414 e0b0      	LDI  R27,0
000415 fda7      	SBRC R26,7
000416 efbf      	SER  R27
000417 e0f0      	LDI  R31,0
000418 17ae      	CP   R26,R30
000419 07bf      	CPC  R27,R31
00041a f014      	BRLT _0xA5
                 ; 0000 0212         {
                 ; 0000 0213             reserved = init_capacity - 1;
00041b e0e9      	LDI  R30,LOW(9)
00041c 2ebe      	MOV  R11,R30
                 ; 0000 0214         }
                 ; 0000 0215 
                 ; 0000 0216         if (PINA .0 == 0)
                 _0xA5:
00041d 99c8      	SBIC 0x19,0
00041e c004      	RJMP _0xA6
                 ; 0000 0217         {
                 ; 0000 0218             while (PINA .0 == 0)
                 _0xA7:
00041f 9bc8      	SBIS 0x19,0
                 ; 0000 0219                 ;
000420 cffe      	RJMP _0xA7
                 ; 0000 021A             reserved--;
000421 94ba      	DEC  R11
                 ; 0000 021B             capacity++;
000422 9483      	INC  R8
                 ; 0000 021C         }
                 ; 0000 021D 
                 ; 0000 021E         if (reserved <= 0)
                 _0xA6:
000423 e0e0      	LDI  R30,LOW(0)
000424 15eb      	CP   R30,R11
000425 f00c      	BRLT _0xAA
                 ; 0000 021F         {
                 ; 0000 0220             reserved = 0;
000426 24bb      	CLR  R11
                 ; 0000 0221         }
                 ; 0000 0222 
                 ; 0000 0223         if (PINA .4 == 0)
                 _0xAA:
000427 99cc      	SBIC 0x19,4
000428 c004      	RJMP _0xAB
                 ; 0000 0224         { // Back
                 ; 0000 0225             while (PINA .4 == 0)
                 _0xAC:
000429 9bcc      	SBIS 0x19,4
                 ; 0000 0226                 ;
00042a cffe      	RJMP _0xAC
                 ; 0000 0227             return 0;
00042b e0e0      	LDI  R30,LOW(0)
00042c c003      	RJMP _0x2080005
                 ; 0000 0228         }
                 ; 0000 0229         delay_ms(25);
                 _0xAB:
00042d 940e 081d 	CALL SUBOPT_0x19
                 ; 0000 022A     }
00042f cfd1      	RJMP _0x9E
                 ; 0000 022B }
                 _0x2080005:
000430 9661      	ADIW R28,17
000431 9508      	RET
                 ; .FEND
                 ;
                 ;//// data setting
                 ;char set_date(void)
                 ; 0000 022F {
                 _set_date:
                 ; .FSTART _set_date
                 ; 0000 0230     char choice = 0;
                 ; 0000 0231     char line[17];
                 ; 0000 0232     while (1)
000432 9761      	SBIW R28,17
000433 931a      	ST   -Y,R17
                 ;	choice -> R17
                 ;	line -> Y+1
000434 e010      	LDI  R17,0
                 _0xAF:
                 ; 0000 0233     {
                 ; 0000 0234         if (choice == 1)
000435 3011      	CPI  R17,1
000436 f451      	BRNE _0xB2
                 ; 0000 0235         {
                 ; 0000 0236             sprintf(line, "Set month=%d  >", month);
000437 940e 0873 	CALL SUBOPT_0x26
                +
000439 e3ea     +LDI R30 , LOW ( 2 * _0x0 + ( 188 ) )
00043a e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 188 ) )
                 	__POINTW1FN _0x0,188
00043b 93fa      	ST   -Y,R31
00043c 93ea      	ST   -Y,R30
00043d 940e 07f0 	CALL SUBOPT_0x13
00043f 940e 0878 	CALL SUBOPT_0x27
                 ; 0000 0237             lcd_clear();
                 ; 0000 0238             lcd_puts(line);
                 ; 0000 0239         }
                 ; 0000 023A 
                 ; 0000 023B         if (choice == 0)
                 _0xB2:
000441 3010      	CPI  R17,0
000442 f451      	BRNE _0xB3
                 ; 0000 023C         {
                 ; 0000 023D             sprintf(line, "Set day=%d  >", day);
000443 940e 0873 	CALL SUBOPT_0x26
                +
000445 e4ea     +LDI R30 , LOW ( 2 * _0x0 + ( 204 ) )
000446 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 204 ) )
                 	__POINTW1FN _0x0,204
000447 93fa      	ST   -Y,R31
000448 93ea      	ST   -Y,R30
000449 940e 07f9 	CALL SUBOPT_0x14
00044b 940e 0878 	CALL SUBOPT_0x27
                 ; 0000 023E             lcd_clear();
                 ; 0000 023F             lcd_puts(line);
                 ; 0000 0240         }
                 ; 0000 0241 
                 ; 0000 0242         if (choice == 2)
                 _0xB3:
00044d 3012      	CPI  R17,2
00044e f451      	BRNE _0xB4
                 ; 0000 0243         {
                 ; 0000 0244             sprintf(line, "Set year=%d  >", year);
00044f 940e 0873 	CALL SUBOPT_0x26
                +
000451 e5e8     +LDI R30 , LOW ( 2 * _0x0 + ( 218 ) )
000452 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 218 ) )
                 	__POINTW1FN _0x0,218
000453 93fa      	ST   -Y,R31
000454 93ea      	ST   -Y,R30
000455 940e 07e7 	CALL SUBOPT_0x12
000457 940e 0878 	CALL SUBOPT_0x27
                 ; 0000 0245             lcd_clear();
                 ; 0000 0246             lcd_puts(line);
                 ; 0000 0247         }
                 ; 0000 0248 
                 ; 0000 0249         if (PINA .1 == 0 & choice == 1)
                 _0xB4:
000459 940e 0882 	CALL SUBOPT_0x28
00045b 940e 082f 	CALL SUBOPT_0x1C
00045d f061      	BREQ _0xB5
                 ; 0000 024A         { // UP     month
                 ; 0000 024B             while (PINA .1 == 0)
                 _0xB6:
00045e 9bc9      	SBIS 0x19,1
                 ; 0000 024C                 ;
00045f cffe      	RJMP _0xB6
                 ; 0000 024D             month++;
000460 efae      	LDI  R26,LOW(_month)
000461 e0b2      	LDI  R27,HIGH(_month)
000462 940e 085c 	CALL SUBOPT_0x22
                 ; 0000 024E             if (month > 12)
000464 940e 076b 	CALL SUBOPT_0x3
000466 971d      	SBIW R26,13
000467 f010      	BRLO _0xB9
                 ; 0000 024F                 month = 1;
000468 940e 0783 	CALL SUBOPT_0x6
                 ; 0000 0250         }
                 _0xB9:
                 ; 0000 0251 
                 ; 0000 0252         if (PINA .0 == 0 & choice == 1)
                 _0xB5:
00046a 940e 088b 	CALL SUBOPT_0x29
00046c 940e 082f 	CALL SUBOPT_0x1C
00046e f081      	BREQ _0xBA
                 ; 0000 0253         { // DOWN    month
                 ; 0000 0254             while (PINA .0 == 0)
                 _0xBB:
00046f 9bc8      	SBIS 0x19,0
                 ; 0000 0255                 ;
000470 cffe      	RJMP _0xBB
                 ; 0000 0256             month--;
000471 efae      	LDI  R26,LOW(_month)
000472 e0b2      	LDI  R27,HIGH(_month)
000473 940e 0856 	CALL SUBOPT_0x21
                 ; 0000 0257             if (month < 1)
000475 940e 076b 	CALL SUBOPT_0x3
000477 9711      	SBIW R26,1
000478 f430      	BRSH _0xBE
                 ; 0000 0258                 month = 12;
000479 e0ec      	LDI  R30,LOW(12)
00047a e0f0      	LDI  R31,HIGH(12)
00047b 93e0 02fe 	STS  _month,R30
00047d 93f0 02ff 	STS  _month+1,R31
                 ; 0000 0259         }
                 _0xBE:
                 ; 0000 025A 
                 ; 0000 025B         if (PINA .1 == 0 & choice == 0)
                 _0xBA:
00047f 940e 0882 	CALL SUBOPT_0x28
000481 940e 082a 	CALL SUBOPT_0x1B
000483 f091      	BREQ _0xBF
                 ; 0000 025C         { // UP    day
                 ; 0000 025D             while (PINA .1 == 0)
                 _0xC0:
000484 9bc9      	SBIS 0x19,1
                 ; 0000 025E                 ;
000485 cffe      	RJMP _0xC0
                 ; 0000 025F             day++;
000486 efac      	LDI  R26,LOW(_day)
000487 e0b2      	LDI  R27,HIGH(_day)
000488 940e 085c 	CALL SUBOPT_0x22
                 ; 0000 0260             day_index = day;
00048a 9090 02fc 	LDS  R9,_day
                 ; 0000 0261             if (day > 31)
00048c 940e 0770 	CALL SUBOPT_0x4
00048e 9790      	SBIW R26,32
00048f f030      	BRLO _0xC3
                 ; 0000 0262                 day = 1;
000490 e0e1      	LDI  R30,LOW(1)
000491 e0f0      	LDI  R31,HIGH(1)
000492 93e0 02fc 	STS  _day,R30
000494 93f0 02fd 	STS  _day+1,R31
                 ; 0000 0263         }
                 _0xC3:
                 ; 0000 0264 
                 ; 0000 0265         if (PINA .0 == 0 & choice == 0)
                 _0xBF:
000496 940e 088b 	CALL SUBOPT_0x29
000498 940e 082a 	CALL SUBOPT_0x1B
00049a f091      	BREQ _0xC4
                 ; 0000 0266         { // DOWN    day
                 ; 0000 0267             while (PINA .0 == 0)
                 _0xC5:
00049b 9bc8      	SBIS 0x19,0
                 ; 0000 0268                 ;
00049c cffe      	RJMP _0xC5
                 ; 0000 0269             day--;
00049d efac      	LDI  R26,LOW(_day)
00049e e0b2      	LDI  R27,HIGH(_day)
00049f 940e 0856 	CALL SUBOPT_0x21
                 ; 0000 026A             day_index = day;
0004a1 9090 02fc 	LDS  R9,_day
                 ; 0000 026B             if (day < 1)
0004a3 940e 0770 	CALL SUBOPT_0x4
0004a5 9711      	SBIW R26,1
0004a6 f430      	BRSH _0xC8
                 ; 0000 026C                 day = 31;
0004a7 e1ef      	LDI  R30,LOW(31)
0004a8 e0f0      	LDI  R31,HIGH(31)
0004a9 93e0 02fc 	STS  _day,R30
0004ab 93f0 02fd 	STS  _day+1,R31
                 ; 0000 026D         }
                 _0xC8:
                 ; 0000 026E 
                 ; 0000 026F         if (PINA .0 == 0 & choice == 2)
                 _0xC4:
0004ad 940e 088b 	CALL SUBOPT_0x29
0004af 940e 0834 	CALL SUBOPT_0x1D
0004b1 f099      	BREQ _0xC9
                 ; 0000 0270         { // DOWN    year
                 ; 0000 0271             while (PINA .0 == 0)
                 _0xCA:
0004b2 9bc8      	SBIS 0x19,0
                 ; 0000 0272                 ;
0004b3 cffe      	RJMP _0xCA
                 ; 0000 0273             year--;
0004b4 940e 078a 	CALL SUBOPT_0x7
0004b6 9731      	SBIW R30,1
0004b7 93fe      	ST   -X,R31
0004b8 93ee      	ST   -X,R30
                 ; 0000 0274             if (year < 1)
0004b9 91a0 0300 	LDS  R26,_year
0004bb 91b0 0301 	LDS  R27,_year+1
0004bd 9711      	SBIW R26,1
0004be f430      	BRSH _0xCD
                 ; 0000 0275                 year = 1300;
0004bf e1e4      	LDI  R30,LOW(1300)
0004c0 e0f5      	LDI  R31,HIGH(1300)
0004c1 93e0 0300 	STS  _year,R30
0004c3 93f0 0301 	STS  _year+1,R31
                 ; 0000 0276         }
                 _0xCD:
                 ; 0000 0277 
                 ; 0000 0278         if (PINA .1 == 0 & choice == 2)
                 _0xC9:
0004c5 940e 0882 	CALL SUBOPT_0x28
0004c7 940e 0834 	CALL SUBOPT_0x1D
0004c9 f039      	BREQ _0xCE
                 ; 0000 0279         { // UP    year
                 ; 0000 027A             while (PINA .1 == 0)
                 _0xCF:
0004ca 9bc9      	SBIS 0x19,1
                 ; 0000 027B                 ;
0004cb cffe      	RJMP _0xCF
                 ; 0000 027C             year++;
0004cc 940e 078a 	CALL SUBOPT_0x7
0004ce 9631      	ADIW R30,1
0004cf 93fe      	ST   -X,R31
0004d0 93ee      	ST   -X,R30
                 ; 0000 027D             // if(year>1404)
                 ; 0000 027E             // year=0;
                 ; 0000 027F         }
                 ; 0000 0280 
                 ; 0000 0281         if (PINA .3 == 0)
                 _0xCE:
0004d1 99cb      	SBIC 0x19,3
0004d2 c006      	RJMP _0xD2
                 ; 0000 0282         { // NEXT
                 ; 0000 0283             while (PINA .3 == 0)
                 _0xD3:
0004d3 9bcb      	SBIS 0x19,3
                 ; 0000 0284                 ;
0004d4 cffe      	RJMP _0xD3
                 ; 0000 0285             choice++;
0004d5 5f1f      	SUBI R17,-1
                 ; 0000 0286             if (choice >= 3)
0004d6 3013      	CPI  R17,3
0004d7 f008      	BRLO _0xD6
                 ; 0000 0287                 choice = 0;
0004d8 e010      	LDI  R17,LOW(0)
                 ; 0000 0288         }
                 _0xD6:
                 ; 0000 0289 
                 ; 0000 028A         if (PINA .4 == 0)
                 _0xD2:
0004d9 99cc      	SBIC 0x19,4
0004da c004      	RJMP _0xD7
                 ; 0000 028B         { // Back
                 ; 0000 028C             while (PINA .4 == 0)
                 _0xD8:
0004db 9bcc      	SBIS 0x19,4
                 ; 0000 028D                 ;
0004dc cffe      	RJMP _0xD8
                 ; 0000 028E             return 0;
0004dd e0e0      	LDI  R30,LOW(0)
0004de c003      	RJMP _0x2080004
                 ; 0000 028F         }
                 ; 0000 0290 
                 ; 0000 0291         delay_ms(25);
                 _0xD7:
0004df 940e 081d 	CALL SUBOPT_0x19
                 ; 0000 0292     }
0004e1 cf53      	RJMP _0xAF
                 ; 0000 0293 }
                 _0x2080004:
0004e2 8118      	LDD  R17,Y+0
0004e3 9662      	ADIW R28,18
0004e4 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G100:
                 ; .FSTART _put_buff_G100
0004e5 93ba      	ST   -Y,R27
0004e6 93aa      	ST   -Y,R26
0004e7 931a      	ST   -Y,R17
0004e8 930a      	ST   -Y,R16
0004e9 81aa      	LDD  R26,Y+2
0004ea 81bb      	LDD  R27,Y+2+1
0004eb 9612      	ADIW R26,2
0004ec 940e 08f6 	CALL __GETW1P
0004ee 9730      	SBIW R30,0
0004ef f129      	BREQ _0x2000010
0004f0 81aa      	LDD  R26,Y+2
0004f1 81bb      	LDD  R27,Y+2+1
0004f2 9614      	ADIW R26,4
0004f3 940e 08f6 	CALL __GETW1P
0004f5 018f      	MOVW R16,R30
0004f6 9730      	SBIW R30,0
0004f7 f061      	BREQ _0x2000012
                +
0004f8 3002     +CPI R16 , LOW ( 2 )
0004f9 e0e0     +LDI R30 , HIGH ( 2 )
0004fa 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
0004fb f080      	BRLO _0x2000013
0004fc 01f8      	MOVW R30,R16
0004fd 9731      	SBIW R30,1
0004fe 018f      	MOVW R16,R30
                +
0004ff 81aa     +LDD R26 , Y + 2
000500 81bb     +LDD R27 , Y + 2 + 1
000501 9614     +ADIW R26 , 4
000502 93ed     +ST X + , R30
000503 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2000012:
000504 81aa      	LDD  R26,Y+2
000505 81bb      	LDD  R27,Y+2+1
000506 9612      	ADIW R26,2
000507 940e 085c 	CALL SUBOPT_0x22
000509 9731      	SBIW R30,1
00050a 81ac      	LDD  R26,Y+4
00050b 83a0      	STD  Z+0,R26
                 _0x2000013:
00050c 81aa      	LDD  R26,Y+2
00050d 81bb      	LDD  R27,Y+2+1
00050e 940e 08f6 	CALL __GETW1P
000510 23ff      	TST  R31
000511 f012      	BRMI _0x2000014
000512 940e 085c 	CALL SUBOPT_0x22
                 _0x2000014:
000514 c006      	RJMP _0x2000015
                 _0x2000010:
000515 81aa      	LDD  R26,Y+2
000516 81bb      	LDD  R27,Y+2+1
000517 efef      	LDI  R30,LOW(65535)
000518 efff      	LDI  R31,HIGH(65535)
000519 93ed      	ST   X+,R30
00051a 93fc      	ST   X,R31
                 _0x2000015:
00051b 8119      	LDD  R17,Y+1
00051c 8108      	LDD  R16,Y+0
00051d 9625      	ADIW R28,5
00051e 9508      	RET
                 ; .FEND
                 __print_G100:
                 ; .FSTART __print_G100
00051f 93ba      	ST   -Y,R27
000520 93aa      	ST   -Y,R26
000521 9726      	SBIW R28,6
000522 940e 0903 	CALL __SAVELOCR6
000524 e010      	LDI  R17,0
000525 85ac      	LDD  R26,Y+12
000526 85bd      	LDD  R27,Y+12+1
000527 e0e0      	LDI  R30,LOW(0)
000528 e0f0      	LDI  R31,HIGH(0)
000529 93ed      	ST   X+,R30
00052a 93fc      	ST   X,R31
                 _0x2000016:
00052b 89ea      	LDD  R30,Y+18
00052c 89fb      	LDD  R31,Y+18+1
00052d 9631      	ADIW R30,1
00052e 8bea      	STD  Y+18,R30
00052f 8bfb      	STD  Y+18+1,R31
000530 9731      	SBIW R30,1
000531 91e4      	LPM  R30,Z
000532 2f2e      	MOV  R18,R30
000533 30e0      	CPI  R30,0
000534 f409      	BRNE PC+2
000535 c115      	RJMP _0x2000018
000536 2fe1      	MOV  R30,R17
000537 30e0      	CPI  R30,0
000538 f439      	BRNE _0x200001C
000539 3225      	CPI  R18,37
00053a f411      	BRNE _0x200001D
00053b e011      	LDI  R17,LOW(1)
00053c c002      	RJMP _0x200001E
                 _0x200001D:
00053d 940e 0894 	CALL SUBOPT_0x2A
                 _0x200001E:
00053f c10a      	RJMP _0x200001B
                 _0x200001C:
000540 30e1      	CPI  R30,LOW(0x1)
000541 f4a9      	BRNE _0x200001F
000542 3225      	CPI  R18,37
000543 f419      	BRNE _0x2000020
000544 940e 0894 	CALL SUBOPT_0x2A
000546 c102      	RJMP _0x20000CC
                 _0x2000020:
000547 e012      	LDI  R17,LOW(2)
000548 e040      	LDI  R20,LOW(0)
000549 e000      	LDI  R16,LOW(0)
00054a 322d      	CPI  R18,45
00054b f411      	BRNE _0x2000021
00054c e001      	LDI  R16,LOW(1)
00054d c0fc      	RJMP _0x200001B
                 _0x2000021:
00054e 322b      	CPI  R18,43
00054f f411      	BRNE _0x2000022
000550 e24b      	LDI  R20,LOW(43)
000551 c0f8      	RJMP _0x200001B
                 _0x2000022:
000552 3220      	CPI  R18,32
000553 f411      	BRNE _0x2000023
000554 e240      	LDI  R20,LOW(32)
000555 c0f4      	RJMP _0x200001B
                 _0x2000023:
000556 c002      	RJMP _0x2000024
                 _0x200001F:
000557 30e2      	CPI  R30,LOW(0x2)
000558 f439      	BRNE _0x2000025
                 _0x2000024:
000559 e050      	LDI  R21,LOW(0)
00055a e013      	LDI  R17,LOW(3)
00055b 3320      	CPI  R18,48
00055c f411      	BRNE _0x2000026
00055d 6800      	ORI  R16,LOW(128)
00055e c0eb      	RJMP _0x200001B
                 _0x2000026:
00055f c003      	RJMP _0x2000027
                 _0x2000025:
000560 30e3      	CPI  R30,LOW(0x3)
000561 f009      	BREQ PC+2
000562 c0e7      	RJMP _0x200001B
                 _0x2000027:
000563 3320      	CPI  R18,48
000564 f010      	BRLO _0x200002A
000565 332a      	CPI  R18,58
000566 f008      	BRLO _0x200002B
                 _0x200002A:
000567 c007      	RJMP _0x2000029
                 _0x200002B:
000568 e0aa      	LDI  R26,LOW(10)
000569 9f5a      	MUL  R21,R26
00056a 2d50      	MOV  R21,R0
00056b 2fe2      	MOV  R30,R18
00056c 53e0      	SUBI R30,LOW(48)
00056d 0f5e      	ADD  R21,R30
00056e c0db      	RJMP _0x200001B
                 _0x2000029:
00056f 2fe2      	MOV  R30,R18
000570 36e3      	CPI  R30,LOW(0x63)
000571 f449      	BRNE _0x200002F
000572 940e 089b 	CALL SUBOPT_0x2B
000574 89e8      	LDD  R30,Y+16
000575 89f9      	LDD  R31,Y+16+1
000576 81a4      	LDD  R26,Z+4
000577 93aa      	ST   -Y,R26
000578 940e 08a1 	CALL SUBOPT_0x2C
00057a c0ce      	RJMP _0x2000030
                 _0x200002F:
00057b 37e3      	CPI  R30,LOW(0x73)
00057c f441      	BRNE _0x2000032
00057d 940e 089b 	CALL SUBOPT_0x2B
00057f 940e 08a7 	CALL SUBOPT_0x2D
000581 940e 0740 	CALL _strlen
000583 2f1e      	MOV  R17,R30
000584 c00a      	RJMP _0x2000033
                 _0x2000032:
000585 37e0      	CPI  R30,LOW(0x70)
000586 f461      	BRNE _0x2000035
000587 940e 089b 	CALL SUBOPT_0x2B
000589 940e 08a7 	CALL SUBOPT_0x2D
00058b 940e 074c 	CALL _strlenf
00058d 2f1e      	MOV  R17,R30
00058e 6008      	ORI  R16,LOW(8)
                 _0x2000033:
00058f 6002      	ORI  R16,LOW(2)
000590 770f      	ANDI R16,LOW(127)
000591 e030      	LDI  R19,LOW(0)
000592 c034      	RJMP _0x2000036
                 _0x2000035:
000593 36e4      	CPI  R30,LOW(0x64)
000594 f011      	BREQ _0x2000039
000595 36e9      	CPI  R30,LOW(0x69)
000596 f411      	BRNE _0x200003A
                 _0x2000039:
000597 6004      	ORI  R16,LOW(4)
000598 c002      	RJMP _0x200003B
                 _0x200003A:
000599 37e5      	CPI  R30,LOW(0x75)
00059a f431      	BRNE _0x200003C
                 _0x200003B:
00059b e5e4      	LDI  R30,LOW(_tbl10_G100*2)
00059c e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
00059d 83ee      	STD  Y+6,R30
00059e 83ff      	STD  Y+6+1,R31
00059f e015      	LDI  R17,LOW(5)
0005a0 c00c      	RJMP _0x200003D
                 _0x200003C:
0005a1 35e8      	CPI  R30,LOW(0x58)
0005a2 f411      	BRNE _0x200003F
0005a3 6008      	ORI  R16,LOW(8)
0005a4 c003      	RJMP _0x2000040
                 _0x200003F:
0005a5 37e8      	CPI  R30,LOW(0x78)
0005a6 f009      	BREQ PC+2
0005a7 c0a1      	RJMP _0x2000071
                 _0x2000040:
0005a8 e5ee      	LDI  R30,LOW(_tbl16_G100*2)
0005a9 e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
0005aa 83ee      	STD  Y+6,R30
0005ab 83ff      	STD  Y+6+1,R31
0005ac e014      	LDI  R17,LOW(4)
                 _0x200003D:
0005ad ff02      	SBRS R16,2
0005ae c014      	RJMP _0x2000042
0005af 940e 089b 	CALL SUBOPT_0x2B
0005b1 940e 08b1 	CALL SUBOPT_0x2E
0005b3 85ab      	LDD  R26,Y+11
0005b4 23aa      	TST  R26
0005b5 f43a      	BRPL _0x2000043
0005b6 85ea      	LDD  R30,Y+10
0005b7 85fb      	LDD  R31,Y+10+1
0005b8 940e 08dc 	CALL __ANEGW1
0005ba 87ea      	STD  Y+10,R30
0005bb 87fb      	STD  Y+10+1,R31
0005bc e24d      	LDI  R20,LOW(45)
                 _0x2000043:
0005bd 3040      	CPI  R20,0
0005be f011      	BREQ _0x2000044
0005bf 5f1f      	SUBI R17,-LOW(1)
0005c0 c001      	RJMP _0x2000045
                 _0x2000044:
0005c1 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
0005c2 c004      	RJMP _0x2000046
                 _0x2000042:
0005c3 940e 089b 	CALL SUBOPT_0x2B
0005c5 940e 08b1 	CALL SUBOPT_0x2E
                 _0x2000046:
                 _0x2000036:
0005c7 fd00      	SBRC R16,0
0005c8 c011      	RJMP _0x2000047
                 _0x2000048:
0005c9 1715      	CP   R17,R21
0005ca f478      	BRSH _0x200004A
0005cb ff07      	SBRS R16,7
0005cc c008      	RJMP _0x200004B
0005cd ff02      	SBRS R16,2
0005ce c004      	RJMP _0x200004C
0005cf 7f0b      	ANDI R16,LOW(251)
0005d0 2f24      	MOV  R18,R20
0005d1 5011      	SUBI R17,LOW(1)
0005d2 c001      	RJMP _0x200004D
                 _0x200004C:
0005d3 e320      	LDI  R18,LOW(48)
                 _0x200004D:
0005d4 c001      	RJMP _0x200004E
                 _0x200004B:
0005d5 e220      	LDI  R18,LOW(32)
                 _0x200004E:
0005d6 940e 0894 	CALL SUBOPT_0x2A
0005d8 5051      	SUBI R21,LOW(1)
0005d9 cfef      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
0005da 2f31      	MOV  R19,R17
0005db ff01      	SBRS R16,1
0005dc c017      	RJMP _0x200004F
                 _0x2000050:
0005dd 3030      	CPI  R19,0
0005de f0a1      	BREQ _0x2000052
0005df ff03      	SBRS R16,3
0005e0 c006      	RJMP _0x2000053
0005e1 81ee      	LDD  R30,Y+6
0005e2 81ff      	LDD  R31,Y+6+1
0005e3 9125      	LPM  R18,Z+
0005e4 83ee      	STD  Y+6,R30
0005e5 83ff      	STD  Y+6+1,R31
0005e6 c005      	RJMP _0x2000054
                 _0x2000053:
0005e7 81ae      	LDD  R26,Y+6
0005e8 81bf      	LDD  R27,Y+6+1
0005e9 912d      	LD   R18,X+
0005ea 83ae      	STD  Y+6,R26
0005eb 83bf      	STD  Y+6+1,R27
                 _0x2000054:
0005ec 940e 0894 	CALL SUBOPT_0x2A
0005ee 3050      	CPI  R21,0
0005ef f009      	BREQ _0x2000055
0005f0 5051      	SUBI R21,LOW(1)
                 _0x2000055:
0005f1 5031      	SUBI R19,LOW(1)
0005f2 cfea      	RJMP _0x2000050
                 _0x2000052:
0005f3 c04b      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
0005f4 e320      	LDI  R18,LOW(48)
0005f5 81ee      	LDD  R30,Y+6
0005f6 81ff      	LDD  R31,Y+6+1
0005f7 940e 08fa 	CALL __GETW1PF
0005f9 87e8      	STD  Y+8,R30
0005fa 87f9      	STD  Y+8+1,R31
0005fb 81ee      	LDD  R30,Y+6
0005fc 81ff      	LDD  R31,Y+6+1
0005fd 9632      	ADIW R30,2
0005fe 83ee      	STD  Y+6,R30
0005ff 83ff      	STD  Y+6+1,R31
                 _0x200005A:
000600 85e8      	LDD  R30,Y+8
000601 85f9      	LDD  R31,Y+8+1
000602 85aa      	LDD  R26,Y+10
000603 85bb      	LDD  R27,Y+10+1
000604 17ae      	CP   R26,R30
000605 07bf      	CPC  R27,R31
000606 f050      	BRLO _0x200005C
000607 5f2f      	SUBI R18,-LOW(1)
000608 85a8      	LDD  R26,Y+8
000609 85b9      	LDD  R27,Y+8+1
00060a 85ea      	LDD  R30,Y+10
00060b 85fb      	LDD  R31,Y+10+1
00060c 1bea      	SUB  R30,R26
00060d 0bfb      	SBC  R31,R27
00060e 87ea      	STD  Y+10,R30
00060f 87fb      	STD  Y+10+1,R31
000610 cfef      	RJMP _0x200005A
                 _0x200005C:
000611 332a      	CPI  R18,58
000612 f028      	BRLO _0x200005D
000613 ff03      	SBRS R16,3
000614 c002      	RJMP _0x200005E
000615 5f29      	SUBI R18,-LOW(7)
000616 c001      	RJMP _0x200005F
                 _0x200005E:
000617 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
000618 fd04      	SBRC R16,4
000619 c01a      	RJMP _0x2000061
00061a 3321      	CPI  R18,49
00061b f420      	BRSH _0x2000063
00061c 85a8      	LDD  R26,Y+8
00061d 85b9      	LDD  R27,Y+8+1
00061e 9711      	SBIW R26,1
00061f f409      	BRNE _0x2000062
                 _0x2000063:
000620 c009      	RJMP _0x20000CD
                 _0x2000062:
000621 1753      	CP   R21,R19
000622 f010      	BRLO _0x2000067
000623 ff00      	SBRS R16,0
000624 c001      	RJMP _0x2000068
                 _0x2000067:
000625 c013      	RJMP _0x2000066
                 _0x2000068:
000626 e220      	LDI  R18,LOW(32)
000627 ff07      	SBRS R16,7
000628 c00b      	RJMP _0x2000069
000629 e320      	LDI  R18,LOW(48)
                 _0x20000CD:
00062a 6100      	ORI  R16,LOW(16)
00062b ff02      	SBRS R16,2
00062c c007      	RJMP _0x200006A
00062d 7f0b      	ANDI R16,LOW(251)
00062e 934a      	ST   -Y,R20
00062f 940e 08a1 	CALL SUBOPT_0x2C
000631 3050      	CPI  R21,0
000632 f009      	BREQ _0x200006B
000633 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
000634 940e 0894 	CALL SUBOPT_0x2A
000636 3050      	CPI  R21,0
000637 f009      	BREQ _0x200006C
000638 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
000639 5031      	SUBI R19,LOW(1)
00063a 85a8      	LDD  R26,Y+8
00063b 85b9      	LDD  R27,Y+8+1
00063c 9712      	SBIW R26,2
00063d f008      	BRLO _0x2000059
00063e cfb5      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
00063f ff00      	SBRS R16,0
000640 c008      	RJMP _0x200006D
                 _0x200006E:
000641 3050      	CPI  R21,0
000642 f031      	BREQ _0x2000070
000643 5051      	SUBI R21,LOW(1)
000644 e2e0      	LDI  R30,LOW(32)
000645 93ea      	ST   -Y,R30
000646 940e 08a1 	CALL SUBOPT_0x2C
000648 cff8      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000CC:
000649 e010      	LDI  R17,LOW(0)
                 _0x200001B:
00064a cee0      	RJMP _0x2000016
                 _0x2000018:
00064b 85ac      	LDD  R26,Y+12
00064c 85bd      	LDD  R27,Y+12+1
00064d 940e 08f6 	CALL __GETW1P
00064f 940e 090a 	CALL __LOADLOCR6
000651 9664      	ADIW R28,20
000652 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
000653 92ff      	PUSH R15
000654 2ef8      	MOV  R15,R24
000655 9726      	SBIW R28,6
000656 940e 0905 	CALL __SAVELOCR4
000658 940e 08b9 	CALL SUBOPT_0x2F
00065a 9730      	SBIW R30,0
00065b f419      	BRNE _0x2000072
00065c efef      	LDI  R30,LOW(65535)
00065d efff      	LDI  R31,HIGH(65535)
00065e c023      	RJMP _0x2080003
                 _0x2000072:
00065f 01de      	MOVW R26,R28
000660 9616      	ADIW R26,6
000661 940e 08d8 	CALL __ADDW2R15
000663 018d      	MOVW R16,R26
000664 940e 08b9 	CALL SUBOPT_0x2F
000666 83ee      	STD  Y+6,R30
000667 83ff      	STD  Y+6+1,R31
000668 e0e0      	LDI  R30,LOW(0)
000669 87e8      	STD  Y+8,R30
00066a 87e9      	STD  Y+8+1,R30
00066b 01de      	MOVW R26,R28
00066c 961a      	ADIW R26,10
00066d 940e 08d8 	CALL __ADDW2R15
00066f 940e 08f6 	CALL __GETW1P
000671 93fa      	ST   -Y,R31
000672 93ea      	ST   -Y,R30
000673 931a      	ST   -Y,R17
000674 930a      	ST   -Y,R16
000675 eee5      	LDI  R30,LOW(_put_buff_G100)
000676 e0f4      	LDI  R31,HIGH(_put_buff_G100)
000677 93fa      	ST   -Y,R31
000678 93ea      	ST   -Y,R30
000679 01de      	MOVW R26,R28
00067a 961a      	ADIW R26,10
00067b dea3      	RCALL __print_G100
00067c 019f      	MOVW R18,R30
00067d 81ae      	LDD  R26,Y+6
00067e 81bf      	LDD  R27,Y+6+1
00067f e0e0      	LDI  R30,LOW(0)
000680 93ec      	ST   X,R30
000681 01f9      	MOVW R30,R18
                 _0x2080003:
000682 940e 090c 	CALL __LOADLOCR4
000684 962a      	ADIW R28,10
000685 90ff      	POP  R15
000686 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G101:
                 ; .FSTART __lcd_write_nibble_G101
000687 93aa      	ST   -Y,R26
000688 81e8      	LD   R30,Y
000689 71e0      	ANDI R30,LOW(0x10)
00068a f011      	BREQ _0x2020004
00068b 9ac3      	SBI  0x18,3
00068c c001      	RJMP _0x2020005
                 _0x2020004:
00068d 98c3      	CBI  0x18,3
                 _0x2020005:
00068e 81e8      	LD   R30,Y
00068f 72e0      	ANDI R30,LOW(0x20)
000690 f011      	BREQ _0x2020006
000691 9ac4      	SBI  0x18,4
000692 c001      	RJMP _0x2020007
                 _0x2020006:
000693 98c4      	CBI  0x18,4
                 _0x2020007:
000694 81e8      	LD   R30,Y
000695 74e0      	ANDI R30,LOW(0x40)
000696 f011      	BREQ _0x2020008
000697 9ac5      	SBI  0x18,5
000698 c001      	RJMP _0x2020009
                 _0x2020008:
000699 98c5      	CBI  0x18,5
                 _0x2020009:
00069a 81e8      	LD   R30,Y
00069b 78e0      	ANDI R30,LOW(0x80)
00069c f011      	BREQ _0x202000A
00069d 9ac6      	SBI  0x18,6
00069e c001      	RJMP _0x202000B
                 _0x202000A:
00069f 98c6      	CBI  0x18,6
                 _0x202000B:
                +
0006a0 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0006a1 958a     +DEC R24
0006a2 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0006a3 9ac2      	SBI  0x18,2
                +
0006a4 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0006a5 958a     +DEC R24
0006a6 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0006a7 98c2      	CBI  0x18,2
                +
0006a8 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0006a9 958a     +DEC R24
0006aa f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0006ab c092      	RJMP _0x2080001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0006ac 93aa      	ST   -Y,R26
0006ad 81a8      	LD   R26,Y
0006ae dfd8      	RCALL __lcd_write_nibble_G101
0006af 81e8          ld    r30,y
0006b0 95e2          swap  r30
0006b1 83e8          st    y,r30
0006b2 81a8      	LD   R26,Y
0006b3 dfd3      	RCALL __lcd_write_nibble_G101
                +
0006b4 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
0006b5 958a     +DEC R24
0006b6 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
0006b7 c086      	RJMP _0x2080001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0006b8 93aa      	ST   -Y,R26
0006b9 81e8      	LD   R30,Y
0006ba e0f0      	LDI  R31,0
0006bb 5fee      	SUBI R30,LOW(-__base_y_G101)
0006bc 4ffc      	SBCI R31,HIGH(-__base_y_G101)
0006bd 81e0      	LD   R30,Z
0006be 81a9      	LDD  R26,Y+1
0006bf 0fae      	ADD  R26,R30
0006c0 dfeb      	RCALL __lcd_write_data
0006c1 80a9      	LDD  R10,Y+1
0006c2 81e8      	LD   R30,Y
0006c3 93e0 0306 	STS  __lcd_y,R30
0006c5 9622      	ADIW R28,2
0006c6 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0006c7 e0a2      	LDI  R26,LOW(2)
0006c8 940e 08c0 	CALL SUBOPT_0x30
0006ca e0ac      	LDI  R26,LOW(12)
0006cb dfe0      	RCALL __lcd_write_data
0006cc e0a1      	LDI  R26,LOW(1)
0006cd 940e 08c0 	CALL SUBOPT_0x30
0006cf e0e0      	LDI  R30,LOW(0)
0006d0 93e0 0306 	STS  __lcd_y,R30
0006d2 2eae      	MOV  R10,R30
0006d3 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
0006d4 93aa      	ST   -Y,R26
0006d5 81a8      	LD   R26,Y
0006d6 30aa      	CPI  R26,LOW(0xA)
0006d7 f021      	BREQ _0x2020011
0006d8 91e0 0307 	LDS  R30,__lcd_maxx
0006da 16ae      	CP   R10,R30
0006db f060      	BRLO _0x2020010
                 _0x2020011:
0006dc e0e0      	LDI  R30,LOW(0)
0006dd 93ea      	ST   -Y,R30
0006de 91a0 0306 	LDS  R26,__lcd_y
0006e0 5faf      	SUBI R26,-LOW(1)
0006e1 93a0 0306 	STS  __lcd_y,R26
0006e3 dfd4      	RCALL _lcd_gotoxy
0006e4 81a8      	LD   R26,Y
0006e5 30aa      	CPI  R26,LOW(0xA)
0006e6 f409      	BRNE _0x2020013
0006e7 c056      	RJMP _0x2080001
                 _0x2020013:
                 _0x2020010:
0006e8 94a3      	INC  R10
0006e9 9ac0      	SBI  0x18,0
0006ea 81a8      	LD   R26,Y
0006eb dfc0      	RCALL __lcd_write_data
0006ec 98c0      	CBI  0x18,0
0006ed c050      	RJMP _0x2080001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
0006ee 93ba      	ST   -Y,R27
0006ef 93aa      	ST   -Y,R26
0006f0 931a      	ST   -Y,R17
                 _0x2020014:
0006f1 81a9      	LDD  R26,Y+1
0006f2 81ba      	LDD  R27,Y+1+1
0006f3 91ed      	LD   R30,X+
0006f4 83a9      	STD  Y+1,R26
0006f5 83ba      	STD  Y+1+1,R27
0006f6 2f1e      	MOV  R17,R30
0006f7 30e0      	CPI  R30,0
0006f8 f019      	BREQ _0x2020016
0006f9 2fa1      	MOV  R26,R17
0006fa dfd9      	RCALL _lcd_putchar
0006fb cff5      	RJMP _0x2020014
                 _0x2020016:
0006fc c010      	RJMP _0x2080002
                 ; .FEND
                 _lcd_putsf:
                 ; .FSTART _lcd_putsf
0006fd 93ba      	ST   -Y,R27
0006fe 93aa      	ST   -Y,R26
0006ff 931a      	ST   -Y,R17
                 _0x2020017:
000700 81e9      	LDD  R30,Y+1
000701 81fa      	LDD  R31,Y+1+1
000702 9631      	ADIW R30,1
000703 83e9      	STD  Y+1,R30
000704 83fa      	STD  Y+1+1,R31
000705 9731      	SBIW R30,1
000706 91e4      	LPM  R30,Z
000707 2f1e      	MOV  R17,R30
000708 30e0      	CPI  R30,0
000709 f019      	BREQ _0x2020019
00070a 2fa1      	MOV  R26,R17
00070b dfc8      	RCALL _lcd_putchar
00070c cff3      	RJMP _0x2020017
                 _0x2020019:
                 _0x2080002:
00070d 8118      	LDD  R17,Y+0
00070e 9623      	ADIW R28,3
00070f 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000710 93aa      	ST   -Y,R26
000711 9abb      	SBI  0x17,3
000712 9abc      	SBI  0x17,4
000713 9abd      	SBI  0x17,5
000714 9abe      	SBI  0x17,6
000715 9aba      	SBI  0x17,2
000716 9ab8      	SBI  0x17,0
000717 9ab9      	SBI  0x17,1
000718 98c2      	CBI  0x18,2
000719 98c0      	CBI  0x18,0
00071a 98c1      	CBI  0x18,1
00071b 81e8      	LD   R30,Y
00071c 93e0 0307 	STS  __lcd_maxx,R30
00071e 58e0      	SUBI R30,-LOW(128)
                +
00071f 93e0 0304+STS __base_y_G101 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G101,2
000721 81e8      	LD   R30,Y
000722 54e0      	SUBI R30,-LOW(192)
                +
000723 93e0 0305+STS __base_y_G101 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G101,3
000725 e1a4      	LDI  R26,LOW(20)
000726 e0b0      	LDI  R27,0
000727 940e 08ce 	CALL _delay_ms
000729 940e 08c6 	CALL SUBOPT_0x31
00072b 940e 08c6 	CALL SUBOPT_0x31
00072d 940e 08c6 	CALL SUBOPT_0x31
00072f e2a0      	LDI  R26,LOW(32)
000730 df56      	RCALL __lcd_write_nibble_G101
                +
000731 ec88     +LDI R24 , LOW ( 200 )
000732 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000733 9701     +SBIW R24 , 1
000734 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000735 e2a8      	LDI  R26,LOW(40)
000736 df75      	RCALL __lcd_write_data
000737 e0a4      	LDI  R26,LOW(4)
000738 df73      	RCALL __lcd_write_data
000739 e8a5      	LDI  R26,LOW(133)
00073a df71      	RCALL __lcd_write_data
00073b e0a6      	LDI  R26,LOW(6)
00073c df6f      	RCALL __lcd_write_data
00073d df89      	RCALL _lcd_clear
                 _0x2080001:
00073e 9621      	ADIW R28,1
00073f 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
000740 93ba      	ST   -Y,R27
000741 93aa      	ST   -Y,R26
000742 91a9          ld   r26,y+
000743 91b9          ld   r27,y+
000744 27ee          clr  r30
000745 27ff          clr  r31
                 strlen0:
000746 916d          ld   r22,x+
000747 2366          tst  r22
000748 f011          breq strlen1
000749 9631          adiw r30,1
00074a cffb          rjmp strlen0
                 strlen1:
00074b 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
00074c 93ba      	ST   -Y,R27
00074d 93aa      	ST   -Y,R26
00074e 27aa          clr  r26
00074f 27bb          clr  r27
000750 91e9          ld   r30,y+
000751 91f9          ld   r31,y+
                 strlenf0:
000752 9005      	lpm  r0,z+
000753 2000          tst  r0
000754 f011          breq strlenf1
000755 9611          adiw r26,1
000756 cffb          rjmp strlenf0
                 strlenf1:
000757 01fd          movw r30,r26
000758 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _enter_array:
00027c           	.BYTE 0x3E
                 _exit_array:
0002ba           	.BYTE 0x3E
                 _minute:
0002f8           	.BYTE 0x2
                 _hour:
0002fa           	.BYTE 0x2
                 _day:
0002fc           	.BYTE 0x2
                 _month:
0002fe           	.BYTE 0x2
                 _year:
000300           	.BYTE 0x2
                 __base_y_G101:
000302           	.BYTE 0x4
                 __lcd_y:
000306           	.BYTE 0x1
                 __lcd_maxx:
000307           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
000759 91a0 02f8 	LDS  R26,_minute
00075b 91b0 02f9 	LDS  R27,_minute+1
00075d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1:
00075e 91a0 02fa 	LDS  R26,_hour
000760 91b0 02fb 	LDS  R27,_hour+1
000762 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x2:
000763 efa8      	LDI  R26,LOW(_minute)
000764 e0b2      	LDI  R27,HIGH(_minute)
000765 91ed      	LD   R30,X+
000766 91fd      	LD   R31,X+
000767 9631      	ADIW R30,1
000768 93fe      	ST   -X,R31
000769 93ee      	ST   -X,R30
00076a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x3:
00076b 91a0 02fe 	LDS  R26,_month
00076d 91b0 02ff 	LDS  R27,_month+1
00076f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x4:
000770 91a0 02fc 	LDS  R26,_day
000772 91b0 02fd 	LDS  R27,_day+1
000774 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:19 WORDS
                 SUBOPT_0x5:
000775 e0e1      	LDI  R30,LOW(1)
000776 e0f0      	LDI  R31,HIGH(1)
000777 93e0 02fc 	STS  _day,R30
000779 93f0 02fd 	STS  _day+1,R31
00077b efae      	LDI  R26,LOW(_month)
00077c e0b2      	LDI  R27,HIGH(_month)
00077d 91ed      	LD   R30,X+
00077e 91fd      	LD   R31,X+
00077f 9631      	ADIW R30,1
000780 93fe      	ST   -X,R31
000781 93ee      	ST   -X,R30
000782 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
000783 e0e1      	LDI  R30,LOW(1)
000784 e0f0      	LDI  R31,HIGH(1)
000785 93e0 02fe 	STS  _month,R30
000787 93f0 02ff 	STS  _month+1,R31
000789 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
00078a e0a0      	LDI  R26,LOW(_year)
00078b e0b3      	LDI  R27,HIGH(_year)
00078c 91ed      	LD   R30,X+
00078d 91fd      	LD   R31,X+
00078e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x8:
00078f 920a      	ST   -Y,R0
000790 921a      	ST   -Y,R1
000791 92fa      	ST   -Y,R15
000792 936a      	ST   -Y,R22
000793 937a      	ST   -Y,R23
000794 938a      	ST   -Y,R24
000795 939a      	ST   -Y,R25
000796 93aa      	ST   -Y,R26
000797 93ba      	ST   -Y,R27
000798 93ea      	ST   -Y,R30
000799 93fa      	ST   -Y,R31
00079a b7ef      	IN   R30,SREG
00079b 93ea      	ST   -Y,R30
00079c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x9:
00079d 940e 06fd 	CALL _lcd_putsf
00079f efa4      	LDI  R26,LOW(500)
0007a0 e0b1      	LDI  R27,HIGH(500)
0007a1 940c 08ce 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0xA:
0007a3 2da8      	MOV  R26,R8
0007a4 e0b0      	LDI  R27,0
0007a5 fda7      	SBRC R26,7
0007a6 efbf      	SER  R27
0007a7 2deb      	MOV  R30,R11
0007a8 e0f0      	LDI  R31,0
0007a9 fde7      	SBRC R30,7
0007aa efff      	SER  R31
0007ab 0fae      	ADD  R26,R30
0007ac 1fbf      	ADC  R27,R31
0007ad 971a      	SBIW R26,10
0007ae 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xB:
0007af e0e0      	LDI  R30,LOW(0)
0007b0 93ea      	ST   -Y,R30
0007b1 e0a1      	LDI  R26,LOW(1)
0007b2 940c 06b8 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xC:
0007b4 e2ac      	LDI  R26,LOW(300)
0007b5 e0b1      	LDI  R27,HIGH(300)
0007b6 940c 08ce 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0xD:
0007b8 dfa5      	RCALL SUBOPT_0x1
0007b9 e0e0      	LDI  R30,LOW(0)
0007ba e0f0      	LDI  R31,HIGH(0)
0007bb 940e 08f0 	CALL __EQW12
0007bd 2e0e      	MOV  R0,R30
0007be df9a      	RCALL SUBOPT_0x0
0007bf e0e0      	LDI  R30,LOW(0)
0007c0 e0f0      	LDI  R31,HIGH(0)
0007c1 940e 08f0 	CALL __EQW12
0007c3 220e      	AND  R0,R30
0007c4 01d6      	MOVW R26,R12
0007c5 e0e0      	LDI  R30,LOW(0)
0007c6 e0f0      	LDI  R31,HIGH(0)
0007c7 940e 08f0 	CALL __EQW12
0007c9 21e0      	AND  R30,R0
0007ca 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xE:
0007cb e7ac      	LDI  R26,LOW(_enter_array)
0007cc e0b2      	LDI  R27,HIGH(_enter_array)
0007cd e0f0      	LDI  R31,0
0007ce 0fee      	LSL  R30
0007cf 1fff      	ROL  R31
0007d0 0fea      	ADD  R30,R26
0007d1 1ffb      	ADC  R31,R27
0007d2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xF:
0007d3 ebaa      	LDI  R26,LOW(_exit_array)
0007d4 e0b2      	LDI  R27,HIGH(_exit_array)
0007d5 e0f0      	LDI  R31,0
0007d6 0fee      	LSL  R30
0007d7 1fff      	ROL  R31
0007d8 0fea      	ADD  R30,R26
0007d9 1ffb      	ADC  R31,R27
0007da 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x10:
0007db 940e 08f6 	CALL __GETW1P
0007dd 01d0      	MOVW R26,R0
0007de 93ed      	ST   X+,R30
0007df 93fc      	ST   X,R31
0007e0 81e8      	LD   R30,Y
0007e1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x11:
0007e2 940e 08e0 	CALL __CBD1
0007e4 940e 08fe 	CALL __PUTPARD1
0007e6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x12:
0007e7 91e0 0300 	LDS  R30,_year
0007e9 91f0 0301 	LDS  R31,_year+1
0007eb 2766      	CLR  R22
0007ec 2777      	CLR  R23
0007ed 940e 08fe 	CALL __PUTPARD1
0007ef 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x13:
0007f0 91e0 02fe 	LDS  R30,_month
0007f2 91f0 02ff 	LDS  R31,_month+1
0007f4 2766      	CLR  R22
0007f5 2777      	CLR  R23
0007f6 940e 08fe 	CALL __PUTPARD1
0007f8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x14:
0007f9 91e0 02fc 	LDS  R30,_day
0007fb 91f0 02fd 	LDS  R31,_day+1
0007fd 2766      	CLR  R22
0007fe 2777      	CLR  R23
0007ff 940e 08fe 	CALL __PUTPARD1
000801 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x15:
000802 01fe      	MOVW R30,R28
000803 93fa      	ST   -Y,R31
000804 93ea      	ST   -Y,R30
000805 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x16:
000806 93fa      	ST   -Y,R31
000807 93ea      	ST   -Y,R30
000808 91e0 02fa 	LDS  R30,_hour
00080a 91f0 02fb 	LDS  R31,_hour+1
00080c 2766      	CLR  R22
00080d 2777      	CLR  R23
00080e 940e 08fe 	CALL __PUTPARD1
000810 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x17:
000811 91e0 02f8 	LDS  R30,_minute
000813 91f0 02f9 	LDS  R31,_minute+1
000815 2766      	CLR  R22
000816 2777      	CLR  R23
000817 940e 08fe 	CALL __PUTPARD1
000819 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x18:
00081a 01de      	MOVW R26,R28
00081b 940c 06ee 	JMP  _lcd_puts
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x19:
00081d e1a9      	LDI  R26,LOW(25)
00081e e0b0      	LDI  R27,0
00081f 940c 08ce 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x1A:
000821 e0a0      	LDI  R26,0
000822 99ca      	SBIC 0x19,2
000823 e0a1      	LDI  R26,1
000824 e0e0      	LDI  R30,LOW(0)
000825 940e 08eb 	CALL __EQB12
000827 2e0e      	MOV  R0,R30
000828 2fa1      	MOV  R26,R17
000829 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1B:
00082a e0e0      	LDI  R30,LOW(0)
00082b 940e 08eb 	CALL __EQB12
00082d 21e0      	AND  R30,R0
00082e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1C:
00082f e0e1      	LDI  R30,LOW(1)
000830 940e 08eb 	CALL __EQB12
000832 21e0      	AND  R30,R0
000833 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1D:
000834 e0e2      	LDI  R30,LOW(2)
000835 940e 08eb 	CALL __EQB12
000837 21e0      	AND  R30,R0
000838 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x1E:
000839 e084      	LDI  R24,4
00083a 940e 0653 	CALL _sprintf
00083c 9628      	ADIW R28,8
00083d 940e 06c7 	CALL _lcd_clear
00083f cfda      	RJMP SUBOPT_0x18
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1F:
000840 e0a0      	LDI  R26,0
000841 99c9      	SBIC 0x19,1
000842 e0a1      	LDI  R26,1
000843 e0e0      	LDI  R30,LOW(0)
000844 940e 08eb 	CALL __EQB12
000846 2e0e      	MOV  R0,R30
000847 e0a0      	LDI  R26,0
000848 fcf0      	SBRC R15,0
000849 e0a1      	LDI  R26,1
00084a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x20:
00084b e0a0      	LDI  R26,0
00084c 99c8      	SBIC 0x19,0
00084d e0a1      	LDI  R26,1
00084e e0e0      	LDI  R30,LOW(0)
00084f 940e 08eb 	CALL __EQB12
000851 2e0e      	MOV  R0,R30
000852 e0a0      	LDI  R26,0
000853 fcf0      	SBRC R15,0
000854 e0a1      	LDI  R26,1
000855 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x21:
000856 91ed      	LD   R30,X+
000857 91fd      	LD   R31,X+
000858 9731      	SBIW R30,1
000859 93fe      	ST   -X,R31
00085a 93ee      	ST   -X,R30
00085b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x22:
00085c 91ed      	LD   R30,X+
00085d 91fd      	LD   R31,X+
00085e 9631      	ADIW R30,1
00085f 93fe      	ST   -X,R31
000860 93ee      	ST   -X,R30
000861 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x23:
                +
000862 e041     +LDI R20 , LOW ( 1 )
000863 e050     +LDI R21 , HIGH ( 1 )
                 	__GETWRN 20,21,1
                +
000864 5f2f     +SUBI R18 , LOW ( - 1 )
000865 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
000866 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x24:
000867 940e 08e6 	CALL __CWD1
000869 940e 08fe 	CALL __PUTPARD1
00086b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x25:
00086c 0fee      	LSL  R30
00086d 1fff      	ROL  R31
00086e 0fae      	ADD  R26,R30
00086f 1fbf      	ADC  R27,R31
000870 940e 08f6 	CALL __GETW1P
000872 cff4      	RJMP SUBOPT_0x24
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x26:
000873 01fe      	MOVW R30,R28
000874 9631      	ADIW R30,1
000875 93fa      	ST   -Y,R31
000876 93ea      	ST   -Y,R30
000877 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x27:
000878 e084      	LDI  R24,4
000879 940e 0653 	CALL _sprintf
00087b 9628      	ADIW R28,8
00087c 940e 06c7 	CALL _lcd_clear
00087e 01de      	MOVW R26,R28
00087f 9611      	ADIW R26,1
000880 940c 06ee 	JMP  _lcd_puts
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x28:
000882 e0a0      	LDI  R26,0
000883 99c9      	SBIC 0x19,1
000884 e0a1      	LDI  R26,1
000885 e0e0      	LDI  R30,LOW(0)
000886 940e 08eb 	CALL __EQB12
000888 2e0e      	MOV  R0,R30
000889 2fa1      	MOV  R26,R17
00088a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x29:
00088b e0a0      	LDI  R26,0
00088c 99c8      	SBIC 0x19,0
00088d e0a1      	LDI  R26,1
00088e e0e0      	LDI  R30,LOW(0)
00088f 940e 08eb 	CALL __EQB12
000891 2e0e      	MOV  R0,R30
000892 2fa1      	MOV  R26,R17
000893 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x2A:
000894 932a      	ST   -Y,R18
000895 85ad      	LDD  R26,Y+13
000896 85be      	LDD  R27,Y+13+1
000897 85ef      	LDD  R30,Y+15
000898 89f8      	LDD  R31,Y+15+1
000899 9509      	ICALL
00089a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x2B:
00089b 89e8      	LDD  R30,Y+16
00089c 89f9      	LDD  R31,Y+16+1
00089d 9734      	SBIW R30,4
00089e 8be8      	STD  Y+16,R30
00089f 8bf9      	STD  Y+16+1,R31
0008a0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2C:
0008a1 85ad      	LDD  R26,Y+13
0008a2 85be      	LDD  R27,Y+13+1
0008a3 85ef      	LDD  R30,Y+15
0008a4 89f8      	LDD  R31,Y+15+1
0008a5 9509      	ICALL
0008a6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x2D:
0008a7 89a8      	LDD  R26,Y+16
0008a8 89b9      	LDD  R27,Y+16+1
0008a9 9614      	ADIW R26,4
0008aa 940e 08f6 	CALL __GETW1P
0008ac 83ee      	STD  Y+6,R30
0008ad 83ff      	STD  Y+6+1,R31
0008ae 81ae      	LDD  R26,Y+6
0008af 81bf      	LDD  R27,Y+6+1
0008b0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x2E:
0008b1 89a8      	LDD  R26,Y+16
0008b2 89b9      	LDD  R27,Y+16+1
0008b3 9614      	ADIW R26,4
0008b4 940e 08f6 	CALL __GETW1P
0008b6 87ea      	STD  Y+10,R30
0008b7 87fb      	STD  Y+10+1,R31
0008b8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2F:
0008b9 01de      	MOVW R26,R28
0008ba 961c      	ADIW R26,12
0008bb 940e 08d8 	CALL __ADDW2R15
0008bd 940e 08f6 	CALL __GETW1P
0008bf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x30:
0008c0 940e 06ac 	CALL __lcd_write_data
0008c2 e0a3      	LDI  R26,LOW(3)
0008c3 e0b0      	LDI  R27,0
0008c4 940c 08ce 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x31:
0008c6 e3a0      	LDI  R26,LOW(48)
0008c7 940e 0687 	CALL __lcd_write_nibble_G101
                +
0008c9 ec88     +LDI R24 , LOW ( 200 )
0008ca e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0008cb 9701     +SBIW R24 , 1
0008cc f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0008cd 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0008ce 9610      	adiw r26,0
0008cf f039      	breq __delay_ms1
                 __delay_ms0:
0008d0 95a8      	wdr
                +
0008d1 ed80     +LDI R24 , LOW ( 0x7D0 )
0008d2 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0008d3 9701     +SBIW R24 , 1
0008d4 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0008d5 9711      	sbiw r26,1
0008d6 f7c9      	brne __delay_ms0
                 __delay_ms1:
0008d7 9508      	ret
                 
                 __ADDW2R15:
0008d8 2400      	CLR  R0
0008d9 0daf      	ADD  R26,R15
0008da 1db0      	ADC  R27,R0
0008db 9508      	RET
                 
                 __ANEGW1:
0008dc 95f1      	NEG  R31
0008dd 95e1      	NEG  R30
0008de 40f0      	SBCI R31,0
0008df 9508      	RET
                 
                 __CBD1:
0008e0 2ffe      	MOV  R31,R30
0008e1 0fff      	ADD  R31,R31
0008e2 0bff      	SBC  R31,R31
0008e3 2f6f      	MOV  R22,R31
0008e4 2f7f      	MOV  R23,R31
0008e5 9508      	RET
                 
                 __CWD1:
0008e6 2f6f      	MOV  R22,R31
0008e7 0f66      	ADD  R22,R22
0008e8 0b66      	SBC  R22,R22
0008e9 2f76      	MOV  R23,R22
0008ea 9508      	RET
                 
                 __EQB12:
0008eb 17ea      	CP   R30,R26
0008ec e0e1      	LDI  R30,1
0008ed f009      	BREQ __EQB12T
0008ee 27ee      	CLR  R30
                 __EQB12T:
0008ef 9508      	RET
                 
                 __EQW12:
0008f0 17ea      	CP   R30,R26
0008f1 07fb      	CPC  R31,R27
0008f2 e0e1      	LDI  R30,1
0008f3 f009      	BREQ __EQW12T
0008f4 27ee      	CLR  R30
                 __EQW12T:
0008f5 9508      	RET
                 
                 __GETW1P:
0008f6 91ed      	LD   R30,X+
0008f7 91fc      	LD   R31,X
0008f8 9711      	SBIW R26,1
0008f9 9508      	RET
                 
                 __GETW1PF:
0008fa 9005      	LPM  R0,Z+
0008fb 91f4      	LPM  R31,Z
0008fc 2de0      	MOV  R30,R0
0008fd 9508      	RET
                 
                 __PUTPARD1:
0008fe 937a      	ST   -Y,R23
0008ff 936a      	ST   -Y,R22
000900 93fa      	ST   -Y,R31
000901 93ea      	ST   -Y,R30
000902 9508      	RET
                 
                 __SAVELOCR6:
000903 935a      	ST   -Y,R21
                 __SAVELOCR5:
000904 934a      	ST   -Y,R20
                 __SAVELOCR4:
000905 933a      	ST   -Y,R19
                 __SAVELOCR3:
000906 932a      	ST   -Y,R18
                 __SAVELOCR2:
000907 931a      	ST   -Y,R17
000908 930a      	ST   -Y,R16
000909 9508      	RET
                 
                 __LOADLOCR6:
00090a 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
00090b 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
00090c 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00090d 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
00090e 8119      	LDD  R17,Y+1
00090f 8108      	LD   R16,Y
000910 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32A register use summary:
r0 :  28 r1 :   3 r2 :   6 r3 :   0 r4 :   3 r5 :   1 r6 :   3 r7 :   1 
r8 :  13 r9 :   7 r10:   4 r11:  12 r12:   6 r13:   2 r14:   0 r15:  14 
r16:  38 r17:  52 r18:  44 r19:  22 r20:  21 r21:  28 r22:  20 r23:  11 
r24:  30 r25:   7 r26: 200 r27:  91 r28:  40 r29:   1 r30: 403 r31: 162 
x  :  45 y  : 262 z  :  20 
Registers used: 33 out of 35 (94.3%)

ATmega32A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   5 add   :   9 
adiw  :  51 and   :   6 andi  :   8 asr   :   0 bclr  :   0 bld   :   4 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  40 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  19 
brlt  :  14 brmi  :   1 brne  :  49 brpl  :   1 brsh  :   7 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  : 225 
cbi   :   9 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  29 cls   :   0 clt   :   4 clv   :   0 clz   :   0 com   :   0 
cp    :  16 cpc   :  18 cpi   :  53 cpse  :   0 dec   :   8 des   :   0 
eor   :   1 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   3 inc   :   5 jmp   :  29 ld    :  60 ldd   :  90 ldi   : 275 
lds   :  34 lpm   :  16 lsl   :   5 lsr   :   0 mov   :  42 movw  :  38 
mul   :   1 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   0 
ori   :   7 out   :  19 pop   :   2 push  :   2 rcall :  22 ret   :  67 
reti  :   2 rjmp  : 146 rol   :   5 ror   :   0 sbc   :   3 sbci  :  10 
sbi   :  13 sbic  :  18 sbis  :  27 sbiw  :  51 sbr   :   0 sbrc  :   8 
sbrs  :  13 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   3 
ses   :   0 set   :   4 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    : 123 std   :  41 sts   :  30 sub   :   4 subi  :  28 swap  :   1 
tst   :   4 wdr   :   1 
Instructions used: 66 out of 116 (56.9%)

ATmega32A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x001222   4302    340   4642   32768  14.2%
[.dseg] 0x000060 0x000308      0    168    168    2048   8.2%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 16 warnings
