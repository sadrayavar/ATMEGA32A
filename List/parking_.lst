
AVRASM ver. 2.1.30  D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm Thu Feb 08 11:31:10 2024

D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1087): warning: Register r5 already defined by the .DEF directive
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1088): warning: Register r4 already defined by the .DEF directive
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1089): warning: Register r6 already defined by the .DEF directive
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1090): warning: Register r7 already defined by the .DEF directive
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1091): warning: Register r8 already defined by the .DEF directive
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1092): warning: Register r9 already defined by the .DEF directive
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1093): warning: Register r11 already defined by the .DEF directive
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1094): warning: Register r10 already defined by the .DEF directive
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1095): warning: Register r13 already defined by the .DEF directive
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1096): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Release
                 ;Chip type              : ATmega32A
                 ;Program type           : Application
                 ;Clock frequency        : 8/000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32A
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _capa=R5
                 	.DEF __res=R4
                 	.DEF _n_vurud=R6
                 	.DEF _n_vurud_msb=R7
                 	.DEF _n_khuruj=R8
                 	.DEF _n_khuruj_msb=R9
                 	.DEF _minute=R11
                 	.DEF _hour=R10
                 	.DEF _second=R13
                 	.DEF _day=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 00c7 	JMP  __RESET
000002 940c 0145 	JMP  _ext_int0_isr
000004 940c 015e 	JMP  _ext_int1_isr
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 00f6 	JMP  _timer2_ovf_isr
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
000033 0000      	.DW  0x0000
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000034 6400
000035 0000      	.DB  0x0,0x64,0x0,0x0
000036 0000
000037 3a17      	.DB  0x0,0x0,0x17,0x3A
000038 3201      	.DB  0x1,0x32
                 
                 _0x3:
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1144): warning: .cseg .db misalignment - padding zero byte
000039 0003      	.DB  0x3
                 _0x4:
00003a 0572      	.DB  0x72,0x5
                 _0x0:
00003b 654d
00003c 656c
00003d 2e63
00003e 7269      	.DB  0x4D,0x65,0x6C,0x65,0x63,0x2E,0x69,0x72
00003f 5000
000040 7261
000041 696b
000042 676e      	.DB  0x0,0x50,0x61,0x72,0x6B,0x69,0x6E,0x67
000043 4120
000044 4342
000045 0020
000046 6173      	.DB  0x20,0x41,0x42,0x43,0x20,0x0,0x73,0x61
000047 6976
000048 676e
000049 6420
00004a 7461      	.DB  0x76,0x69,0x6E,0x67,0x20,0x64,0x61,0x74
00004b 0061
00004c 3d5a
00004d 6425
00004e 2520      	.DB  0x61,0x0,0x5A,0x3D,0x25,0x64,0x20,0x25
00004f 2f64
000050 6425
000051 252f
000052 0064      	.DB  0x64,0x2F,0x25,0x64,0x2F,0x25,0x64,0x0
000053 6425
000054 253a
000055 3a64
000056 6425      	.DB  0x25,0x64,0x3A,0x25,0x64,0x3A,0x25,0x64
000057 2020
000058 3d52
000059 6425
00005a 0020      	.DB  0x20,0x20,0x52,0x3D,0x25,0x64,0x20,0x0
00005b 4620
00005c 6c75
00005d 006c
00005e 4520      	.DB  0x20,0x46,0x75,0x6C,0x6C,0x0,0x20,0x45
00005f 706d
000060 5400
000061 6d69
000062 2065      	.DB  0x6D,0x70,0x0,0x54,0x69,0x6D,0x65,0x20
000063 6553
000064 7474
000065 6e69
000066 2067      	.DB  0x53,0x65,0x74,0x74,0x69,0x6E,0x67,0x20
000067 3e3e
000068 4900
000069 264e
00006a 554f      	.DB  0x3E,0x3E,0x0,0x49,0x4E,0x26,0x4F,0x55
00006b 2054
00006c 6553
00006d 7261
00006e 6863      	.DB  0x54,0x20,0x53,0x65,0x61,0x72,0x63,0x68
00006f 3e20
000070 003e
000071 6552
000072 6573      	.DB  0x20,0x3E,0x3E,0x0,0x52,0x65,0x73,0x65
000073 7672
000074 5f65
000075 6150
000076 6b72      	.DB  0x72,0x76,0x65,0x5F,0x50,0x61,0x72,0x6B
000077 3e20
000078 003e
000079 6553
00007a 2074      	.DB  0x20,0x3E,0x3E,0x0,0x53,0x65,0x74,0x20
00007b 6164
00007c 6174
00007d 3e20
00007e 003e      	.DB  0x64,0x61,0x74,0x61,0x20,0x3E,0x3E,0x0
00007f 6553
000080 2074
000081 696d
000082 3d6e      	.DB  0x53,0x65,0x74,0x20,0x6D,0x69,0x6E,0x3D
000083 6425
000084 2020
000085 003e
000086 6553      	.DB  0x25,0x64,0x20,0x20,0x3E,0x0,0x53,0x65
000087 2074
000088 6f68
000089 7275
00008a 253d      	.DB  0x74,0x20,0x68,0x6F,0x75,0x72,0x3D,0x25
00008b 2064
00008c 3e20
00008d 2500
00008e 2f64      	.DB  0x64,0x20,0x20,0x3E,0x0,0x25,0x64,0x2F
00008f 6425
000090 252f
000091 2064
000092 6900      	.DB  0x25,0x64,0x2F,0x25,0x64,0x20,0x0,0x69
000093 3d6e
000094 6425
000095 6f20
000096 7475      	.DB  0x6E,0x3D,0x25,0x64,0x20,0x6F,0x75,0x74
000097 253d
000098 0064
000099 6552
00009a 6573      	.DB  0x3D,0x25,0x64,0x0,0x52,0x65,0x73,0x65
00009b 7672
00009c 6465
00009d 253d
00009e 0064      	.DB  0x72,0x76,0x65,0x64,0x3D,0x25,0x64,0x0
00009f 6553
0000a0 2074
0000a1 6f6d
0000a2 746e      	.DB  0x53,0x65,0x74,0x20,0x6D,0x6F,0x6E,0x74
0000a3 3d68
0000a4 6425
0000a5 2020
0000a6 003e      	.DB  0x68,0x3D,0x25,0x64,0x20,0x20,0x3E,0x0
0000a7 6553
0000a8 2074
0000a9 6164
0000aa 3d79      	.DB  0x53,0x65,0x74,0x20,0x64,0x61,0x79,0x3D
0000ab 6425
0000ac 2020
0000ad 003e
0000ae 6553      	.DB  0x25,0x64,0x20,0x20,0x3E,0x0,0x53,0x65
0000af 2074
0000b0 6579
0000b1 7261
0000b2 253d      	.DB  0x74,0x20,0x79,0x65,0x61,0x72,0x3D,0x25
0000b3 2064
0000b4 3e20
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1178): warning: .cseg .db misalignment - padding zero byte
0000b5 0000      	.DB  0x64,0x20,0x20,0x3E,0x0
                 _0x2020003:
0000b6 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
0000b7 0001      	.DW  0x01
0000b8 0002      	.DW  0x02
0000b9 0066      	.DW  __REG_BIT_VARS*2
                 
0000ba 000a      	.DW  0x0A
0000bb 0004      	.DW  0x04
0000bc 0068      	.DW  __REG_VARS*2
                 
0000bd 0001      	.DW  0x01
0000be 0260      	.DW  _month
0000bf 0072      	.DW  _0x3*2
                 
0000c0 0002      	.DW  0x02
0000c1 0261      	.DW  _year
0000c2 0074      	.DW  _0x4*2
                 
0000c3 0002      	.DW  0x02
0000c4 0263      	.DW  __base_y_G101
0000c5 016c      	.DW  _0x2020003*2
                 
                 _0xFFFFFFFF:
0000c6 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
0000c7 94f8      	CLI
0000c8 27ee      	CLR  R30
0000c9 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
0000ca e0f1      	LDI  R31,1
0000cb bff5      	OUT  MCUCR,R31
0000cc bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
0000cd e1f8      	LDI  R31,0x18
0000ce bdf1      	OUT  WDTCR,R31
0000cf bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
0000d0 e08d      	LDI  R24,(14-2)+1
0000d1 e0a2      	LDI  R26,2
0000d2 27bb      	CLR  R27
                 __CLEAR_REG:
0000d3 93ed      	ST   X+,R30
0000d4 958a      	DEC  R24
0000d5 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0000d6 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
0000d7 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
0000d8 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
0000d9 93ed      	ST   X+,R30
0000da 9701      	SBIW R24,1
0000db f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0000dc e6ee      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0000dd e0f1      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0000de 9185      	LPM  R24,Z+
0000df 9195      	LPM  R25,Z+
0000e0 9700      	SBIW R24,0
0000e1 f061      	BREQ __GLOBAL_INI_END
0000e2 91a5      	LPM  R26,Z+
0000e3 91b5      	LPM  R27,Z+
0000e4 9005      	LPM  R0,Z+
0000e5 9015      	LPM  R1,Z+
0000e6 01bf      	MOVW R22,R30
0000e7 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0000e8 9005      	LPM  R0,Z+
0000e9 920d      	ST   X+,R0
0000ea 9701      	SBIW R24,1
0000eb f7e1      	BRNE __GLOBAL_INI_LOOP
0000ec 01fb      	MOVW R30,R22
0000ed cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0000ee e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0000ef bfed      	OUT  SPL,R30
0000f0 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000f1 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000f2 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000f3 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000f4 940c 017d 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <mega32a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <stdio.h>
                 ;#include <alcd.h>
                 ;#define xtal 8000000
                 ;
                 ;// prototyping
                 ;char setting(void);
                 ;char in_out_search(void);
                 ;char time_set(void);
                 ;char reserve_park(void);
                 ;char set_data(void);
                 ;
                 ;signed char capa = 100;
                 ;signed char _res = 0;
                 ;unsigned int n_vurud, n_khuruj; // maximum  65535  mashin dar ruz
                 ;eeprom unsigned int vurud_stat[31], khuruj_stat[31];
                 ;eeprom unsigned char i;
                 ;bit _full = 0, _emp = 0;
                 ;signed char minute = 58, hour = 23, second = 50, day = 1, month = 3;
                 
                 	.DSEG
                 ;signed int year = 1394;
                 ;
                 ;interrupt[TIM2_OVF] void timer2_ovf_isr(void)
                 ; 0000 0018 {
                 
                 	.CSEG
                 _timer2_ovf_isr:
                 ; .FSTART _timer2_ovf_isr
0000f6 920a      	ST   -Y,R0
0000f7 93aa      	ST   -Y,R26
0000f8 93ba      	ST   -Y,R27
0000f9 93ea      	ST   -Y,R30
0000fa 93fa      	ST   -Y,R31
0000fb b7ef      	IN   R30,SREG
0000fc 93ea      	ST   -Y,R30
                 ; 0000 0019 
                 ; 0000 001A   if (second == 59)
0000fd e3eb      	LDI  R30,LOW(59)
0000fe 15ed      	CP   R30,R13
0000ff f471      	BRNE _0x5
                 ; 0000 001B   {
                 ; 0000 001C     second = 0;
000100 24dd      	CLR  R13
                 ; 0000 001D     if (minute == 59)
000101 15eb      	CP   R30,R11
000102 f449      	BRNE _0x6
                 ; 0000 001E     {
                 ; 0000 001F       minute = 0;
000103 24bb      	CLR  R11
                 ; 0000 0020       if (hour == 23)
000104 e1e7      	LDI  R30,LOW(23)
000105 15ea      	CP   R30,R10
000106 f419      	BRNE _0x7
                 ; 0000 0021       {
                 ; 0000 0022         hour = 0;
000107 24aa      	CLR  R10
                 ; 0000 0023         day++;
000108 94c3      	INC  R12
                 ; 0000 0024       }
                 ; 0000 0025       else
000109 c001      	RJMP _0x8
                 _0x7:
                 ; 0000 0026         hour++;
00010a 94a3      	INC  R10
                 ; 0000 0027     }
                 _0x8:
                 ; 0000 0028     else
00010b c001      	RJMP _0x9
                 _0x6:
                 ; 0000 0029       minute++;
00010c 94b3      	INC  R11
                 ; 0000 002A   }
                 _0x9:
                 ; 0000 002B   else
00010d c001      	RJMP _0xA
                 _0x5:
                 ; 0000 002C     second++;
00010e 94d3      	INC  R13
                 ; 0000 002D 
                 ; 0000 002E   if ((day > 30) & (month > 6))
                 _0xA:
00010f 2dac      	MOV  R26,R12
000110 e1ee      	LDI  R30,LOW(30)
000111 940e 0702 	CALL SUBOPT_0x0
000113 940e 0832 	CALL __GTB12
000115 21e0      	AND  R30,R0
000116 f011      	BREQ _0xB
                 ; 0000 002F   {
                 ; 0000 0030     day = 1;
000117 940e 0709 	CALL SUBOPT_0x1
                 ; 0000 0031     month++;
                 ; 0000 0032   }
                 ; 0000 0033 
                 ; 0000 0034   if ((day > 31) & (month <= 6))
                 _0xB:
000119 2dac      	MOV  R26,R12
00011a e1ef      	LDI  R30,LOW(31)
00011b 940e 0702 	CALL SUBOPT_0x0
00011d 940e 082d 	CALL __LEB12
00011f 21e0      	AND  R30,R0
000120 f011      	BREQ _0xC
                 ; 0000 0035   {
                 ; 0000 0036     day = 1;
000121 940e 0709 	CALL SUBOPT_0x1
                 ; 0000 0037     month++;
                 ; 0000 0038   }
                 ; 0000 0039 
                 ; 0000 003A   if ((day > 29) & (month == 12))
                 _0xC:
000123 2dac      	MOV  R26,R12
000124 e1ed      	LDI  R30,LOW(29)
000125 940e 0832 	CALL __GTB12
000127 2e0e      	MOV  R0,R30
000128 91a0 0260 	LDS  R26,_month
00012a e0ec      	LDI  R30,LOW(12)
00012b 940e 0828 	CALL __EQB12
00012d 21e0      	AND  R30,R0
00012e f011      	BREQ _0xD
                 ; 0000 003B   {
                 ; 0000 003C     day = 1;
00012f 940e 0709 	CALL SUBOPT_0x1
                 ; 0000 003D     month++;
                 ; 0000 003E   }
                 ; 0000 003F 
                 ; 0000 0040   if (month > 12)
                 _0xD:
000131 91a0 0260 	LDS  R26,_month
000133 30ad      	CPI  R26,LOW(0xD)
000134 f044      	BRLT _0xE
                 ; 0000 0041   {
                 ; 0000 0042     month = 1;
000135 e0e1      	LDI  R30,LOW(1)
000136 93e0 0260 	STS  _month,R30
                 ; 0000 0043     year++;
000138 940e 0711 	CALL SUBOPT_0x2
00013a 9631      	ADIW R30,1
00013b 93fe      	ST   -X,R31
00013c 93ee      	ST   -X,R30
                 ; 0000 0044   }
                 ; 0000 0045 }
                 _0xE:
00013d 91e9      	LD   R30,Y+
00013e bfef      	OUT  SREG,R30
00013f 91f9      	LD   R31,Y+
000140 91e9      	LD   R30,Y+
000141 91b9      	LD   R27,Y+
000142 91a9      	LD   R26,Y+
000143 9009      	LD   R0,Y+
000144 9518      	RETI
                 ; .FEND
                 ;
                 ;interrupt[EXT_INT0] void ext_int0_isr(void)
                 ; 0000 0048 {
                 _ext_int0_isr:
                 ; .FSTART _ext_int0_isr
000145 940e 0716 	CALL SUBOPT_0x3
                 ; 0000 0049   capa++;
000147 9453      	INC  R5
                 ; 0000 004A   n_khuruj++;
000148 01f4      	MOVW R30,R8
000149 9631      	ADIW R30,1
00014a 014f      	MOVW R8,R30
                 ; 0000 004B 
                 ; 0000 004C   if ((capa + _res) >= 100)
00014b 940e 071d 	CALL SUBOPT_0x4
00014d f02c      	BRLT _0xF
                 ; 0000 004D   {
                 ; 0000 004E     capa = 100 - _res;
00014e e6e4      	LDI  R30,LOW(100)
00014f 19e4      	SUB  R30,R4
000150 2e5e      	MOV  R5,R30
                 ; 0000 004F     _emp = 1;
000151 9468      	SET
000152 c001      	RJMP _0xC2
                 ; 0000 0050   }
                 ; 0000 0051   else
                 _0xF:
                 ; 0000 0052   {
                 ; 0000 0053     _emp = 0;
000153 94e8      	CLT
                 _0xC2:
000154 f821      	BLD  R2,1
                 ; 0000 0054   }
                 ; 0000 0055 
                 ; 0000 0056   if ((capa) <= 0)
000155 e0e0      	LDI  R30,LOW(0)
000156 15e5      	CP   R30,R5
000157 f01c      	BRLT _0x11
                 ; 0000 0057   {
                 ; 0000 0058     capa = 0;
000158 2455      	CLR  R5
                 ; 0000 0059     _full = 1;
000159 9468      	SET
00015a c001      	RJMP _0xC3
                 ; 0000 005A   }
                 ; 0000 005B   else
                 _0x11:
                 ; 0000 005C   {
                 ; 0000 005D     _full = 0;
00015b 94e8      	CLT
                 _0xC3:
00015c f820      	BLD  R2,0
                 ; 0000 005E   }
                 ; 0000 005F }
00015d c018      	RJMP _0xC6
                 ; .FEND
                 ;
                 ;interrupt[EXT_INT1] void ext_int1_isr(void)
                 ; 0000 0062 {
                 _ext_int1_isr:
                 ; .FSTART _ext_int1_isr
00015e 940e 0716 	CALL SUBOPT_0x3
                 ; 0000 0063   capa--;
000160 945a      	DEC  R5
                 ; 0000 0064   n_vurud++;
000161 01f3      	MOVW R30,R6
000162 9631      	ADIW R30,1
000163 013f      	MOVW R6,R30
                 ; 0000 0065   if ((capa) <= 0)
000164 e0e0      	LDI  R30,LOW(0)
000165 15e5      	CP   R30,R5
000166 f01c      	BRLT _0x13
                 ; 0000 0066   {
                 ; 0000 0067     capa = 0;
000167 2455      	CLR  R5
                 ; 0000 0068     _full = 1;
000168 9468      	SET
000169 c001      	RJMP _0xC4
                 ; 0000 0069   }
                 ; 0000 006A   else
                 _0x13:
                 ; 0000 006B   {
                 ; 0000 006C     _full = 0;
00016a 94e8      	CLT
                 _0xC4:
00016b f820      	BLD  R2,0
                 ; 0000 006D   }
                 ; 0000 006E 
                 ; 0000 006F   if ((capa + _res) >= 100)
00016c 940e 071d 	CALL SUBOPT_0x4
00016e f02c      	BRLT _0x15
                 ; 0000 0070   {
                 ; 0000 0071     capa = 100 - _res;
00016f e6e4      	LDI  R30,LOW(100)
000170 19e4      	SUB  R30,R4
000171 2e5e      	MOV  R5,R30
                 ; 0000 0072     _emp = 1;
000172 9468      	SET
000173 c001      	RJMP _0xC5
                 ; 0000 0073   }
                 ; 0000 0074   else
                 _0x15:
                 ; 0000 0075   {
                 ; 0000 0076     _emp = 0;
000174 94e8      	CLT
                 _0xC5:
000175 f821      	BLD  R2,1
                 ; 0000 0077   }
                 ; 0000 0078 }
                 _0xC6:
000176 91e9      	LD   R30,Y+
000177 bfef      	OUT  SREG,R30
000178 91f9      	LD   R31,Y+
000179 91e9      	LD   R30,Y+
00017a 91b9      	LD   R27,Y+
00017b 91a9      	LD   R26,Y+
00017c 9518      	RETI
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 007B {
                 _main:
                 ; .FSTART _main
                 ; 0000 007C 
                 ; 0000 007D   char buff[17], buff2[17];
                 ; 0000 007E 
                 ; 0000 007F   // GICR|=0xC0;
                 ; 0000 0080   // MCUCR=0x0A;
                 ; 0000 0081   // MCUCSR=0x00;
                 ; 0000 0082   // GIFR=0xC0;
                 ; 0000 0083 
                 ; 0000 0084   GICR |= 0xC0;
00017d 97a2      	SBIW R28,34
                 ;	buff -> Y+17
                 ;	buff2 -> Y+0
00017e b7eb      	IN   R30,0x3B
00017f 6ce0      	ORI  R30,LOW(0xC0)
000180 bfeb      	OUT  0x3B,R30
                 ; 0000 0085   MCUCR = 0x0B;
000181 e0eb      	LDI  R30,LOW(11)
000182 bfe5      	OUT  0x35,R30
                 ; 0000 0086   MCUCSR = 0x00;
000183 e0e0      	LDI  R30,LOW(0)
000184 bfe4      	OUT  0x34,R30
                 ; 0000 0087   GIFR = 0xC0;
000185 ece0      	LDI  R30,LOW(192)
000186 bfea      	OUT  0x3A,R30
                 ; 0000 0088 
                 ; 0000 0089   lcd_init(16);
000187 e1a0      	LDI  R26,LOW(16)
000188 940e 06b9 	CALL _lcd_init
                 ; 0000 008A   lcd_clear();
00018a 940e 0669 	CALL _lcd_clear
                 ; 0000 008B   lcd_putsf("Melec.ir");
                +
00018c e7a6     +LDI R26 , LOW ( 2 * _0x0 + ( 0 ) )
00018d e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW2FN _0x0,0
00018e 940e 06a6 	CALL _lcd_putsf
                 ; 0000 008C   lcd_gotoxy(0, 1);
000190 940e 072b 	CALL SUBOPT_0x5
                 ; 0000 008D   lcd_putsf("Parking ABC ");
                +
000192 e7af     +LDI R26 , LOW ( 2 * _0x0 + ( 9 ) )
000193 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 9 ) )
                 	__POINTW2FN _0x0,9
000194 940e 06a6 	CALL _lcd_putsf
                 ; 0000 008E   delay_ms(300);
000196 e2ac      	LDI  R26,LOW(300)
000197 e0b1      	LDI  R27,HIGH(300)
000198 940e 080b 	CALL _delay_ms
                 ; 0000 008F 
                 ; 0000 0090   ASSR = 0x08; // timer2
00019a e0e8      	LDI  R30,LOW(8)
00019b bde2      	OUT  0x22,R30
                 ; 0000 0091   TCCR2 = 0x05;
00019c e0e5      	LDI  R30,LOW(5)
00019d bde5      	OUT  0x25,R30
                 ; 0000 0092   TCNT2 = 0x00;
00019e e0e0      	LDI  R30,LOW(0)
00019f bde4      	OUT  0x24,R30
                 ; 0000 0093   OCR2 = 0x00;
0001a0 bde3      	OUT  0x23,R30
                 ; 0000 0094   TIMSK = 0x40;
0001a1 e4e0      	LDI  R30,LOW(64)
0001a2 bfe9      	OUT  0x39,R30
                 ; 0000 0095 
                 ; 0000 0096   PORTA = (1 << DDD0) | (1 << DDD1) | (1 << DDD2) | (1 << DDD3) | (1 << DDD4);
0001a3 e1ef      	LDI  R30,LOW(31)
0001a4 bbeb      	OUT  0x1B,R30
                 ; 0000 0097 
                 ; 0000 0098   day = i; // i in epprom
0001a5 940e 0730 	CALL SUBOPT_0x6
0001a7 2ece      	MOV  R12,R30
                 ; 0000 0099 
                 ; 0000 009A #asm("sei")
0001a8 9478      	sei
                 ; 0000 009B   capa = capa - _res;
0001a9 1854      	SUB  R5,R4
                 ; 0000 009C 
                 ; 0000 009D   while (1)
                 _0x17:
                 ; 0000 009E   {
                 ; 0000 009F 
                 ; 0000 00A0     if (PINA .2 == 0)
0001aa 99ca      	SBIC 0x19,2
0001ab c003      	RJMP _0x1A
                 ; 0000 00A1     {
                 ; 0000 00A2       while (PINA .2 == 0)
                 _0x1B:
0001ac 9bca      	SBIS 0x19,2
                 ; 0000 00A3         ;
0001ad cffe      	RJMP _0x1B
                 ; 0000 00A4       setting();
0001ae d07b      	RCALL _setting
                 ; 0000 00A5     }
                 ; 0000 00A6 
                 ; 0000 00A7     if (hour == 0 & minute == 0 & second == 0)
                 _0x1A:
0001af 940e 0735 	CALL SUBOPT_0x7
0001b1 f181      	BREQ _0x1E
                 ; 0000 00A8     { //  data will save   in 0:0:00
                 ; 0000 00A9       vurud_stat[i] = n_vurud;
0001b2 940e 0730 	CALL SUBOPT_0x6
0001b4 e0a0      	LDI  R26,LOW(_vurud_stat)
0001b5 e0b0      	LDI  R27,HIGH(_vurud_stat)
0001b6 e0f0      	LDI  R31,0
0001b7 0fee      	LSL  R30
0001b8 1fff      	ROL  R31
0001b9 0fae      	ADD  R26,R30
0001ba 1fbf      	ADC  R27,R31
0001bb 01f3      	MOVW R30,R6
0001bc 940e 0863 	CALL __EEPROMWRW
                 ; 0000 00AA       khuruj_stat[i] = n_khuruj;
0001be 940e 0730 	CALL SUBOPT_0x6
0001c0 e3ae      	LDI  R26,LOW(_khuruj_stat)
0001c1 e0b0      	LDI  R27,HIGH(_khuruj_stat)
0001c2 e0f0      	LDI  R31,0
0001c3 0fee      	LSL  R30
0001c4 1fff      	ROL  R31
0001c5 0fae      	ADD  R26,R30
0001c6 1fbf      	ADC  R27,R31
0001c7 01f4      	MOVW R30,R8
0001c8 940e 0863 	CALL __EEPROMWRW
                 ; 0000 00AB       i++;
0001ca 940e 0730 	CALL SUBOPT_0x6
0001cc 5fef      	SUBI R30,-LOW(1)
0001cd 940e 086b 	CALL __EEPROMWRB
                 ; 0000 00AC 
                 ; 0000 00AD       if (i > 30) // 30 31 29 yek mah
0001cf 940e 0730 	CALL SUBOPT_0x6
0001d1 31ef      	CPI  R30,LOW(0x1F)
0001d2 f028      	BRLO _0x1F
                 ; 0000 00AE         i = 0;
0001d3 e7ac      	LDI  R26,LOW(_i)
0001d4 e0b0      	LDI  R27,HIGH(_i)
0001d5 e0e0      	LDI  R30,LOW(0)
0001d6 940e 086b 	CALL __EEPROMWRB
                 ; 0000 00AF 
                 ; 0000 00B0       while (hour == 0 & minute == 0 & second == 0)
                 _0x1F:
                 _0x20:
0001d8 940e 0735 	CALL SUBOPT_0x7
0001da f039      	BREQ _0x22
                 ; 0000 00B1       {
                 ; 0000 00B2         lcd_clear();
0001db 940e 0669 	CALL _lcd_clear
                 ; 0000 00B3         lcd_putsf("saving data");
                +
0001dd e8ac     +LDI R26 , LOW ( 2 * _0x0 + ( 22 ) )
0001de e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 22 ) )
                 	__POINTW2FN _0x0,22
0001df 940e 06a6 	CALL _lcd_putsf
                 ; 0000 00B4       }
0001e1 cff6      	RJMP _0x20
                 _0x22:
                 ; 0000 00B5     }
                 ; 0000 00B6 
                 ; 0000 00B7     sprintf(buff, "Z=%d %d/%d/%d", capa, year, month, day);
                 _0x1E:
0001e2 01fe      	MOVW R30,R28
0001e3 9671      	ADIW R30,17
0001e4 93fa      	ST   -Y,R31
0001e5 93ea      	ST   -Y,R30
                +
0001e6 e9e8     +LDI R30 , LOW ( 2 * _0x0 + ( 34 ) )
0001e7 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 34 ) )
                 	__POINTW1FN _0x0,34
0001e8 93fa      	ST   -Y,R31
0001e9 93ea      	ST   -Y,R30
0001ea 2de5      	MOV  R30,R5
0001eb 940e 0745 	CALL SUBOPT_0x8
0001ed 940e 074a 	CALL SUBOPT_0x9
0001ef 91e0 0260 	LDS  R30,_month
0001f1 940e 0745 	CALL SUBOPT_0x8
0001f3 2dec      	MOV  R30,R12
0001f4 940e 0745 	CALL SUBOPT_0x8
0001f6 e180      	LDI  R24,16
0001f7 940e 05f3 	CALL _sprintf
0001f9 9664      	ADIW R28,20
                 ; 0000 00B8     sprintf(buff2, "%d:%d:%d  R=%d ", hour, minute, second, _res);
0001fa 940e 0753 	CALL SUBOPT_0xA
                +
0001fc eae6     +LDI R30 , LOW ( 2 * _0x0 + ( 48 ) )
0001fd e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 48 ) )
                 	__POINTW1FN _0x0,48
0001fe 93fa      	ST   -Y,R31
0001ff 93ea      	ST   -Y,R30
000200 2dea      	MOV  R30,R10
000201 940e 0745 	CALL SUBOPT_0x8
000203 2deb      	MOV  R30,R11
000204 940e 0745 	CALL SUBOPT_0x8
000206 2ded      	MOV  R30,R13
000207 940e 0745 	CALL SUBOPT_0x8
000209 2de4      	MOV  R30,R4
00020a 940e 0745 	CALL SUBOPT_0x8
00020c e180      	LDI  R24,16
00020d 940e 05f3 	CALL _sprintf
00020f 9664      	ADIW R28,20
                 ; 0000 00B9 
                 ; 0000 00BA     lcd_clear();
000210 940e 0669 	CALL _lcd_clear
                 ; 0000 00BB 
                 ; 0000 00BC     lcd_puts(buff);
000212 01de      	MOVW R26,R28
000213 9651      	ADIW R26,17
000214 940e 0697 	CALL _lcd_puts
                 ; 0000 00BD 
                 ; 0000 00BE     if (_full == 1)
000216 fe20      	SBRS R2,0
000217 c004      	RJMP _0x23
                 ; 0000 00BF     {
                 ; 0000 00C0 
                 ; 0000 00C1       lcd_putsf(" Full");
                +
000218 eba6     +LDI R26 , LOW ( 2 * _0x0 + ( 64 ) )
000219 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 64 ) )
                 	__POINTW2FN _0x0,64
00021a 940e 06a6 	CALL _lcd_putsf
                 ; 0000 00C2     }
                 ; 0000 00C3 
                 ; 0000 00C4     if (_emp == 1)
                 _0x23:
00021c fe21      	SBRS R2,1
00021d c004      	RJMP _0x24
                 ; 0000 00C5     {
                 ; 0000 00C6 
                 ; 0000 00C7       lcd_putsf(" Emp");
                +
00021e ebac     +LDI R26 , LOW ( 2 * _0x0 + ( 70 ) )
00021f e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 70 ) )
                 	__POINTW2FN _0x0,70
000220 940e 06a6 	CALL _lcd_putsf
                 ; 0000 00C8     }
                 ; 0000 00C9 
                 ; 0000 00CA     lcd_gotoxy(0, 1);
                 _0x24:
000222 940e 072b 	CALL SUBOPT_0x5
                 ; 0000 00CB     lcd_puts(buff2);
000224 940e 0757 	CALL SUBOPT_0xB
                 ; 0000 00CC     delay_ms(25);
000226 940e 075a 	CALL SUBOPT_0xC
                 ; 0000 00CD   }
000228 cf81      	RJMP _0x17
                 ; 0000 00CE }
                 _0x25:
000229 cfff      	RJMP _0x25
                 ; .FEND
                 ;
                 ;/// Functions 4 setting and...
                 ;
                 ;char setting(void)
                 ; 0000 00D3 {
                 _setting:
                 ; .FSTART _setting
                 ; 0000 00D4   char _chose = 0;
                 ; 0000 00D5   while (1)
00022a 931a      	ST   -Y,R17
                 ;	_chose -> R17
00022b e010      	LDI  R17,0
                 _0x26:
                 ; 0000 00D6   {
                 ; 0000 00D7     if (_chose == 0)
00022c 3010      	CPI  R17,0
00022d f431      	BRNE _0x29
                 ; 0000 00D8     {
                 ; 0000 00D9       lcd_clear();
00022e 940e 0669 	CALL _lcd_clear
                 ; 0000 00DA       lcd_putsf("Time Setting >>");
                +
000230 eca1     +LDI R26 , LOW ( 2 * _0x0 + ( 75 ) )
000231 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 75 ) )
                 	__POINTW2FN _0x0,75
000232 940e 06a6 	CALL _lcd_putsf
                 ; 0000 00DB     }
                 ; 0000 00DC 
                 ; 0000 00DD     if (_chose == 1)
                 _0x29:
000234 3011      	CPI  R17,1
000235 f431      	BRNE _0x2A
                 ; 0000 00DE     {
                 ; 0000 00DF       lcd_clear();
000236 940e 0669 	CALL _lcd_clear
                 ; 0000 00E0       lcd_putsf("IN&OUT Search >>");
                +
000238 eda1     +LDI R26 , LOW ( 2 * _0x0 + ( 91 ) )
000239 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 91 ) )
                 	__POINTW2FN _0x0,91
00023a 940e 06a6 	CALL _lcd_putsf
                 ; 0000 00E1     }
                 ; 0000 00E2 
                 ; 0000 00E3     if (_chose == 2)
                 _0x2A:
00023c 3012      	CPI  R17,2
00023d f431      	BRNE _0x2B
                 ; 0000 00E4     {
                 ; 0000 00E5       lcd_clear();
00023e 940e 0669 	CALL _lcd_clear
                 ; 0000 00E6       lcd_putsf("Reserve_Park >>");
                +
000240 eea2     +LDI R26 , LOW ( 2 * _0x0 + ( 108 ) )
000241 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 108 ) )
                 	__POINTW2FN _0x0,108
000242 940e 06a6 	CALL _lcd_putsf
                 ; 0000 00E7     }
                 ; 0000 00E8 
                 ; 0000 00E9     if (_chose == 3)
                 _0x2B:
000244 3013      	CPI  R17,3
000245 f431      	BRNE _0x2C
                 ; 0000 00EA     {
                 ; 0000 00EB       lcd_clear();
000246 940e 0669 	CALL _lcd_clear
                 ; 0000 00EC       lcd_putsf("Set data >>");
                +
000248 efa2     +LDI R26 , LOW ( 2 * _0x0 + ( 124 ) )
000249 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 124 ) )
                 	__POINTW2FN _0x0,124
00024a 940e 06a6 	CALL _lcd_putsf
                 ; 0000 00ED     }
                 ; 0000 00EE 
                 ; 0000 00EF     if (PINA .3 == 0)
                 _0x2C:
00024c 99cb      	SBIC 0x19,3
00024d c006      	RJMP _0x2D
                 ; 0000 00F0     { // NEXT
                 ; 0000 00F1       while (PINA .3 == 0)
                 _0x2E:
00024e 9bcb      	SBIS 0x19,3
                 ; 0000 00F2         ;
00024f cffe      	RJMP _0x2E
                 ; 0000 00F3       _chose++;
000250 5f1f      	SUBI R17,-1
                 ; 0000 00F4       if (_chose >= 4)
000251 3014      	CPI  R17,4
000252 f008      	BRLO _0x31
                 ; 0000 00F5         _chose = 0;
000253 e010      	LDI  R17,LOW(0)
                 ; 0000 00F6     }
                 _0x31:
                 ; 0000 00F7 
                 ; 0000 00F8     if (PINA .4 == 0)
                 _0x2D:
000254 99cc      	SBIC 0x19,4
000255 c004      	RJMP _0x32
                 ; 0000 00F9     { // Back
                 ; 0000 00FA       while (PINA .4 == 0)
                 _0x33:
000256 9bcc      	SBIS 0x19,4
                 ; 0000 00FB         ;
000257 cffe      	RJMP _0x33
                 ; 0000 00FC       return 0;
000258 e0e0      	LDI  R30,LOW(0)
000259 c025      	RJMP _0x2080008
                 ; 0000 00FD     }
                 ; 0000 00FE 
                 ; 0000 00FF     if (PINA .2 == 0 & _chose == 0)
                 _0x32:
00025a 940e 075e 	CALL SUBOPT_0xD
00025c 940e 0767 	CALL SUBOPT_0xE
00025e f019      	BREQ _0x36
                 ; 0000 0100     { // chose time_setting
                 ; 0000 0101       while (PINA .2 == 0)
                 _0x37:
00025f 9bca      	SBIS 0x19,2
                 ; 0000 0102         ;
000260 cffe      	RJMP _0x37
                 ; 0000 0103       time_set();
000261 d01f      	RCALL _time_set
                 ; 0000 0104     }
                 ; 0000 0105 
                 ; 0000 0106     if (PINA .2 == 0 & _chose == 1)
                 _0x36:
000262 940e 075e 	CALL SUBOPT_0xD
000264 940e 076c 	CALL SUBOPT_0xF
000266 f019      	BREQ _0x3A
                 ; 0000 0107     { // chose in_out_search
                 ; 0000 0108       while (PINA .2 == 0)
                 _0x3B:
000267 9bca      	SBIS 0x19,2
                 ; 0000 0109         ;
000268 cffe      	RJMP _0x3B
                 ; 0000 010A       in_out_search();
000269 d078      	RCALL _in_out_search
                 ; 0000 010B     }
                 ; 0000 010C 
                 ; 0000 010D     if (PINA .2 == 0 & _chose == 2)
                 _0x3A:
00026a 940e 075e 	CALL SUBOPT_0xD
00026c 940e 0771 	CALL SUBOPT_0x10
00026e f019      	BREQ _0x3E
                 ; 0000 010E     { // chose reserve
                 ; 0000 010F       while (PINA .2 == 0)
                 _0x3F:
00026f 9bca      	SBIS 0x19,2
                 ; 0000 0110         ;
000270 cffe      	RJMP _0x3F
                 ; 0000 0111       reserve_park();
000271 d137      	RCALL _reserve_park
                 ; 0000 0112     }
                 ; 0000 0113 
                 ; 0000 0114     if (PINA .2 == 0 & _chose == 3)
                 _0x3E:
000272 940e 075e 	CALL SUBOPT_0xD
000274 e0e3      	LDI  R30,LOW(3)
000275 940e 0828 	CALL __EQB12
000277 21e0      	AND  R30,R0
000278 f019      	BREQ _0x42
                 ; 0000 0115     { // chose set data
                 ; 0000 0116       while (PINA .2 == 0)
                 _0x43:
000279 9bca      	SBIS 0x19,2
                 ; 0000 0117         ;
00027a cffe      	RJMP _0x43
                 ; 0000 0118       set_data();
00027b d157      	RCALL _set_data
                 ; 0000 0119     }
                 ; 0000 011A 
                 ; 0000 011B     delay_ms(25);
                 _0x42:
00027c 940e 075a 	CALL SUBOPT_0xC
                 ; 0000 011C   }
00027e cfad      	RJMP _0x26
                 ; 0000 011D }
                 _0x2080008:
00027f 9119      	LD   R17,Y+
000280 9508      	RET
                 ; .FEND
                 ;
                 ;/// Time setting
                 ;
                 ;char time_set(void)
                 ; 0000 0122 {
                 _time_set:
                 ; .FSTART _time_set
000281 92ff      	PUSH R15
                 ; 0000 0123   bit _chose = 0;
                 ; 0000 0124   char buff[17];
                 ; 0000 0125   while (1)
000282 9761      	SBIW R28,17
                 ;	_chose -> R15.0
                 ;	buff -> Y+0
000283 24ff      	CLR  R15
                 _0x46:
                 ; 0000 0126   {
                 ; 0000 0127 
                 ; 0000 0128     if (_chose == 0)
000284 fcf0      	SBRC R15,0
000285 c00b      	RJMP _0x49
                 ; 0000 0129     {
                 ; 0000 012A       sprintf(buff, "Set min=%d  >", minute);
000286 940e 0753 	CALL SUBOPT_0xA
                +
000288 efee     +LDI R30 , LOW ( 2 * _0x0 + ( 136 ) )
000289 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 136 ) )
                 	__POINTW1FN _0x0,136
00028a 93fa      	ST   -Y,R31
00028b 93ea      	ST   -Y,R30
00028c 2deb      	MOV  R30,R11
00028d 940e 0745 	CALL SUBOPT_0x8
00028f 940e 0776 	CALL SUBOPT_0x11
                 ; 0000 012B       lcd_clear();
                 ; 0000 012C       lcd_puts(buff);
                 ; 0000 012D     }
                 ; 0000 012E 
                 ; 0000 012F     if (_chose == 1)
                 _0x49:
000291 fef0      	SBRS R15,0
000292 c00b      	RJMP _0x4A
                 ; 0000 0130     {
                 ; 0000 0131       sprintf(buff, "Set hour=%d  >", hour);
000293 940e 0753 	CALL SUBOPT_0xA
                +
000295 e0ec     +LDI R30 , LOW ( 2 * _0x0 + ( 150 ) )
000296 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 150 ) )
                 	__POINTW1FN _0x0,150
000297 93fa      	ST   -Y,R31
000298 93ea      	ST   -Y,R30
000299 2dea      	MOV  R30,R10
00029a 940e 0745 	CALL SUBOPT_0x8
00029c 940e 0776 	CALL SUBOPT_0x11
                 ; 0000 0132       lcd_clear();
                 ; 0000 0133       lcd_puts(buff);
                 ; 0000 0134     }
                 ; 0000 0135 
                 ; 0000 0136     if (PINA .1 == 0 & _chose == 0)
                 _0x4A:
00029e 940e 077d 	CALL SUBOPT_0x12
0002a0 940e 0767 	CALL SUBOPT_0xE
0002a2 f039      	BREQ _0x4B
                 ; 0000 0137     { // UP     min
                 ; 0000 0138       while (PINA .1 == 0)
                 _0x4C:
0002a3 9bc9      	SBIS 0x19,1
                 ; 0000 0139         ;
0002a4 cffe      	RJMP _0x4C
                 ; 0000 013A       minute++;
0002a5 94b3      	INC  R11
                 ; 0000 013B       if (minute > 59)
0002a6 e3eb      	LDI  R30,LOW(59)
0002a7 15eb      	CP   R30,R11
0002a8 f40c      	BRGE _0x4F
                 ; 0000 013C         minute = 0;
0002a9 24bb      	CLR  R11
                 ; 0000 013D     }
                 _0x4F:
                 ; 0000 013E 
                 ; 0000 013F     if (PINA .0 == 0 & _chose == 0)
                 _0x4B:
0002aa 940e 0788 	CALL SUBOPT_0x13
0002ac 940e 0767 	CALL SUBOPT_0xE
0002ae f041      	BREQ _0x50
                 ; 0000 0140     { // DOWN    min
                 ; 0000 0141       while (PINA .0 == 0)
                 _0x51:
0002af 9bc8      	SBIS 0x19,0
                 ; 0000 0142         ;
0002b0 cffe      	RJMP _0x51
                 ; 0000 0143       minute--;
0002b1 94ba      	DEC  R11
                 ; 0000 0144       if (minute < 0)
0002b2 e0e0      	LDI  R30,LOW(0)
0002b3 16be      	CP   R11,R30
0002b4 f414      	BRGE _0x54
                 ; 0000 0145         minute = 59;
0002b5 e3eb      	LDI  R30,LOW(59)
0002b6 2ebe      	MOV  R11,R30
                 ; 0000 0146     }
                 _0x54:
                 ; 0000 0147 
                 ; 0000 0148     if (PINA .1 == 0 & _chose == 1)
                 _0x50:
0002b7 940e 077d 	CALL SUBOPT_0x12
0002b9 940e 076c 	CALL SUBOPT_0xF
0002bb f039      	BREQ _0x55
                 ; 0000 0149     { // UP    hour
                 ; 0000 014A       while (PINA .1 == 0)
                 _0x56:
0002bc 9bc9      	SBIS 0x19,1
                 ; 0000 014B         ;
0002bd cffe      	RJMP _0x56
                 ; 0000 014C       hour++;
0002be 94a3      	INC  R10
                 ; 0000 014D       if (hour > 23)
0002bf e1e7      	LDI  R30,LOW(23)
0002c0 15ea      	CP   R30,R10
0002c1 f40c      	BRGE _0x59
                 ; 0000 014E         hour = 0;
0002c2 24aa      	CLR  R10
                 ; 0000 014F     }
                 _0x59:
                 ; 0000 0150 
                 ; 0000 0151     if (PINA .0 == 0 & _chose == 1)
                 _0x55:
0002c3 940e 0788 	CALL SUBOPT_0x13
0002c5 940e 076c 	CALL SUBOPT_0xF
0002c7 f041      	BREQ _0x5A
                 ; 0000 0152     { // DOWN    hour
                 ; 0000 0153       while (PINA .0 == 0)
                 _0x5B:
0002c8 9bc8      	SBIS 0x19,0
                 ; 0000 0154         ;
0002c9 cffe      	RJMP _0x5B
                 ; 0000 0155       hour--;
0002ca 94aa      	DEC  R10
                 ; 0000 0156       if (hour < 0)
0002cb e0e0      	LDI  R30,LOW(0)
0002cc 16ae      	CP   R10,R30
0002cd f414      	BRGE _0x5E
                 ; 0000 0157         hour = 23;
0002ce e1e7      	LDI  R30,LOW(23)
0002cf 2eae      	MOV  R10,R30
                 ; 0000 0158     }
                 _0x5E:
                 ; 0000 0159 
                 ; 0000 015A     if (PINA .3 == 0)
                 _0x5A:
0002d0 99cb      	SBIC 0x19,3
0002d1 c004      	RJMP _0x5F
                 ; 0000 015B     { // NEXT
                 ; 0000 015C       while (PINA .3 == 0)
                 _0x60:
0002d2 9bcb      	SBIS 0x19,3
                 ; 0000 015D         ;
0002d3 cffe      	RJMP _0x60
                 ; 0000 015E       _chose = !_chose;
0002d4 e0e1      	LDI  R30,LOW(1)
0002d5 26fe      	EOR  R15,R30
                 ; 0000 015F     }
                 ; 0000 0160 
                 ; 0000 0161     if (PINA .4 == 0)
                 _0x5F:
0002d6 99cc      	SBIC 0x19,4
0002d7 c004      	RJMP _0x63
                 ; 0000 0162     { // Back
                 ; 0000 0163       while (PINA .4 == 0)
                 _0x64:
0002d8 9bcc      	SBIS 0x19,4
                 ; 0000 0164         ;
0002d9 cffe      	RJMP _0x64
                 ; 0000 0165       return 0;
0002da e0e0      	LDI  R30,LOW(0)
0002db c003      	RJMP _0x2080007
                 ; 0000 0166     }
                 ; 0000 0167 
                 ; 0000 0168     delay_ms(25);
                 _0x63:
0002dc 940e 075a 	CALL SUBOPT_0xC
                 ; 0000 0169   }
0002de cfa5      	RJMP _0x46
                 ; 0000 016A }
                 _0x2080007:
0002df 9661      	ADIW R28,17
0002e0 90ff      	POP  R15
0002e1 9508      	RET
                 ; .FEND
                 ;
                 ;/// IN&OUT Search
                 ;char in_out_search(void)
                 ; 0000 016E {
                 _in_out_search:
                 ; .FSTART _in_out_search
0002e2 92ff      	PUSH R15
                 ; 0000 016F   char t_month = month, buff[17], buff2[17];
                 ; 0000 0170   char i_temp = i;
                 ; 0000 0171   bit bit_m = 0;
                 ; 0000 0172   while (1)
0002e3 97a2      	SBIW R28,34
0002e4 931a      	ST   -Y,R17
0002e5 930a      	ST   -Y,R16
                 ;	t_month -> R17
                 ;	buff -> Y+19
                 ;	buff2 -> Y+2
                 ;	i_temp -> R16
                 ;	bit_m -> R15.0
0002e6 24ff      	CLR  R15
0002e7 9110 0260 	LDS  R17,_month
0002e9 940e 0730 	CALL SUBOPT_0x6
0002eb 2f0e      	MOV  R16,R30
                 _0x67:
                 ; 0000 0173   {
                 ; 0000 0174 
                 ; 0000 0175     if (PINA .1 == 0)
0002ec 99c9      	SBIC 0x19,1
0002ed c03b      	RJMP _0x6A
                 ; 0000 0176     { // UP
                 ; 0000 0177       while (PINA .1 == 0)
                 _0x6B:
0002ee 9bc9      	SBIS 0x19,1
                 ; 0000 0178         ;
0002ef cffe      	RJMP _0x6B
                 ; 0000 0179       i_temp++;
0002f0 5f0f      	SUBI R16,-1
                 ; 0000 017A 
                 ; 0000 017B       if (i_temp > i & bit_m == 0)
0002f1 940e 0730 	CALL SUBOPT_0x6
0002f3 2fa0      	MOV  R26,R16
0002f4 940e 0841 	CALL __GTB12U
0002f6 940e 0793 	CALL SUBOPT_0x14
0002f8 f031      	BREQ _0x6E
                 ; 0000 017C       {
                 ; 0000 017D         i_temp = i;
0002f9 940e 0730 	CALL SUBOPT_0x6
0002fb 2f0e      	MOV  R16,R30
                 ; 0000 017E         t_month--;
0002fc 5011      	SUBI R17,1
                 ; 0000 017F         bit_m = 1;
0002fd 9468      	SET
0002fe f8f0      	BLD  R15,0
                 ; 0000 0180       }
                 ; 0000 0181 
                 ; 0000 0182       if (t_month <= 6 & i_temp > 31 & bit_m == 1)
                 _0x6E:
0002ff 2fa1      	MOV  R26,R17
000300 e0e6      	LDI  R30,LOW(6)
000301 940e 0837 	CALL __LEB12U
000303 2e0e      	MOV  R0,R30
000304 2fa0      	MOV  R26,R16
000305 e1ef      	LDI  R30,LOW(31)
000306 940e 0798 	CALL SUBOPT_0x15
000308 f011      	BREQ _0x6F
                 ; 0000 0183       {
                 ; 0000 0184         i_temp = 1;
000309 940e 079f 	CALL SUBOPT_0x16
                 ; 0000 0185         t_month++;
                 ; 0000 0186         bit_m = 0;
                 ; 0000 0187       }
                 ; 0000 0188 
                 ; 0000 0189       if (t_month > 6 & i_temp > 30 & bit_m == 1)
                 _0x6F:
00030b 2fa1      	MOV  R26,R17
00030c e0e6      	LDI  R30,LOW(6)
00030d 940e 0841 	CALL __GTB12U
00030f 2e0e      	MOV  R0,R30
000310 2fa0      	MOV  R26,R16
000311 e1ee      	LDI  R30,LOW(30)
000312 940e 0798 	CALL SUBOPT_0x15
000314 f011      	BREQ _0x70
                 ; 0000 018A       {
                 ; 0000 018B         i_temp = 1;
000315 940e 079f 	CALL SUBOPT_0x16
                 ; 0000 018C         t_month++;
                 ; 0000 018D         bit_m = 0;
                 ; 0000 018E       }
                 ; 0000 018F 
                 ; 0000 0190       if (t_month == 12 & i_temp > 29 & bit_m == 1)
                 _0x70:
000317 2fa1      	MOV  R26,R17
000318 e0ec      	LDI  R30,LOW(12)
000319 940e 0828 	CALL __EQB12
00031b 2e0e      	MOV  R0,R30
00031c 2fa0      	MOV  R26,R16
00031d e1ed      	LDI  R30,LOW(29)
00031e 940e 0798 	CALL SUBOPT_0x15
000320 f011      	BREQ _0x71
                 ; 0000 0191       {
                 ; 0000 0192         i_temp = 1;
000321 940e 079f 	CALL SUBOPT_0x16
                 ; 0000 0193         t_month++;
                 ; 0000 0194         bit_m = 0;
                 ; 0000 0195       }
                 ; 0000 0196 
                 ; 0000 0197       if (t_month == 0)
                 _0x71:
000323 3010      	CPI  R17,0
000324 f409      	BRNE _0x72
                 ; 0000 0198         t_month = 12;
000325 e01c      	LDI  R17,LOW(12)
                 ; 0000 0199 
                 ; 0000 019A       if (t_month > 12)
                 _0x72:
000326 301d      	CPI  R17,13
000327 f008      	BRLO _0x73
                 ; 0000 019B         t_month = 1;
000328 e011      	LDI  R17,LOW(1)
                 ; 0000 019C     }
                 _0x73:
                 ; 0000 019D 
                 ; 0000 019E     if (PINA .0 == 0)
                 _0x6A:
000329 99c8      	SBIC 0x19,0
00032a c034      	RJMP _0x74
                 ; 0000 019F     { // DOWN
                 ; 0000 01A0       while (PINA .0 == 0)
                 _0x75:
00032b 9bc8      	SBIS 0x19,0
                 ; 0000 01A1         ;
00032c cffe      	RJMP _0x75
                 ; 0000 01A2       i_temp--;
00032d 5001      	SUBI R16,1
                 ; 0000 01A3 
                 ; 0000 01A4       if (i_temp == 0 & bit_m == 0)
00032e 2fa0      	MOV  R26,R16
00032f e0e0      	LDI  R30,LOW(0)
000330 940e 0828 	CALL __EQB12
000332 940e 0793 	CALL SUBOPT_0x14
000334 f091      	BREQ _0x78
                 ; 0000 01A5       {
                 ; 0000 01A6 
                 ; 0000 01A7         t_month--;
000335 5011      	SUBI R17,1
                 ; 0000 01A8 
                 ; 0000 01A9         if (t_month == 0)
000336 3010      	CPI  R17,0
000337 f409      	BRNE _0x79
                 ; 0000 01AA           t_month = 12;
000338 e01c      	LDI  R17,LOW(12)
                 ; 0000 01AB 
                 ; 0000 01AC         if (t_month > 12)
                 _0x79:
000339 301d      	CPI  R17,13
00033a f008      	BRLO _0x7A
                 ; 0000 01AD           t_month = 1;
00033b e011      	LDI  R17,LOW(1)
                 ; 0000 01AE 
                 ; 0000 01AF         if (t_month <= 6)
                 _0x7A:
00033c 3017      	CPI  R17,7
00033d f408      	BRSH _0x7B
                 ; 0000 01B0           i_temp = 31;
00033e e10f      	LDI  R16,LOW(31)
                 ; 0000 01B1 
                 ; 0000 01B2         if (t_month > 6)
                 _0x7B:
00033f 3017      	CPI  R17,7
000340 f008      	BRLO _0x7C
                 ; 0000 01B3           i_temp = 30;
000341 e10e      	LDI  R16,LOW(30)
                 ; 0000 01B4 
                 ; 0000 01B5         if (t_month == 12)
                 _0x7C:
000342 301c      	CPI  R17,12
000343 f409      	BRNE _0x7D
                 ; 0000 01B6           i_temp = 29;
000344 e10d      	LDI  R16,LOW(29)
                 ; 0000 01B7 
                 ; 0000 01B8         bit_m = 1;
                 _0x7D:
000345 9468      	SET
000346 f8f0      	BLD  R15,0
                 ; 0000 01B9       }
                 ; 0000 01BA 
                 ; 0000 01BB       if (i_temp < i & bit_m == 1)
                 _0x78:
000347 940e 0730 	CALL SUBOPT_0x6
000349 2fa0      	MOV  R26,R16
00034a 940e 083c 	CALL __LTB12U
00034c 2e0e      	MOV  R0,R30
00034d e0a0      	LDI  R26,0
00034e fcf0      	SBRC R15,0
00034f e0a1      	LDI  R26,1
000350 940e 076c 	CALL SUBOPT_0xF
000352 f031      	BREQ _0x7E
                 ; 0000 01BC       {
                 ; 0000 01BD         i_temp = i;
000353 940e 0730 	CALL SUBOPT_0x6
000355 2f0e      	MOV  R16,R30
                 ; 0000 01BE         t_month++;
000356 5f1f      	SUBI R17,-1
                 ; 0000 01BF         bit_m = 0;
000357 94e8      	CLT
000358 f8f0      	BLD  R15,0
                 ; 0000 01C0       }
                 ; 0000 01C1 
                 ; 0000 01C2       if (t_month == 0)
                 _0x7E:
000359 3010      	CPI  R17,0
00035a f409      	BRNE _0x7F
                 ; 0000 01C3         t_month = 12;
00035b e01c      	LDI  R17,LOW(12)
                 ; 0000 01C4 
                 ; 0000 01C5       if (t_month > 12)
                 _0x7F:
00035c 301d      	CPI  R17,13
00035d f008      	BRLO _0x80
                 ; 0000 01C6         t_month = 1;
00035e e011      	LDI  R17,LOW(1)
                 ; 0000 01C7     }
                 _0x80:
                 ; 0000 01C8 
                 ; 0000 01C9     sprintf(buff, "%d/%d/%d ", year, t_month, i_temp);
                 _0x74:
00035f 01fe      	MOVW R30,R28
000360 9673      	ADIW R30,19
000361 93fa      	ST   -Y,R31
000362 93ea      	ST   -Y,R30
                +
000363 e1eb     +LDI R30 , LOW ( 2 * _0x0 + ( 165 ) )
000364 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 165 ) )
                 	__POINTW1FN _0x0,165
000365 93fa      	ST   -Y,R31
000366 93ea      	ST   -Y,R30
000367 940e 074a 	CALL SUBOPT_0x9
000369 2fe1      	MOV  R30,R17
00036a 27ff      	CLR  R31
00036b 2766      	CLR  R22
00036c 2777      	CLR  R23
00036d 940e 084e 	CALL __PUTPARD1
00036f 2fe0      	MOV  R30,R16
000370 27ff      	CLR  R31
000371 2766      	CLR  R22
000372 2777      	CLR  R23
000373 940e 084e 	CALL __PUTPARD1
000375 e08c      	LDI  R24,12
000376 940e 05f3 	CALL _sprintf
000378 9660      	ADIW R28,16
                 ; 0000 01CA     sprintf(buff2, "in=%d out=%d", vurud_stat[i_temp], khuruj_stat[i_temp]);
000379 01fe      	MOVW R30,R28
00037a 9632      	ADIW R30,2
00037b 93fa      	ST   -Y,R31
00037c 93ea      	ST   -Y,R30
                +
00037d e2e5     +LDI R30 , LOW ( 2 * _0x0 + ( 175 ) )
00037e e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 175 ) )
                 	__POINTW1FN _0x0,175
00037f 93fa      	ST   -Y,R31
000380 93ea      	ST   -Y,R30
000381 2fe0      	MOV  R30,R16
000382 e0a0      	LDI  R26,LOW(_vurud_stat)
000383 e0b0      	LDI  R27,HIGH(_vurud_stat)
000384 940e 07a4 	CALL SUBOPT_0x17
000386 2fe0      	MOV  R30,R16
000387 e3ae      	LDI  R26,LOW(_khuruj_stat)
000388 e0b0      	LDI  R27,HIGH(_khuruj_stat)
000389 940e 07a4 	CALL SUBOPT_0x17
00038b e088      	LDI  R24,8
00038c 940e 05f3 	CALL _sprintf
00038e 962c      	ADIW R28,12
                 ; 0000 01CB 
                 ; 0000 01CC     lcd_clear();
00038f 940e 0669 	CALL _lcd_clear
                 ; 0000 01CD     lcd_puts(buff);
000391 01de      	MOVW R26,R28
000392 9653      	ADIW R26,19
000393 940e 0697 	CALL _lcd_puts
                 ; 0000 01CE     lcd_gotoxy(0, 1);
000395 940e 072b 	CALL SUBOPT_0x5
                 ; 0000 01CF     lcd_puts(buff2);
000397 01de      	MOVW R26,R28
000398 9612      	ADIW R26,2
000399 940e 0697 	CALL _lcd_puts
                 ; 0000 01D0 
                 ; 0000 01D1     if (PINA .4 == 0)
00039b 99cc      	SBIC 0x19,4
00039c c004      	RJMP _0x81
                 ; 0000 01D2     { // Back
                 ; 0000 01D3       while (PINA .4 == 0)
                 _0x82:
00039d 9bcc      	SBIS 0x19,4
                 ; 0000 01D4         ;
00039e cffe      	RJMP _0x82
                 ; 0000 01D5       return 0;
00039f e0e0      	LDI  R30,LOW(0)
0003a0 c003      	RJMP _0x2080006
                 ; 0000 01D6     }
                 ; 0000 01D7     delay_ms(25);
                 _0x81:
0003a1 940e 075a 	CALL SUBOPT_0xC
                 ; 0000 01D8   }
0003a3 cf48      	RJMP _0x67
                 ; 0000 01D9 }
                 _0x2080006:
0003a4 8119      	LDD  R17,Y+1
0003a5 8108      	LDD  R16,Y+0
0003a6 96a4      	ADIW R28,36
0003a7 90ff      	POP  R15
0003a8 9508      	RET
                 ; .FEND
                 ;
                 ;// reserve_park
                 ;
                 ;char reserve_park(void)
                 ; 0000 01DE {
                 _reserve_park:
                 ; .FSTART _reserve_park
                 ; 0000 01DF   char buff[17];
                 ; 0000 01E0 
                 ; 0000 01E1   while (1)
0003a9 9761      	SBIW R28,17
                 ;	buff -> Y+0
                 _0x85:
                 ; 0000 01E2   {
                 ; 0000 01E3     sprintf(buff, "Reserved=%d", _res);
0003aa 940e 0753 	CALL SUBOPT_0xA
                +
0003ac e3e2     +LDI R30 , LOW ( 2 * _0x0 + ( 188 ) )
0003ad e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 188 ) )
                 	__POINTW1FN _0x0,188
0003ae 93fa      	ST   -Y,R31
0003af 93ea      	ST   -Y,R30
0003b0 2de4      	MOV  R30,R4
0003b1 940e 0745 	CALL SUBOPT_0x8
0003b3 940e 0776 	CALL SUBOPT_0x11
                 ; 0000 01E4     lcd_clear();
                 ; 0000 01E5     lcd_puts(buff);
                 ; 0000 01E6 
                 ; 0000 01E7     if (PINA .1 == 0)
0003b5 99c9      	SBIC 0x19,1
0003b6 c003      	RJMP _0x88
                 ; 0000 01E8     { // UP
                 ; 0000 01E9       while (PINA .1 == 0)
                 _0x89:
0003b7 9bc9      	SBIS 0x19,1
                 ; 0000 01EA         ;
0003b8 cffe      	RJMP _0x89
                 ; 0000 01EB       _res++;
0003b9 9443      	INC  R4
                 ; 0000 01EC     }
                 ; 0000 01ED 
                 ; 0000 01EE     if (_res >= 100)
                 _0x88:
0003ba e6e4      	LDI  R30,LOW(100)
0003bb 164e      	CP   R4,R30
0003bc f014      	BRLT _0x8C
                 ; 0000 01EF     {
                 ; 0000 01F0       _res = 99;
0003bd e6e3      	LDI  R30,LOW(99)
0003be 2e4e      	MOV  R4,R30
                 ; 0000 01F1     }
                 ; 0000 01F2 
                 ; 0000 01F3     if (PINA .0 == 0)
                 _0x8C:
0003bf 99c8      	SBIC 0x19,0
0003c0 c003      	RJMP _0x8D
                 ; 0000 01F4     { // DOWN
                 ; 0000 01F5       while (PINA .0 == 0)
                 _0x8E:
0003c1 9bc8      	SBIS 0x19,0
                 ; 0000 01F6         ;
0003c2 cffe      	RJMP _0x8E
                 ; 0000 01F7       _res--;
0003c3 944a      	DEC  R4
                 ; 0000 01F8     }
                 ; 0000 01F9 
                 ; 0000 01FA     if (_res <= 0)
                 _0x8D:
0003c4 e0e0      	LDI  R30,LOW(0)
0003c5 15e4      	CP   R30,R4
0003c6 f00c      	BRLT _0x91
                 ; 0000 01FB     {
                 ; 0000 01FC       _res = 0;
0003c7 2444      	CLR  R4
                 ; 0000 01FD     }
                 ; 0000 01FE 
                 ; 0000 01FF     if (PINA .4 == 0)
                 _0x91:
0003c8 99cc      	SBIC 0x19,4
0003c9 c004      	RJMP _0x92
                 ; 0000 0200     { // Back
                 ; 0000 0201       while (PINA .4 == 0)
                 _0x93:
0003ca 9bcc      	SBIS 0x19,4
                 ; 0000 0202         ;
0003cb cffe      	RJMP _0x93
                 ; 0000 0203       return 0;
0003cc e0e0      	LDI  R30,LOW(0)
0003cd c003      	RJMP _0x2080005
                 ; 0000 0204     }
                 ; 0000 0205     delay_ms(25);
                 _0x92:
0003ce 940e 075a 	CALL SUBOPT_0xC
                 ; 0000 0206   }
0003d0 cfd9      	RJMP _0x85
                 ; 0000 0207 }
                 _0x2080005:
0003d1 9661      	ADIW R28,17
0003d2 9508      	RET
                 ; .FEND
                 ;
                 ;//// data setting
                 ;
                 ;char set_data(void)
                 ; 0000 020C {
                 _set_data:
                 ; .FSTART _set_data
                 ; 0000 020D   char _chose = 0;
                 ; 0000 020E   char buff[17];
                 ; 0000 020F   while (1)
0003d3 9761      	SBIW R28,17
0003d4 931a      	ST   -Y,R17
                 ;	_chose -> R17
                 ;	buff -> Y+1
0003d5 e010      	LDI  R17,0
                 _0x96:
                 ; 0000 0210   {
                 ; 0000 0211 
                 ; 0000 0212     if (_chose == 1)
0003d6 3011      	CPI  R17,1
0003d7 f461      	BRNE _0x99
                 ; 0000 0213     {
                 ; 0000 0214       sprintf(buff, "Set month=%d  >", month);
0003d8 940e 07b0 	CALL SUBOPT_0x18
                +
0003da e3ee     +LDI R30 , LOW ( 2 * _0x0 + ( 200 ) )
0003db e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 200 ) )
                 	__POINTW1FN _0x0,200
0003dc 93fa      	ST   -Y,R31
0003dd 93ea      	ST   -Y,R30
0003de 91e0 0260 	LDS  R30,_month
0003e0 940e 0745 	CALL SUBOPT_0x8
0003e2 940e 07b5 	CALL SUBOPT_0x19
                 ; 0000 0215       lcd_clear();
                 ; 0000 0216       lcd_puts(buff);
                 ; 0000 0217     }
                 ; 0000 0218 
                 ; 0000 0219     if (_chose == 0)
                 _0x99:
0003e4 3010      	CPI  R17,0
0003e5 f459      	BRNE _0x9A
                 ; 0000 021A     {
                 ; 0000 021B       sprintf(buff, "Set day=%d  >", day);
0003e6 940e 07b0 	CALL SUBOPT_0x18
                +
0003e8 e4ee     +LDI R30 , LOW ( 2 * _0x0 + ( 216 ) )
0003e9 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 216 ) )
                 	__POINTW1FN _0x0,216
0003ea 93fa      	ST   -Y,R31
0003eb 93ea      	ST   -Y,R30
0003ec 2dec      	MOV  R30,R12
0003ed 940e 0745 	CALL SUBOPT_0x8
0003ef 940e 07b5 	CALL SUBOPT_0x19
                 ; 0000 021C       lcd_clear();
                 ; 0000 021D       lcd_puts(buff);
                 ; 0000 021E     }
                 ; 0000 021F 
                 ; 0000 0220     if (_chose == 2)
                 _0x9A:
0003f1 3012      	CPI  R17,2
0003f2 f451      	BRNE _0x9B
                 ; 0000 0221     {
                 ; 0000 0222       sprintf(buff, "Set year=%d  >", year);
0003f3 940e 07b0 	CALL SUBOPT_0x18
                +
0003f5 e5ec     +LDI R30 , LOW ( 2 * _0x0 + ( 230 ) )
0003f6 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 230 ) )
                 	__POINTW1FN _0x0,230
0003f7 93fa      	ST   -Y,R31
0003f8 93ea      	ST   -Y,R30
0003f9 940e 074a 	CALL SUBOPT_0x9
0003fb 940e 07b5 	CALL SUBOPT_0x19
                 ; 0000 0223       lcd_clear();
                 ; 0000 0224       lcd_puts(buff);
                 ; 0000 0225     }
                 ; 0000 0226 
                 ; 0000 0227     if (PINA .1 == 0 & _chose == 1)
                 _0x9B:
0003fd 940e 07bf 	CALL SUBOPT_0x1A
0003ff 940e 076c 	CALL SUBOPT_0xF
000401 f071      	BREQ _0x9C
                 ; 0000 0228     { // UP     month
                 ; 0000 0229       while (PINA .1 == 0)
                 _0x9D:
000402 9bc9      	SBIS 0x19,1
                 ; 0000 022A         ;
000403 cffe      	RJMP _0x9D
                 ; 0000 022B       month++;
000404 91e0 0260 	LDS  R30,_month
000406 5fef      	SUBI R30,-LOW(1)
000407 93e0 0260 	STS  _month,R30
                 ; 0000 022C       if (month > 12)
000409 91a0 0260 	LDS  R26,_month
00040b 30ad      	CPI  R26,LOW(0xD)
00040c f01c      	BRLT _0xA0
                 ; 0000 022D         month = 1;
00040d e0e1      	LDI  R30,LOW(1)
00040e 93e0 0260 	STS  _month,R30
                 ; 0000 022E     }
                 _0xA0:
                 ; 0000 022F 
                 ; 0000 0230     if (PINA .0 == 0 & _chose == 1)
                 _0x9C:
000410 940e 07c8 	CALL SUBOPT_0x1B
000412 940e 076c 	CALL SUBOPT_0xF
000414 f071      	BREQ _0xA1
                 ; 0000 0231     { // DOWN    month
                 ; 0000 0232       while (PINA .0 == 0)
                 _0xA2:
000415 9bc8      	SBIS 0x19,0
                 ; 0000 0233         ;
000416 cffe      	RJMP _0xA2
                 ; 0000 0234       month--;
000417 91e0 0260 	LDS  R30,_month
000419 50e1      	SUBI R30,LOW(1)
00041a 93e0 0260 	STS  _month,R30
                 ; 0000 0235       if (month < 1)
00041c 91a0 0260 	LDS  R26,_month
00041e 30a1      	CPI  R26,LOW(0x1)
00041f f41c      	BRGE _0xA5
                 ; 0000 0236         month = 12;
000420 e0ec      	LDI  R30,LOW(12)
000421 93e0 0260 	STS  _month,R30
                 ; 0000 0237     }
                 _0xA5:
                 ; 0000 0238 
                 ; 0000 0239     if (PINA .1 == 0 & _chose == 0)
                 _0xA1:
000423 940e 07bf 	CALL SUBOPT_0x1A
000425 940e 0767 	CALL SUBOPT_0xE
000427 f069      	BREQ _0xA6
                 ; 0000 023A     { // UP    day
                 ; 0000 023B       while (PINA .1 == 0)
                 _0xA7:
000428 9bc9      	SBIS 0x19,1
                 ; 0000 023C         ;
000429 cffe      	RJMP _0xA7
                 ; 0000 023D       day++;
00042a 94c3      	INC  R12
                 ; 0000 023E       i = day;
00042b 2dec      	MOV  R30,R12
00042c e7ac      	LDI  R26,LOW(_i)
00042d e0b0      	LDI  R27,HIGH(_i)
00042e 940e 086b 	CALL __EEPROMWRB
                 ; 0000 023F       if (day > 31)
000430 e1ef      	LDI  R30,LOW(31)
000431 15ec      	CP   R30,R12
000432 f414      	BRGE _0xAA
                 ; 0000 0240         day = 1;
000433 e0e1      	LDI  R30,LOW(1)
000434 2ece      	MOV  R12,R30
                 ; 0000 0241     }
                 _0xAA:
                 ; 0000 0242 
                 ; 0000 0243     if (PINA .0 == 0 & _chose == 0)
                 _0xA6:
000435 940e 07c8 	CALL SUBOPT_0x1B
000437 940e 0767 	CALL SUBOPT_0xE
000439 f069      	BREQ _0xAB
                 ; 0000 0244     { // DOWN    day
                 ; 0000 0245       while (PINA .0 == 0)
                 _0xAC:
00043a 9bc8      	SBIS 0x19,0
                 ; 0000 0246         ;
00043b cffe      	RJMP _0xAC
                 ; 0000 0247       day--;
00043c 94ca      	DEC  R12
                 ; 0000 0248       i = day;
00043d 2dec      	MOV  R30,R12
00043e e7ac      	LDI  R26,LOW(_i)
00043f e0b0      	LDI  R27,HIGH(_i)
000440 940e 086b 	CALL __EEPROMWRB
                 ; 0000 0249       if (day < 1)
000442 e0e1      	LDI  R30,LOW(1)
000443 16ce      	CP   R12,R30
000444 f414      	BRGE _0xAF
                 ; 0000 024A         day = 31;
000445 e1ef      	LDI  R30,LOW(31)
000446 2ece      	MOV  R12,R30
                 ; 0000 024B     }
                 _0xAF:
                 ; 0000 024C 
                 ; 0000 024D     if (PINA .0 == 0 & _chose == 2)
                 _0xAB:
000447 940e 07c8 	CALL SUBOPT_0x1B
000449 940e 0771 	CALL SUBOPT_0x10
00044b f099      	BREQ _0xB0
                 ; 0000 024E     { // DOWN    year
                 ; 0000 024F       while (PINA .0 == 0)
                 _0xB1:
00044c 9bc8      	SBIS 0x19,0
                 ; 0000 0250         ;
00044d cffe      	RJMP _0xB1
                 ; 0000 0251       year--;
00044e 940e 0711 	CALL SUBOPT_0x2
000450 9731      	SBIW R30,1
000451 93fe      	ST   -X,R31
000452 93ee      	ST   -X,R30
                 ; 0000 0252       if (year < 1)
000453 91a0 0261 	LDS  R26,_year
000455 91b0 0262 	LDS  R27,_year+1
000457 9711      	SBIW R26,1
000458 f434      	BRGE _0xB4
                 ; 0000 0253         year = 1300;
000459 e1e4      	LDI  R30,LOW(1300)
00045a e0f5      	LDI  R31,HIGH(1300)
00045b 93e0 0261 	STS  _year,R30
00045d 93f0 0262 	STS  _year+1,R31
                 ; 0000 0254     }
                 _0xB4:
                 ; 0000 0255 
                 ; 0000 0256     if (PINA .1 == 0 & _chose == 2)
                 _0xB0:
00045f 940e 07bf 	CALL SUBOPT_0x1A
000461 940e 0771 	CALL SUBOPT_0x10
000463 f039      	BREQ _0xB5
                 ; 0000 0257     { // UP    year
                 ; 0000 0258       while (PINA .1 == 0)
                 _0xB6:
000464 9bc9      	SBIS 0x19,1
                 ; 0000 0259         ;
000465 cffe      	RJMP _0xB6
                 ; 0000 025A       year++;
000466 940e 0711 	CALL SUBOPT_0x2
000468 9631      	ADIW R30,1
000469 93fe      	ST   -X,R31
00046a 93ee      	ST   -X,R30
                 ; 0000 025B       // if(year>1404)
                 ; 0000 025C       // year=0;
                 ; 0000 025D     }
                 ; 0000 025E 
                 ; 0000 025F     if (PINA .3 == 0)
                 _0xB5:
00046b 99cb      	SBIC 0x19,3
00046c c006      	RJMP _0xB9
                 ; 0000 0260     { // NEXT
                 ; 0000 0261       while (PINA .3 == 0)
                 _0xBA:
00046d 9bcb      	SBIS 0x19,3
                 ; 0000 0262         ;
00046e cffe      	RJMP _0xBA
                 ; 0000 0263       _chose++;
00046f 5f1f      	SUBI R17,-1
                 ; 0000 0264       if (_chose >= 3)
000470 3013      	CPI  R17,3
000471 f008      	BRLO _0xBD
                 ; 0000 0265         _chose = 0;
000472 e010      	LDI  R17,LOW(0)
                 ; 0000 0266     }
                 _0xBD:
                 ; 0000 0267 
                 ; 0000 0268     if (PINA .4 == 0)
                 _0xB9:
000473 99cc      	SBIC 0x19,4
000474 c004      	RJMP _0xBE
                 ; 0000 0269     { // Back
                 ; 0000 026A       while (PINA .4 == 0)
                 _0xBF:
000475 9bcc      	SBIS 0x19,4
                 ; 0000 026B         ;
000476 cffe      	RJMP _0xBF
                 ; 0000 026C       return 0;
000477 e0e0      	LDI  R30,LOW(0)
000478 c003      	RJMP _0x2080004
                 ; 0000 026D     }
                 ; 0000 026E 
                 ; 0000 026F     delay_ms(25);
                 _0xBE:
000479 940e 075a 	CALL SUBOPT_0xC
                 ; 0000 0270   }
00047b cf5a      	RJMP _0x96
                 ; 0000 0271 }
                 _0x2080004:
00047c 8118      	LDD  R17,Y+0
00047d 9662      	ADIW R28,18
00047e 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G100:
                 ; .FSTART _put_buff_G100
00047f 93ba      	ST   -Y,R27
000480 93aa      	ST   -Y,R26
000481 931a      	ST   -Y,R17
000482 930a      	ST   -Y,R16
000483 81aa      	LDD  R26,Y+2
000484 81bb      	LDD  R27,Y+2+1
000485 9612      	ADIW R26,2
000486 940e 0846 	CALL __GETW1P
000488 9730      	SBIW R30,0
000489 f159      	BREQ _0x2000010
00048a 81aa      	LDD  R26,Y+2
00048b 81bb      	LDD  R27,Y+2+1
00048c 9614      	ADIW R26,4
00048d 940e 0846 	CALL __GETW1P
00048f 018f      	MOVW R16,R30
000490 9730      	SBIW R30,0
000491 f061      	BREQ _0x2000012
                +
000492 3002     +CPI R16 , LOW ( 2 )
000493 e0e0     +LDI R30 , HIGH ( 2 )
000494 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
000495 f098      	BRLO _0x2000013
000496 01f8      	MOVW R30,R16
000497 9731      	SBIW R30,1
000498 018f      	MOVW R16,R30
                +
000499 81aa     +LDD R26 , Y + 2
00049a 81bb     +LDD R27 , Y + 2 + 1
00049b 9614     +ADIW R26 , 4
00049c 93ed     +ST X + , R30
00049d 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2000012:
00049e 81aa      	LDD  R26,Y+2
00049f 81bb      	LDD  R27,Y+2+1
0004a0 9612      	ADIW R26,2
0004a1 91ed      	LD   R30,X+
0004a2 91fd      	LD   R31,X+
0004a3 9631      	ADIW R30,1
0004a4 93fe      	ST   -X,R31
0004a5 93ee      	ST   -X,R30
0004a6 9731      	SBIW R30,1
0004a7 81ac      	LDD  R26,Y+4
0004a8 83a0      	STD  Z+0,R26
                 _0x2000013:
0004a9 81aa      	LDD  R26,Y+2
0004aa 81bb      	LDD  R27,Y+2+1
0004ab 940e 0846 	CALL __GETW1P
0004ad 23ff      	TST  R31
0004ae f02a      	BRMI _0x2000014
0004af 91ed      	LD   R30,X+
0004b0 91fd      	LD   R31,X+
0004b1 9631      	ADIW R30,1
0004b2 93fe      	ST   -X,R31
0004b3 93ee      	ST   -X,R30
                 _0x2000014:
0004b4 c006      	RJMP _0x2000015
                 _0x2000010:
0004b5 81aa      	LDD  R26,Y+2
0004b6 81bb      	LDD  R27,Y+2+1
0004b7 efef      	LDI  R30,LOW(65535)
0004b8 efff      	LDI  R31,HIGH(65535)
0004b9 93ed      	ST   X+,R30
0004ba 93fc      	ST   X,R31
                 _0x2000015:
0004bb 8119      	LDD  R17,Y+1
0004bc 8108      	LDD  R16,Y+0
0004bd 9625      	ADIW R28,5
0004be 9508      	RET
                 ; .FEND
                 __print_G100:
                 ; .FSTART __print_G100
0004bf 93ba      	ST   -Y,R27
0004c0 93aa      	ST   -Y,R26
0004c1 9726      	SBIW R28,6
0004c2 940e 087c 	CALL __SAVELOCR6
0004c4 e010      	LDI  R17,0
0004c5 85ac      	LDD  R26,Y+12
0004c6 85bd      	LDD  R27,Y+12+1
0004c7 e0e0      	LDI  R30,LOW(0)
0004c8 e0f0      	LDI  R31,HIGH(0)
0004c9 93ed      	ST   X+,R30
0004ca 93fc      	ST   X,R31
                 _0x2000016:
0004cb 89ea      	LDD  R30,Y+18
0004cc 89fb      	LDD  R31,Y+18+1
0004cd 9631      	ADIW R30,1
0004ce 8bea      	STD  Y+18,R30
0004cf 8bfb      	STD  Y+18+1,R31
0004d0 9731      	SBIW R30,1
0004d1 91e4      	LPM  R30,Z
0004d2 2f2e      	MOV  R18,R30
0004d3 30e0      	CPI  R30,0
0004d4 f409      	BRNE PC+2
0004d5 c115      	RJMP _0x2000018
0004d6 2fe1      	MOV  R30,R17
0004d7 30e0      	CPI  R30,0
0004d8 f439      	BRNE _0x200001C
0004d9 3225      	CPI  R18,37
0004da f411      	BRNE _0x200001D
0004db e011      	LDI  R17,LOW(1)
0004dc c002      	RJMP _0x200001E
                 _0x200001D:
0004dd 940e 07d1 	CALL SUBOPT_0x1C
                 _0x200001E:
0004df c10a      	RJMP _0x200001B
                 _0x200001C:
0004e0 30e1      	CPI  R30,LOW(0x1)
0004e1 f4a9      	BRNE _0x200001F
0004e2 3225      	CPI  R18,37
0004e3 f419      	BRNE _0x2000020
0004e4 940e 07d1 	CALL SUBOPT_0x1C
0004e6 c102      	RJMP _0x20000CC
                 _0x2000020:
0004e7 e012      	LDI  R17,LOW(2)
0004e8 e040      	LDI  R20,LOW(0)
0004e9 e000      	LDI  R16,LOW(0)
0004ea 322d      	CPI  R18,45
0004eb f411      	BRNE _0x2000021
0004ec e001      	LDI  R16,LOW(1)
0004ed c0fc      	RJMP _0x200001B
                 _0x2000021:
0004ee 322b      	CPI  R18,43
0004ef f411      	BRNE _0x2000022
0004f0 e24b      	LDI  R20,LOW(43)
0004f1 c0f8      	RJMP _0x200001B
                 _0x2000022:
0004f2 3220      	CPI  R18,32
0004f3 f411      	BRNE _0x2000023
0004f4 e240      	LDI  R20,LOW(32)
0004f5 c0f4      	RJMP _0x200001B
                 _0x2000023:
0004f6 c002      	RJMP _0x2000024
                 _0x200001F:
0004f7 30e2      	CPI  R30,LOW(0x2)
0004f8 f439      	BRNE _0x2000025
                 _0x2000024:
0004f9 e050      	LDI  R21,LOW(0)
0004fa e013      	LDI  R17,LOW(3)
0004fb 3320      	CPI  R18,48
0004fc f411      	BRNE _0x2000026
0004fd 6800      	ORI  R16,LOW(128)
0004fe c0eb      	RJMP _0x200001B
                 _0x2000026:
0004ff c003      	RJMP _0x2000027
                 _0x2000025:
000500 30e3      	CPI  R30,LOW(0x3)
000501 f009      	BREQ PC+2
000502 c0e7      	RJMP _0x200001B
                 _0x2000027:
000503 3320      	CPI  R18,48
000504 f010      	BRLO _0x200002A
000505 332a      	CPI  R18,58
000506 f008      	BRLO _0x200002B
                 _0x200002A:
000507 c007      	RJMP _0x2000029
                 _0x200002B:
000508 e0aa      	LDI  R26,LOW(10)
000509 9f5a      	MUL  R21,R26
00050a 2d50      	MOV  R21,R0
00050b 2fe2      	MOV  R30,R18
00050c 53e0      	SUBI R30,LOW(48)
00050d 0f5e      	ADD  R21,R30
00050e c0db      	RJMP _0x200001B
                 _0x2000029:
00050f 2fe2      	MOV  R30,R18
000510 36e3      	CPI  R30,LOW(0x63)
000511 f449      	BRNE _0x200002F
000512 940e 07d8 	CALL SUBOPT_0x1D
000514 89e8      	LDD  R30,Y+16
000515 89f9      	LDD  R31,Y+16+1
000516 81a4      	LDD  R26,Z+4
000517 93aa      	ST   -Y,R26
000518 940e 07de 	CALL SUBOPT_0x1E
00051a c0ce      	RJMP _0x2000030
                 _0x200002F:
00051b 37e3      	CPI  R30,LOW(0x73)
00051c f441      	BRNE _0x2000032
00051d 940e 07d8 	CALL SUBOPT_0x1D
00051f 940e 07e4 	CALL SUBOPT_0x1F
000521 940e 06e9 	CALL _strlen
000523 2f1e      	MOV  R17,R30
000524 c00a      	RJMP _0x2000033
                 _0x2000032:
000525 37e0      	CPI  R30,LOW(0x70)
000526 f461      	BRNE _0x2000035
000527 940e 07d8 	CALL SUBOPT_0x1D
000529 940e 07e4 	CALL SUBOPT_0x1F
00052b 940e 06f5 	CALL _strlenf
00052d 2f1e      	MOV  R17,R30
00052e 6008      	ORI  R16,LOW(8)
                 _0x2000033:
00052f 6002      	ORI  R16,LOW(2)
000530 770f      	ANDI R16,LOW(127)
000531 e030      	LDI  R19,LOW(0)
000532 c034      	RJMP _0x2000036
                 _0x2000035:
000533 36e4      	CPI  R30,LOW(0x64)
000534 f011      	BREQ _0x2000039
000535 36e9      	CPI  R30,LOW(0x69)
000536 f411      	BRNE _0x200003A
                 _0x2000039:
000537 6004      	ORI  R16,LOW(4)
000538 c002      	RJMP _0x200003B
                 _0x200003A:
000539 37e5      	CPI  R30,LOW(0x75)
00053a f431      	BRNE _0x200003C
                 _0x200003B:
00053b e5e4      	LDI  R30,LOW(_tbl10_G100*2)
00053c e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
00053d 83ee      	STD  Y+6,R30
00053e 83ff      	STD  Y+6+1,R31
00053f e015      	LDI  R17,LOW(5)
000540 c00c      	RJMP _0x200003D
                 _0x200003C:
000541 35e8      	CPI  R30,LOW(0x58)
000542 f411      	BRNE _0x200003F
000543 6008      	ORI  R16,LOW(8)
000544 c003      	RJMP _0x2000040
                 _0x200003F:
000545 37e8      	CPI  R30,LOW(0x78)
000546 f009      	BREQ PC+2
000547 c0a1      	RJMP _0x2000071
                 _0x2000040:
000548 e5ee      	LDI  R30,LOW(_tbl16_G100*2)
000549 e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
00054a 83ee      	STD  Y+6,R30
00054b 83ff      	STD  Y+6+1,R31
00054c e014      	LDI  R17,LOW(4)
                 _0x200003D:
00054d ff02      	SBRS R16,2
00054e c014      	RJMP _0x2000042
00054f 940e 07d8 	CALL SUBOPT_0x1D
000551 940e 07ee 	CALL SUBOPT_0x20
000553 85ab      	LDD  R26,Y+11
000554 23aa      	TST  R26
000555 f43a      	BRPL _0x2000043
000556 85ea      	LDD  R30,Y+10
000557 85fb      	LDD  R31,Y+10+1
000558 940e 0819 	CALL __ANEGW1
00055a 87ea      	STD  Y+10,R30
00055b 87fb      	STD  Y+10+1,R31
00055c e24d      	LDI  R20,LOW(45)
                 _0x2000043:
00055d 3040      	CPI  R20,0
00055e f011      	BREQ _0x2000044
00055f 5f1f      	SUBI R17,-LOW(1)
000560 c001      	RJMP _0x2000045
                 _0x2000044:
000561 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
000562 c004      	RJMP _0x2000046
                 _0x2000042:
000563 940e 07d8 	CALL SUBOPT_0x1D
000565 940e 07ee 	CALL SUBOPT_0x20
                 _0x2000046:
                 _0x2000036:
000567 fd00      	SBRC R16,0
000568 c011      	RJMP _0x2000047
                 _0x2000048:
000569 1715      	CP   R17,R21
00056a f478      	BRSH _0x200004A
00056b ff07      	SBRS R16,7
00056c c008      	RJMP _0x200004B
00056d ff02      	SBRS R16,2
00056e c004      	RJMP _0x200004C
00056f 7f0b      	ANDI R16,LOW(251)
000570 2f24      	MOV  R18,R20
000571 5011      	SUBI R17,LOW(1)
000572 c001      	RJMP _0x200004D
                 _0x200004C:
000573 e320      	LDI  R18,LOW(48)
                 _0x200004D:
000574 c001      	RJMP _0x200004E
                 _0x200004B:
000575 e220      	LDI  R18,LOW(32)
                 _0x200004E:
000576 940e 07d1 	CALL SUBOPT_0x1C
000578 5051      	SUBI R21,LOW(1)
000579 cfef      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
00057a 2f31      	MOV  R19,R17
00057b ff01      	SBRS R16,1
00057c c017      	RJMP _0x200004F
                 _0x2000050:
00057d 3030      	CPI  R19,0
00057e f0a1      	BREQ _0x2000052
00057f ff03      	SBRS R16,3
000580 c006      	RJMP _0x2000053
000581 81ee      	LDD  R30,Y+6
000582 81ff      	LDD  R31,Y+6+1
000583 9125      	LPM  R18,Z+
000584 83ee      	STD  Y+6,R30
000585 83ff      	STD  Y+6+1,R31
000586 c005      	RJMP _0x2000054
                 _0x2000053:
000587 81ae      	LDD  R26,Y+6
000588 81bf      	LDD  R27,Y+6+1
000589 912d      	LD   R18,X+
00058a 83ae      	STD  Y+6,R26
00058b 83bf      	STD  Y+6+1,R27
                 _0x2000054:
00058c 940e 07d1 	CALL SUBOPT_0x1C
00058e 3050      	CPI  R21,0
00058f f009      	BREQ _0x2000055
000590 5051      	SUBI R21,LOW(1)
                 _0x2000055:
000591 5031      	SUBI R19,LOW(1)
000592 cfea      	RJMP _0x2000050
                 _0x2000052:
000593 c04b      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
000594 e320      	LDI  R18,LOW(48)
000595 81ee      	LDD  R30,Y+6
000596 81ff      	LDD  R31,Y+6+1
000597 940e 084a 	CALL __GETW1PF
000599 87e8      	STD  Y+8,R30
00059a 87f9      	STD  Y+8+1,R31
00059b 81ee      	LDD  R30,Y+6
00059c 81ff      	LDD  R31,Y+6+1
00059d 9632      	ADIW R30,2
00059e 83ee      	STD  Y+6,R30
00059f 83ff      	STD  Y+6+1,R31
                 _0x200005A:
0005a0 85e8      	LDD  R30,Y+8
0005a1 85f9      	LDD  R31,Y+8+1
0005a2 85aa      	LDD  R26,Y+10
0005a3 85bb      	LDD  R27,Y+10+1
0005a4 17ae      	CP   R26,R30
0005a5 07bf      	CPC  R27,R31
0005a6 f050      	BRLO _0x200005C
0005a7 5f2f      	SUBI R18,-LOW(1)
0005a8 85a8      	LDD  R26,Y+8
0005a9 85b9      	LDD  R27,Y+8+1
0005aa 85ea      	LDD  R30,Y+10
0005ab 85fb      	LDD  R31,Y+10+1
0005ac 1bea      	SUB  R30,R26
0005ad 0bfb      	SBC  R31,R27
0005ae 87ea      	STD  Y+10,R30
0005af 87fb      	STD  Y+10+1,R31
0005b0 cfef      	RJMP _0x200005A
                 _0x200005C:
0005b1 332a      	CPI  R18,58
0005b2 f028      	BRLO _0x200005D
0005b3 ff03      	SBRS R16,3
0005b4 c002      	RJMP _0x200005E
0005b5 5f29      	SUBI R18,-LOW(7)
0005b6 c001      	RJMP _0x200005F
                 _0x200005E:
0005b7 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
0005b8 fd04      	SBRC R16,4
0005b9 c01a      	RJMP _0x2000061
0005ba 3321      	CPI  R18,49
0005bb f420      	BRSH _0x2000063
0005bc 85a8      	LDD  R26,Y+8
0005bd 85b9      	LDD  R27,Y+8+1
0005be 9711      	SBIW R26,1
0005bf f409      	BRNE _0x2000062
                 _0x2000063:
0005c0 c009      	RJMP _0x20000CD
                 _0x2000062:
0005c1 1753      	CP   R21,R19
0005c2 f010      	BRLO _0x2000067
0005c3 ff00      	SBRS R16,0
0005c4 c001      	RJMP _0x2000068
                 _0x2000067:
0005c5 c013      	RJMP _0x2000066
                 _0x2000068:
0005c6 e220      	LDI  R18,LOW(32)
0005c7 ff07      	SBRS R16,7
0005c8 c00b      	RJMP _0x2000069
0005c9 e320      	LDI  R18,LOW(48)
                 _0x20000CD:
0005ca 6100      	ORI  R16,LOW(16)
0005cb ff02      	SBRS R16,2
0005cc c007      	RJMP _0x200006A
0005cd 7f0b      	ANDI R16,LOW(251)
0005ce 934a      	ST   -Y,R20
0005cf 940e 07de 	CALL SUBOPT_0x1E
0005d1 3050      	CPI  R21,0
0005d2 f009      	BREQ _0x200006B
0005d3 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
0005d4 940e 07d1 	CALL SUBOPT_0x1C
0005d6 3050      	CPI  R21,0
0005d7 f009      	BREQ _0x200006C
0005d8 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
0005d9 5031      	SUBI R19,LOW(1)
0005da 85a8      	LDD  R26,Y+8
0005db 85b9      	LDD  R27,Y+8+1
0005dc 9712      	SBIW R26,2
0005dd f008      	BRLO _0x2000059
0005de cfb5      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
0005df ff00      	SBRS R16,0
0005e0 c008      	RJMP _0x200006D
                 _0x200006E:
0005e1 3050      	CPI  R21,0
0005e2 f031      	BREQ _0x2000070
0005e3 5051      	SUBI R21,LOW(1)
0005e4 e2e0      	LDI  R30,LOW(32)
0005e5 93ea      	ST   -Y,R30
0005e6 940e 07de 	CALL SUBOPT_0x1E
0005e8 cff8      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000CC:
0005e9 e010      	LDI  R17,LOW(0)
                 _0x200001B:
0005ea cee0      	RJMP _0x2000016
                 _0x2000018:
0005eb 85ac      	LDD  R26,Y+12
0005ec 85bd      	LDD  R27,Y+12+1
0005ed 940e 0846 	CALL __GETW1P
0005ef 940e 0883 	CALL __LOADLOCR6
0005f1 9664      	ADIW R28,20
0005f2 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
0005f3 92ff      	PUSH R15
0005f4 2ef8      	MOV  R15,R24
0005f5 9726      	SBIW R28,6
0005f6 940e 087e 	CALL __SAVELOCR4
0005f8 940e 07f6 	CALL SUBOPT_0x21
0005fa 9730      	SBIW R30,0
0005fb f419      	BRNE _0x2000072
0005fc efef      	LDI  R30,LOW(65535)
0005fd efff      	LDI  R31,HIGH(65535)
0005fe c023      	RJMP _0x2080003
                 _0x2000072:
0005ff 01de      	MOVW R26,R28
000600 9616      	ADIW R26,6
000601 940e 0815 	CALL __ADDW2R15
000603 018d      	MOVW R16,R26
000604 940e 07f6 	CALL SUBOPT_0x21
000606 83ee      	STD  Y+6,R30
000607 83ff      	STD  Y+6+1,R31
000608 e0e0      	LDI  R30,LOW(0)
000609 87e8      	STD  Y+8,R30
00060a 87e9      	STD  Y+8+1,R30
00060b 01de      	MOVW R26,R28
00060c 961a      	ADIW R26,10
00060d 940e 0815 	CALL __ADDW2R15
00060f 940e 0846 	CALL __GETW1P
000611 93fa      	ST   -Y,R31
000612 93ea      	ST   -Y,R30
000613 931a      	ST   -Y,R17
000614 930a      	ST   -Y,R16
000615 e7ef      	LDI  R30,LOW(_put_buff_G100)
000616 e0f4      	LDI  R31,HIGH(_put_buff_G100)
000617 93fa      	ST   -Y,R31
000618 93ea      	ST   -Y,R30
000619 01de      	MOVW R26,R28
00061a 961a      	ADIW R26,10
00061b dea3      	RCALL __print_G100
00061c 019f      	MOVW R18,R30
00061d 81ae      	LDD  R26,Y+6
00061e 81bf      	LDD  R27,Y+6+1
00061f e0e0      	LDI  R30,LOW(0)
000620 93ec      	ST   X,R30
000621 01f9      	MOVW R30,R18
                 _0x2080003:
000622 940e 0885 	CALL __LOADLOCR4
000624 962a      	ADIW R28,10
000625 90ff      	POP  R15
000626 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G101:
                 ; .FSTART __lcd_write_nibble_G101
000627 93aa      	ST   -Y,R26
000628 81e8      	LD   R30,Y
000629 71e0      	ANDI R30,LOW(0x10)
00062a f011      	BREQ _0x2020004
00062b 9ac3      	SBI  0x18,3
00062c c001      	RJMP _0x2020005
                 _0x2020004:
00062d 98c3      	CBI  0x18,3
                 _0x2020005:
00062e 81e8      	LD   R30,Y
00062f 72e0      	ANDI R30,LOW(0x20)
000630 f011      	BREQ _0x2020006
000631 9ac4      	SBI  0x18,4
000632 c001      	RJMP _0x2020007
                 _0x2020006:
000633 98c4      	CBI  0x18,4
                 _0x2020007:
000634 81e8      	LD   R30,Y
000635 74e0      	ANDI R30,LOW(0x40)
000636 f011      	BREQ _0x2020008
000637 9ac5      	SBI  0x18,5
000638 c001      	RJMP _0x2020009
                 _0x2020008:
000639 98c5      	CBI  0x18,5
                 _0x2020009:
00063a 81e8      	LD   R30,Y
00063b 78e0      	ANDI R30,LOW(0x80)
00063c f011      	BREQ _0x202000A
00063d 9ac6      	SBI  0x18,6
00063e c001      	RJMP _0x202000B
                 _0x202000A:
00063f 98c6      	CBI  0x18,6
                 _0x202000B:
                +
000640 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000641 958a     +DEC R24
000642 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000643 9ac2      	SBI  0x18,2
                +
000644 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000645 958a     +DEC R24
000646 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000647 98c2      	CBI  0x18,2
                +
000648 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000649 958a     +DEC R24
00064a f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00064b c09b      	RJMP _0x2080001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
00064c 93aa      	ST   -Y,R26
00064d 81a8      	LD   R26,Y
00064e dfd8      	RCALL __lcd_write_nibble_G101
00064f 81e8          ld    r30,y
000650 95e2          swap  r30
000651 83e8          st    y,r30
000652 81a8      	LD   R26,Y
000653 dfd3      	RCALL __lcd_write_nibble_G101
                +
000654 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
000655 958a     +DEC R24
000656 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
000657 c08f      	RJMP _0x2080001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000658 93aa      	ST   -Y,R26
000659 81e8      	LD   R30,Y
00065a e0f0      	LDI  R31,0
00065b 59ed      	SUBI R30,LOW(-__base_y_G101)
00065c 4ffd      	SBCI R31,HIGH(-__base_y_G101)
00065d 81e0      	LD   R30,Z
00065e 81a9      	LDD  R26,Y+1
00065f 0fae      	ADD  R26,R30
000660 dfeb      	RCALL __lcd_write_data
000661 81e9      	LDD  R30,Y+1
000662 93e0 0267 	STS  __lcd_x,R30
000664 81e8      	LD   R30,Y
000665 93e0 0268 	STS  __lcd_y,R30
000667 9622      	ADIW R28,2
000668 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000669 e0a2      	LDI  R26,LOW(2)
00066a 940e 07fd 	CALL SUBOPT_0x22
00066c e0ac      	LDI  R26,LOW(12)
00066d dfde      	RCALL __lcd_write_data
00066e e0a1      	LDI  R26,LOW(1)
00066f 940e 07fd 	CALL SUBOPT_0x22
000671 e0e0      	LDI  R30,LOW(0)
000672 93e0 0268 	STS  __lcd_y,R30
000674 93e0 0267 	STS  __lcd_x,R30
000676 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000677 93aa      	ST   -Y,R26
000678 81a8      	LD   R26,Y
000679 30aa      	CPI  R26,LOW(0xA)
00067a f031      	BREQ _0x2020011
00067b 91e0 0269 	LDS  R30,__lcd_maxx
00067d 91a0 0267 	LDS  R26,__lcd_x
00067f 17ae      	CP   R26,R30
000680 f060      	BRLO _0x2020010
                 _0x2020011:
000681 e0e0      	LDI  R30,LOW(0)
000682 93ea      	ST   -Y,R30
000683 91a0 0268 	LDS  R26,__lcd_y
000685 5faf      	SUBI R26,-LOW(1)
000686 93a0 0268 	STS  __lcd_y,R26
000688 dfcf      	RCALL _lcd_gotoxy
000689 81a8      	LD   R26,Y
00068a 30aa      	CPI  R26,LOW(0xA)
00068b f409      	BRNE _0x2020013
00068c c05a      	RJMP _0x2080001
                 _0x2020013:
                 _0x2020010:
00068d 91e0 0267 	LDS  R30,__lcd_x
00068f 5fef      	SUBI R30,-LOW(1)
000690 93e0 0267 	STS  __lcd_x,R30
000692 9ac0      	SBI  0x18,0
000693 81a8      	LD   R26,Y
000694 dfb7      	RCALL __lcd_write_data
000695 98c0      	CBI  0x18,0
000696 c050      	RJMP _0x2080001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000697 93ba      	ST   -Y,R27
000698 93aa      	ST   -Y,R26
000699 931a      	ST   -Y,R17
                 _0x2020014:
00069a 81a9      	LDD  R26,Y+1
00069b 81ba      	LDD  R27,Y+1+1
00069c 91ed      	LD   R30,X+
00069d 83a9      	STD  Y+1,R26
00069e 83ba      	STD  Y+1+1,R27
00069f 2f1e      	MOV  R17,R30
0006a0 30e0      	CPI  R30,0
0006a1 f019      	BREQ _0x2020016
0006a2 2fa1      	MOV  R26,R17
0006a3 dfd3      	RCALL _lcd_putchar
0006a4 cff5      	RJMP _0x2020014
                 _0x2020016:
0006a5 c010      	RJMP _0x2080002
                 ; .FEND
                 _lcd_putsf:
                 ; .FSTART _lcd_putsf
0006a6 93ba      	ST   -Y,R27
0006a7 93aa      	ST   -Y,R26
0006a8 931a      	ST   -Y,R17
                 _0x2020017:
0006a9 81e9      	LDD  R30,Y+1
0006aa 81fa      	LDD  R31,Y+1+1
0006ab 9631      	ADIW R30,1
0006ac 83e9      	STD  Y+1,R30
0006ad 83fa      	STD  Y+1+1,R31
0006ae 9731      	SBIW R30,1
0006af 91e4      	LPM  R30,Z
0006b0 2f1e      	MOV  R17,R30
0006b1 30e0      	CPI  R30,0
0006b2 f019      	BREQ _0x2020019
0006b3 2fa1      	MOV  R26,R17
0006b4 dfc2      	RCALL _lcd_putchar
0006b5 cff3      	RJMP _0x2020017
                 _0x2020019:
                 _0x2080002:
0006b6 8118      	LDD  R17,Y+0
0006b7 9623      	ADIW R28,3
0006b8 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
0006b9 93aa      	ST   -Y,R26
0006ba 9abb      	SBI  0x17,3
0006bb 9abc      	SBI  0x17,4
0006bc 9abd      	SBI  0x17,5
0006bd 9abe      	SBI  0x17,6
0006be 9aba      	SBI  0x17,2
0006bf 9ab8      	SBI  0x17,0
0006c0 9ab9      	SBI  0x17,1
0006c1 98c2      	CBI  0x18,2
0006c2 98c0      	CBI  0x18,0
0006c3 98c1      	CBI  0x18,1
0006c4 81e8      	LD   R30,Y
0006c5 93e0 0269 	STS  __lcd_maxx,R30
0006c7 58e0      	SUBI R30,-LOW(128)
                +
0006c8 93e0 0265+STS __base_y_G101 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G101,2
0006ca 81e8      	LD   R30,Y
0006cb 54e0      	SUBI R30,-LOW(192)
                +
0006cc 93e0 0266+STS __base_y_G101 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G101,3
0006ce e1a4      	LDI  R26,LOW(20)
0006cf e0b0      	LDI  R27,0
0006d0 940e 080b 	CALL _delay_ms
0006d2 940e 0803 	CALL SUBOPT_0x23
0006d4 940e 0803 	CALL SUBOPT_0x23
0006d6 940e 0803 	CALL SUBOPT_0x23
0006d8 e2a0      	LDI  R26,LOW(32)
0006d9 df4d      	RCALL __lcd_write_nibble_G101
                +
0006da ec88     +LDI R24 , LOW ( 200 )
0006db e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0006dc 9701     +SBIW R24 , 1
0006dd f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0006de e2a8      	LDI  R26,LOW(40)
0006df df6c      	RCALL __lcd_write_data
0006e0 e0a4      	LDI  R26,LOW(4)
0006e1 df6a      	RCALL __lcd_write_data
0006e2 e8a5      	LDI  R26,LOW(133)
0006e3 df68      	RCALL __lcd_write_data
0006e4 e0a6      	LDI  R26,LOW(6)
0006e5 df66      	RCALL __lcd_write_data
0006e6 df82      	RCALL _lcd_clear
                 _0x2080001:
0006e7 9621      	ADIW R28,1
0006e8 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
0006e9 93ba      	ST   -Y,R27
0006ea 93aa      	ST   -Y,R26
0006eb 91a9          ld   r26,y+
0006ec 91b9          ld   r27,y+
0006ed 27ee          clr  r30
0006ee 27ff          clr  r31
                 strlen0:
0006ef 916d          ld   r22,x+
0006f0 2366          tst  r22
0006f1 f011          breq strlen1
0006f2 9631          adiw r30,1
0006f3 cffb          rjmp strlen0
                 strlen1:
0006f4 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
0006f5 93ba      	ST   -Y,R27
0006f6 93aa      	ST   -Y,R26
0006f7 27aa          clr  r26
0006f8 27bb          clr  r27
0006f9 91e9          ld   r30,y+
0006fa 91f9          ld   r31,y+
                 strlenf0:
0006fb 9005      	lpm  r0,z+
0006fc 2000          tst  r0
0006fd f011          breq strlenf1
0006fe 9611          adiw r26,1
0006ff cffb          rjmp strlenf0
                 strlenf1:
000700 01fd          movw r30,r26
000701 9508          ret
                 ; .FEND
                 
                 	.ESEG
                 _vurud_stat:
000000           	.BYTE 0x3E
                 _khuruj_stat:
00003e           	.BYTE 0x3E
                 _i:
00007c           	.BYTE 0x1
                 
                 	.DSEG
                 _month:
000260           	.BYTE 0x1
                 _year:
000261           	.BYTE 0x2
                 __base_y_G101:
000263           	.BYTE 0x4
                 __lcd_x:
000267           	.BYTE 0x1
                 __lcd_y:
000268           	.BYTE 0x1
                 __lcd_maxx:
000269           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
000702 940e 0832 	CALL __GTB12
000704 2e0e      	MOV  R0,R30
000705 91a0 0260 	LDS  R26,_month
000707 e0e6      	LDI  R30,LOW(6)
000708 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x1:
000709 e0e1      	LDI  R30,LOW(1)
00070a 2ece      	MOV  R12,R30
00070b 91e0 0260 	LDS  R30,_month
00070d 5fef      	SUBI R30,-LOW(1)
00070e 93e0 0260 	STS  _month,R30
000710 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
000711 e6a1      	LDI  R26,LOW(_year)
000712 e0b2      	LDI  R27,HIGH(_year)
000713 91ed      	LD   R30,X+
000714 91fd      	LD   R31,X+
000715 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
000716 93aa      	ST   -Y,R26
000717 93ba      	ST   -Y,R27
000718 93ea      	ST   -Y,R30
000719 93fa      	ST   -Y,R31
00071a b7ef      	IN   R30,SREG
00071b 93ea      	ST   -Y,R30
00071c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x4:
00071d 2da5      	MOV  R26,R5
00071e e0b0      	LDI  R27,0
00071f fda7      	SBRC R26,7
000720 efbf      	SER  R27
000721 2de4      	MOV  R30,R4
000722 e0f0      	LDI  R31,0
000723 fde7      	SBRC R30,7
000724 efff      	SER  R31
000725 0fae      	ADD  R26,R30
000726 1fbf      	ADC  R27,R31
000727 36a4      	CPI  R26,LOW(0x64)
000728 e0e0      	LDI  R30,HIGH(0x64)
000729 07be      	CPC  R27,R30
00072a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x5:
00072b e0e0      	LDI  R30,LOW(0)
00072c 93ea      	ST   -Y,R30
00072d e0a1      	LDI  R26,LOW(1)
00072e 940c 0658 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x6:
000730 e7ac      	LDI  R26,LOW(_i)
000731 e0b0      	LDI  R27,HIGH(_i)
000732 940e 0857 	CALL __EEPROMRDB
000734 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x7:
000735 2daa      	MOV  R26,R10
000736 e0e0      	LDI  R30,LOW(0)
000737 940e 0828 	CALL __EQB12
000739 2e0e      	MOV  R0,R30
00073a 2dab      	MOV  R26,R11
00073b e0e0      	LDI  R30,LOW(0)
00073c 940e 0828 	CALL __EQB12
00073e 220e      	AND  R0,R30
00073f 2dad      	MOV  R26,R13
000740 e0e0      	LDI  R30,LOW(0)
000741 940e 0828 	CALL __EQB12
000743 21e0      	AND  R30,R0
000744 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 12 TIMES, CODE SIZE REDUCTION:30 WORDS
                 SUBOPT_0x8:
000745 940e 081d 	CALL __CBD1
000747 940e 084e 	CALL __PUTPARD1
000749 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x9:
00074a 91e0 0261 	LDS  R30,_year
00074c 91f0 0262 	LDS  R31,_year+1
00074e 940e 0823 	CALL __CWD1
000750 940e 084e 	CALL __PUTPARD1
000752 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xA:
000753 01fe      	MOVW R30,R28
000754 93fa      	ST   -Y,R31
000755 93ea      	ST   -Y,R30
000756 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xB:
000757 01de      	MOVW R26,R28
000758 940c 0697 	JMP  _lcd_puts
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0xC:
00075a e1a9      	LDI  R26,LOW(25)
00075b e0b0      	LDI  R27,0
00075c 940c 080b 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0xD:
00075e e0a0      	LDI  R26,0
00075f 99ca      	SBIC 0x19,2
000760 e0a1      	LDI  R26,1
000761 e0e0      	LDI  R30,LOW(0)
000762 940e 0828 	CALL __EQB12
000764 2e0e      	MOV  R0,R30
000765 2fa1      	MOV  R26,R17
000766 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0xE:
000767 e0e0      	LDI  R30,LOW(0)
000768 940e 0828 	CALL __EQB12
00076a 21e0      	AND  R30,R0
00076b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0xF:
00076c e0e1      	LDI  R30,LOW(1)
00076d 940e 0828 	CALL __EQB12
00076f 21e0      	AND  R30,R0
000770 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x10:
000771 e0e2      	LDI  R30,LOW(2)
000772 940e 0828 	CALL __EQB12
000774 21e0      	AND  R30,R0
000775 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x11:
000776 e084      	LDI  R24,4
000777 940e 05f3 	CALL _sprintf
000779 9628      	ADIW R28,8
00077a 940e 0669 	CALL _lcd_clear
00077c cfda      	RJMP SUBOPT_0xB
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x12:
00077d e0a0      	LDI  R26,0
00077e 99c9      	SBIC 0x19,1
00077f e0a1      	LDI  R26,1
000780 e0e0      	LDI  R30,LOW(0)
000781 940e 0828 	CALL __EQB12
000783 2e0e      	MOV  R0,R30
000784 e0a0      	LDI  R26,0
000785 fcf0      	SBRC R15,0
000786 e0a1      	LDI  R26,1
000787 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x13:
000788 e0a0      	LDI  R26,0
000789 99c8      	SBIC 0x19,0
00078a e0a1      	LDI  R26,1
00078b e0e0      	LDI  R30,LOW(0)
00078c 940e 0828 	CALL __EQB12
00078e 2e0e      	MOV  R0,R30
00078f e0a0      	LDI  R26,0
000790 fcf0      	SBRC R15,0
000791 e0a1      	LDI  R26,1
000792 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x14:
000793 2e0e      	MOV  R0,R30
000794 e0a0      	LDI  R26,0
000795 fcf0      	SBRC R15,0
000796 e0a1      	LDI  R26,1
000797 cfcf      	RJMP SUBOPT_0xE
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x15:
000798 940e 0841 	CALL __GTB12U
00079a 220e      	AND  R0,R30
00079b e0a0      	LDI  R26,0
00079c fcf0      	SBRC R15,0
00079d e0a1      	LDI  R26,1
00079e cfcd      	RJMP SUBOPT_0xF
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x16:
00079f e001      	LDI  R16,LOW(1)
0007a0 5f1f      	SUBI R17,-1
0007a1 94e8      	CLT
0007a2 f8f0      	BLD  R15,0
0007a3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x17:
0007a4 e0f0      	LDI  R31,0
0007a5 0fee      	LSL  R30
0007a6 1fff      	ROL  R31
0007a7 0fae      	ADD  R26,R30
0007a8 1fbf      	ADC  R27,R31
0007a9 940e 0853 	CALL __EEPROMRDW
0007ab 2766      	CLR  R22
0007ac 2777      	CLR  R23
0007ad 940e 084e 	CALL __PUTPARD1
0007af 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x18:
0007b0 01fe      	MOVW R30,R28
0007b1 9631      	ADIW R30,1
0007b2 93fa      	ST   -Y,R31
0007b3 93ea      	ST   -Y,R30
0007b4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x19:
0007b5 e084      	LDI  R24,4
0007b6 940e 05f3 	CALL _sprintf
0007b8 9628      	ADIW R28,8
0007b9 940e 0669 	CALL _lcd_clear
0007bb 01de      	MOVW R26,R28
0007bc 9611      	ADIW R26,1
0007bd 940c 0697 	JMP  _lcd_puts
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x1A:
0007bf e0a0      	LDI  R26,0
0007c0 99c9      	SBIC 0x19,1
0007c1 e0a1      	LDI  R26,1
0007c2 e0e0      	LDI  R30,LOW(0)
0007c3 940e 0828 	CALL __EQB12
0007c5 2e0e      	MOV  R0,R30
0007c6 2fa1      	MOV  R26,R17
0007c7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x1B:
0007c8 e0a0      	LDI  R26,0
0007c9 99c8      	SBIC 0x19,0
0007ca e0a1      	LDI  R26,1
0007cb e0e0      	LDI  R30,LOW(0)
0007cc 940e 0828 	CALL __EQB12
0007ce 2e0e      	MOV  R0,R30
0007cf 2fa1      	MOV  R26,R17
0007d0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x1C:
0007d1 932a      	ST   -Y,R18
0007d2 85ad      	LDD  R26,Y+13
0007d3 85be      	LDD  R27,Y+13+1
0007d4 85ef      	LDD  R30,Y+15
0007d5 89f8      	LDD  R31,Y+15+1
0007d6 9509      	ICALL
0007d7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x1D:
0007d8 89e8      	LDD  R30,Y+16
0007d9 89f9      	LDD  R31,Y+16+1
0007da 9734      	SBIW R30,4
0007db 8be8      	STD  Y+16,R30
0007dc 8bf9      	STD  Y+16+1,R31
0007dd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1E:
0007de 85ad      	LDD  R26,Y+13
0007df 85be      	LDD  R27,Y+13+1
0007e0 85ef      	LDD  R30,Y+15
0007e1 89f8      	LDD  R31,Y+15+1
0007e2 9509      	ICALL
0007e3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x1F:
0007e4 89a8      	LDD  R26,Y+16
0007e5 89b9      	LDD  R27,Y+16+1
0007e6 9614      	ADIW R26,4
0007e7 940e 0846 	CALL __GETW1P
0007e9 83ee      	STD  Y+6,R30
0007ea 83ff      	STD  Y+6+1,R31
0007eb 81ae      	LDD  R26,Y+6
0007ec 81bf      	LDD  R27,Y+6+1
0007ed 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x20:
0007ee 89a8      	LDD  R26,Y+16
0007ef 89b9      	LDD  R27,Y+16+1
0007f0 9614      	ADIW R26,4
0007f1 940e 0846 	CALL __GETW1P
0007f3 87ea      	STD  Y+10,R30
0007f4 87fb      	STD  Y+10+1,R31
0007f5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x21:
0007f6 01de      	MOVW R26,R28
0007f7 961c      	ADIW R26,12
0007f8 940e 0815 	CALL __ADDW2R15
0007fa 940e 0846 	CALL __GETW1P
0007fc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x22:
0007fd 940e 064c 	CALL __lcd_write_data
0007ff e0a3      	LDI  R26,LOW(3)
000800 e0b0      	LDI  R27,0
000801 940c 080b 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x23:
000803 e3a0      	LDI  R26,LOW(48)
000804 940e 0627 	CALL __lcd_write_nibble_G101
                +
000806 ec88     +LDI R24 , LOW ( 200 )
000807 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000808 9701     +SBIW R24 , 1
000809 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00080a 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
00080b 9610      	adiw r26,0
00080c f039      	breq __delay_ms1
                 __delay_ms0:
00080d 95a8      	wdr
                +
00080e ed80     +LDI R24 , LOW ( 0x7D0 )
00080f e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000810 9701     +SBIW R24 , 1
000811 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000812 9711      	sbiw r26,1
000813 f7c9      	brne __delay_ms0
                 __delay_ms1:
000814 9508      	ret
                 
                 __ADDW2R15:
000815 2400      	CLR  R0
000816 0daf      	ADD  R26,R15
000817 1db0      	ADC  R27,R0
000818 9508      	RET
                 
                 __ANEGW1:
000819 95f1      	NEG  R31
00081a 95e1      	NEG  R30
00081b 40f0      	SBCI R31,0
00081c 9508      	RET
                 
                 __CBD1:
00081d 2ffe      	MOV  R31,R30
00081e 0fff      	ADD  R31,R31
00081f 0bff      	SBC  R31,R31
000820 2f6f      	MOV  R22,R31
000821 2f7f      	MOV  R23,R31
000822 9508      	RET
                 
                 __CWD1:
000823 2f6f      	MOV  R22,R31
000824 0f66      	ADD  R22,R22
000825 0b66      	SBC  R22,R22
000826 2f76      	MOV  R23,R22
000827 9508      	RET
                 
                 __EQB12:
000828 17ea      	CP   R30,R26
000829 e0e1      	LDI  R30,1
00082a f009      	BREQ __EQB12T
00082b 27ee      	CLR  R30
                 __EQB12T:
00082c 9508      	RET
                 
                 __LEB12:
00082d 17ea      	CP   R30,R26
00082e e0e1      	LDI  R30,1
00082f f40c      	BRGE __LEB12T
000830 27ee      	CLR  R30
                 __LEB12T:
000831 9508      	RET
                 
                 __GTB12:
000832 17ea      	CP   R30,R26
000833 e0e1      	LDI  R30,1
000834 f00c      	BRLT __GTB12T
000835 27ee      	CLR  R30
                 __GTB12T:
000836 9508      	RET
                 
                 __LEB12U:
000837 17ea      	CP   R30,R26
000838 e0e1      	LDI  R30,1
000839 f408      	BRSH __LEB12U1
00083a 27ee      	CLR  R30
                 __LEB12U1:
00083b 9508      	RET
                 
                 __LTB12U:
00083c 17ae      	CP   R26,R30
00083d e0e1      	LDI  R30,1
00083e f008      	BRLO __LTB12U1
00083f 27ee      	CLR  R30
                 __LTB12U1:
000840 9508      	RET
                 
                 __GTB12U:
000841 17ea      	CP   R30,R26
000842 e0e1      	LDI  R30,1
000843 f008      	BRLO __GTB12U1
000844 27ee      	CLR  R30
                 __GTB12U1:
000845 9508      	RET
                 
                 __GETW1P:
000846 91ed      	LD   R30,X+
000847 91fc      	LD   R31,X
000848 9711      	SBIW R26,1
000849 9508      	RET
                 
                 __GETW1PF:
00084a 9005      	LPM  R0,Z+
00084b 91f4      	LPM  R31,Z
00084c 2de0      	MOV  R30,R0
00084d 9508      	RET
                 
                 __PUTPARD1:
00084e 937a      	ST   -Y,R23
00084f 936a      	ST   -Y,R22
000850 93fa      	ST   -Y,R31
000851 93ea      	ST   -Y,R30
000852 9508      	RET
                 
                 __EEPROMRDW:
000853 9611      	ADIW R26,1
000854 d002      	RCALL __EEPROMRDB
000855 2ffe      	MOV  R31,R30
000856 9711      	SBIW R26,1
                 
                 __EEPROMRDB:
000857 99e1      	SBIC EECR,EEWE
000858 cffe      	RJMP __EEPROMRDB
000859 93ff      	PUSH R31
00085a b7ff      	IN   R31,SREG
00085b 94f8      	CLI
00085c bbae      	OUT  EEARL,R26
00085d bbbf      	OUT  EEARH,R27
00085e 9ae0      	SBI  EECR,EERE
00085f b3ed      	IN   R30,EEDR
000860 bfff      	OUT  SREG,R31
000861 91ff      	POP  R31
000862 9508      	RET
                 
                 __EEPROMWRW:
000863 d007      	RCALL __EEPROMWRB
000864 9611      	ADIW R26,1
000865 93ef      	PUSH R30
000866 2fef      	MOV  R30,R31
000867 d003      	RCALL __EEPROMWRB
000868 91ef      	POP  R30
000869 9711      	SBIW R26,1
00086a 9508      	RET
                 
                 __EEPROMWRB:
00086b 9be1      	SBIS EECR,EEWE
00086c c002      	RJMP __EEPROMWRB1
00086d 95a8      	WDR
00086e cffc      	RJMP __EEPROMWRB
                 __EEPROMWRB1:
00086f b79f      	IN   R25,SREG
000870 94f8      	CLI
000871 bbae      	OUT  EEARL,R26
000872 bbbf      	OUT  EEARH,R27
000873 9ae0      	SBI  EECR,EERE
000874 b38d      	IN   R24,EEDR
000875 17e8      	CP   R30,R24
000876 f019      	BREQ __EEPROMWRB0
000877 bbed      	OUT  EEDR,R30
000878 9ae2      	SBI  EECR,EEMWE
000879 9ae1      	SBI  EECR,EEWE
                 __EEPROMWRB0:
00087a bf9f      	OUT  SREG,R25
00087b 9508      	RET
                 
                 __SAVELOCR6:
00087c 935a      	ST   -Y,R21
                 __SAVELOCR5:
00087d 934a      	ST   -Y,R20
                 __SAVELOCR4:
00087e 933a      	ST   -Y,R19
                 __SAVELOCR3:
00087f 932a      	ST   -Y,R18
                 __SAVELOCR2:
000880 931a      	ST   -Y,R17
000881 930a      	ST   -Y,R16
000882 9508      	RET
                 
                 __LOADLOCR6:
000883 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000884 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000885 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000886 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000887 8119      	LDD  R17,Y+1
000888 8108      	LD   R16,Y
000889 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32A register use summary:
r0 :  36 r1 :   1 r2 :   6 r3 :   0 r4 :  12 r5 :  11 r6 :   3 r7 :   0 
r8 :   3 r9 :   0 r10:  12 r11:  12 r12:  16 r13:   5 r14:   0 r15:  22 
r16:  54 r17:  75 r18:  29 r19:   8 r20:   9 r21:  17 r22:  15 r23:   6 
r24:  30 r25:   7 r26: 200 r27:  71 r28:  38 r29:   1 r30: 415 r31: 121 
x  :  31 y  : 231 z  :  16 
Registers used: 31 out of 35 (88.6%)

ATmega32A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   5 add   :   9 
adiw  :  48 and   :  10 andi  :   8 asr   :   0 bclr  :   0 bld   :   8 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  49 
brge  :   9 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  17 
brlt  :   9 brmi  :   1 brne  :  44 brpl  :   1 brsh  :   4 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  : 215 
cbi   :   9 cbr   :   0 clc   :   0 clh   :   0 cli   :   3 cln   :   0 
clr   :  31 cls   :   0 clt   :   6 clv   :   0 clz   :   0 com   :   0 
cp    :  24 cpc   :   3 cpi   :  57 cpse  :   0 dec   :  10 des   :   0 
eor   :   1 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   7 inc   :   9 jmp   :  27 ld    :  43 ldd   :  80 ldi   : 255 
lds   :  19 lpm   :  16 lsl   :   3 lsr   :   0 mov   :  83 movw  :  30 
mul   :   1 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   0 
ori   :   7 out   :  26 pop   :   5 push  :   5 rcall :  23 ret   :  61 
reti  :   2 rjmp  : 134 rol   :   3 ror   :   0 sbc   :   3 sbci  :   2 
sbi   :  17 sbic  :  19 sbis  :  28 sbiw  :  29 sbr   :   0 sbrc  :  10 
sbrs  :  13 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   2 
ses   :   0 set   :   6 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    : 109 std   :  33 sts   :  17 sub   :   4 subi  :  30 swap  :   1 
tst   :   4 wdr   :   2 
Instructions used: 66 out of 116 (56.9%)

ATmega32A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x001114   4058    314   4372   32768  13.3%
[.dseg] 0x000060 0x00026a      0     10     10    2048   0.5%
[.eseg] 0x000000 0x00007d      0    125    125    1024  12.2%

Assembly complete, 0 errors, 12 warnings
