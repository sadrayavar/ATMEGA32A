
AVRASM ver. 2.1.30  D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm Fri Feb 09 13:07:04 2024

D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1087): warning: Register r4 already defined by the .DEF directive
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1088): warning: Register r5 already defined by the .DEF directive
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1089): warning: Register r6 already defined by the .DEF directive
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1090): warning: Register r7 already defined by the .DEF directive
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1091): warning: Register r9 already defined by the .DEF directive
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1092): warning: Register r8 already defined by the .DEF directive
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1093): warning: Register r11 already defined by the .DEF directive
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1094): warning: Register r12 already defined by the .DEF directive
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1095): warning: Register r13 already defined by the .DEF directive
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1096): warning: Register r10 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Release
                 ;Chip type              : ATmega32A
                 ;Program type           : Application
                 ;Clock frequency        : 8/000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32A
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _number_of_enters=R4
                 	.DEF _number_of_enters_msb=R5
                 	.DEF _number_of_exits=R6
                 	.DEF _number_of_exits_msb=R7
                 	.DEF _day_index=R9
                 	.DEF _reserved=R8
                 	.DEF _capacity=R11
                 	.DEF _second=R12
                 	.DEF _second_msb=R13
                 	.DEF __lcd_x=R10
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 00d1 	JMP  __RESET
000002 940c 015e 	JMP  _ext_int0_isr
000004 940c 0180 	JMP  _ext_int1_isr
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0100 	JMP  _timer2_ovf_isr
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
000033 0002      	.DW  0x0002
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000034 0000
000035 0000      	.DB  0x0,0x0,0x0,0x0
000036 0000
000037 0a00      	.DB  0x0,0x0,0x0,0xA
000038 0032      	.DB  0x32,0x0
                 
                 _0x3:
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1144): warning: .cseg .db misalignment - padding zero byte
000039 000a      	.DB  0xA
                 _0x4:
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1146): warning: .cseg .db misalignment - padding zero byte
00003a 003b      	.DB  0x3B
                 _0x5:
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1148): warning: .cseg .db misalignment - padding zero byte
00003b 0017      	.DB  0x17
                 _0x6:
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1150): warning: .cseg .db misalignment - padding zero byte
00003c 001d      	.DB  0x1D
                 _0x7:
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1152): warning: .cseg .db misalignment - padding zero byte
00003d 000c      	.DB  0xC
                 _0x8:
00003e 057a      	.DB  0x7A,0x5
                 _0x0:
00003f 6d45
000040 7470
000041 0079
000042 7546      	.DB  0x45,0x6D,0x70,0x74,0x79,0x0,0x46,0x75
000043 6c6c
000044 7300
000045 7661
000046 6e69      	.DB  0x6C,0x6C,0x0,0x73,0x61,0x76,0x69,0x6E
000047 2067
000048 6164
000049 6174
00004a 4300      	.DB  0x67,0x20,0x64,0x61,0x74,0x61,0x0,0x43
00004b 253d
00004c 2064
00004d 6425
00004e 252f      	.DB  0x3D,0x25,0x64,0x20,0x25,0x64,0x2F,0x25
00004f 2f64
000050 6425
000051 2500
000052 3a64      	.DB  0x64,0x2F,0x25,0x64,0x0,0x25,0x64,0x3A
000053 6425
000054 253a
000055 2064
000056 5220      	.DB  0x25,0x64,0x3A,0x25,0x64,0x20,0x20,0x52
000057 253d
000058 2064
000059 5400
00005a 6d69      	.DB  0x3D,0x25,0x64,0x20,0x0,0x54,0x69,0x6D
00005b 2065
00005c 6553
00005d 7474
00005e 6e69      	.DB  0x65,0x20,0x53,0x65,0x74,0x74,0x69,0x6E
00005f 2067
000060 3e3e
000061 4900
000062 264e      	.DB  0x67,0x20,0x3E,0x3E,0x0,0x49,0x4E,0x26
000063 554f
000064 2054
000065 6553
000066 7261      	.DB  0x4F,0x55,0x54,0x20,0x53,0x65,0x61,0x72
000067 6863
000068 3e20
000069 003e
00006a 6552      	.DB  0x63,0x68,0x20,0x3E,0x3E,0x0,0x52,0x65
00006b 6573
00006c 7672
00006d 5f65
00006e 6150      	.DB  0x73,0x65,0x72,0x76,0x65,0x5F,0x50,0x61
00006f 6b72
000070 3e20
000071 003e
000072 6553      	.DB  0x72,0x6B,0x20,0x3E,0x3E,0x0,0x53,0x65
000073 2074
000074 6164
000075 6574
000076 3e20      	.DB  0x74,0x20,0x64,0x61,0x74,0x65,0x20,0x3E
000077 003e
000078 6553
000079 2074
00007a 696d      	.DB  0x3E,0x0,0x53,0x65,0x74,0x20,0x6D,0x69
00007b 3d6e
00007c 6425
00007d 2020
00007e 003e      	.DB  0x6E,0x3D,0x25,0x64,0x20,0x20,0x3E,0x0
00007f 6553
000080 2074
000081 6f68
000082 7275      	.DB  0x53,0x65,0x74,0x20,0x68,0x6F,0x75,0x72
000083 253d
000084 2064
000085 3e20
000086 4f00      	.DB  0x3D,0x25,0x64,0x20,0x20,0x3E,0x0,0x4F
000087 7475
000088 6f20
000089 2066
00008a 6e69      	.DB  0x75,0x74,0x20,0x6F,0x66,0x20,0x69,0x6E
00008b 6564
00008c 2e78
00008d 6900
00008e 3d6e      	.DB  0x64,0x65,0x78,0x2E,0x0,0x69,0x6E,0x3D
00008f 6425
000090 6f20
000091 7475
000092 253d      	.DB  0x25,0x64,0x20,0x6F,0x75,0x74,0x3D,0x25
000093 0064
000094 6552
000095 6573
000096 7672      	.DB  0x64,0x0,0x52,0x65,0x73,0x65,0x72,0x76
000097 6465
000098 253d
000099 0064
00009a 6553      	.DB  0x65,0x64,0x3D,0x25,0x64,0x0,0x53,0x65
00009b 2074
00009c 6f6d
00009d 746e
00009e 3d68      	.DB  0x74,0x20,0x6D,0x6F,0x6E,0x74,0x68,0x3D
00009f 6425
0000a0 2020
0000a1 003e
0000a2 6553      	.DB  0x25,0x64,0x20,0x20,0x3E,0x0,0x53,0x65
0000a3 2074
0000a4 6164
0000a5 3d79
0000a6 6425      	.DB  0x74,0x20,0x64,0x61,0x79,0x3D,0x25,0x64
0000a7 2020
0000a8 003e
0000a9 6553
0000aa 2074      	.DB  0x20,0x20,0x3E,0x0,0x53,0x65,0x74,0x20
0000ab 6579
0000ac 7261
0000ad 253d
0000ae 2064      	.DB  0x79,0x65,0x61,0x72,0x3D,0x25,0x64,0x20
0000af 3e20
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1184): warning: .cseg .db misalignment - padding zero byte
0000b0 0000      	.DB  0x20,0x3E,0x0
                 _0x2020003:
0000b1 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
0000b2 0001      	.DW  0x01
0000b3 0002      	.DW  0x02
0000b4 0066      	.DW  __REG_BIT_VARS*2
                 
0000b5 000a      	.DW  0x0A
0000b6 0004      	.DW  0x04
0000b7 0068      	.DW  __REG_VARS*2
                 
0000b8 0001      	.DW  0x01
0000b9 02f8      	.DW  _minute
0000ba 0074      	.DW  _0x4*2
                 
0000bb 0001      	.DW  0x01
0000bc 02fa      	.DW  _hour
0000bd 0076      	.DW  _0x5*2
                 
0000be 0001      	.DW  0x01
0000bf 02fc      	.DW  _day
0000c0 0078      	.DW  _0x6*2
                 
0000c1 0001      	.DW  0x01
0000c2 02fe      	.DW  _month
0000c3 007a      	.DW  _0x7*2
                 
0000c4 0002      	.DW  0x02
0000c5 0300      	.DW  _year
0000c6 007c      	.DW  _0x8*2
                 
0000c7 000e      	.DW  0x0E
0000c8 0260      	.DW  _0x7F
0000c9 010d      	.DW  _0x0*2+143
                 
0000ca 000e      	.DW  0x0E
0000cb 026e      	.DW  _0x7F+14
0000cc 010d      	.DW  _0x0*2+143
                 
0000cd 0002      	.DW  0x02
0000ce 0302      	.DW  __base_y_G101
0000cf 0162      	.DW  _0x2020003*2
                 
                 _0xFFFFFFFF:
0000d0 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
0000d1 94f8      	CLI
0000d2 27ee      	CLR  R30
0000d3 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
0000d4 e0f1      	LDI  R31,1
0000d5 bff5      	OUT  MCUCR,R31
0000d6 bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
0000d7 e1f8      	LDI  R31,0x18
0000d8 bdf1      	OUT  WDTCR,R31
0000d9 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
0000da e08d      	LDI  R24,(14-2)+1
0000db e0a2      	LDI  R26,2
0000dc 27bb      	CLR  R27
                 __CLEAR_REG:
0000dd 93ed      	ST   X+,R30
0000de 958a      	DEC  R24
0000df f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0000e0 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
0000e1 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
0000e2 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
0000e3 93ed      	ST   X+,R30
0000e4 9701      	SBIW R24,1
0000e5 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0000e6 e6e4      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0000e7 e0f1      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0000e8 9185      	LPM  R24,Z+
0000e9 9195      	LPM  R25,Z+
0000ea 9700      	SBIW R24,0
0000eb f061      	BREQ __GLOBAL_INI_END
0000ec 91a5      	LPM  R26,Z+
0000ed 91b5      	LPM  R27,Z+
0000ee 9005      	LPM  R0,Z+
0000ef 9015      	LPM  R1,Z+
0000f0 01bf      	MOVW R22,R30
0000f1 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0000f2 9005      	LPM  R0,Z+
0000f3 920d      	ST   X+,R0
0000f4 9701      	SBIW R24,1
0000f5 f7e1      	BRNE __GLOBAL_INI_LOOP
0000f6 01fb      	MOVW R30,R22
0000f7 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0000f8 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0000f9 bfed      	OUT  SPL,R30
0000fa e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000fb bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000fc e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000fd e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000fe 940c 01af 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <mega32a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h> // delay_ms functions
                 ;#include <stdio.h> // sprintf function
                 ;#include <alcd.h>  // lcd related functions
                 ;#define xtal 8'000'000
                 ;
                 ;// prototyping functions
                 ;char menu(void);
                 ;char in_out_search(void);
                 ;char set_time(void);
                 ;char reserve_park(void);
                 ;char set_date(void);
                 ;
                 ;int number_of_enters = 0, number_of_exits = 0;
                 ;int enter_array[31] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
                 ;int exit_array[31] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
                 ;char day_index = 0;
                 ;char const init_capacity = 10;
                 
                 	.DSEG
                 ;char reserved = 0, capacity = init_capacity;
                 ;bit is_full = 0, is_empty = 1;
                 ;int second = 50, minute = 59, hour = 23, day = 29, month = 12, year = 1402;
                 ;
                 ;// define timer interrupt: clock and date logic
                 ;interrupt[TIM2_OVF] void timer2_ovf_isr(void)
                 ; 0000 0019 {
                 
                 	.CSEG
                 _timer2_ovf_isr:
                 ; .FSTART _timer2_ovf_isr
000100 93aa      	ST   -Y,R26
000101 93ba      	ST   -Y,R27
000102 93ea      	ST   -Y,R30
000103 93fa      	ST   -Y,R31
000104 b7ef      	IN   R30,SREG
000105 93ea      	ST   -Y,R30
                 ; 0000 001A 
                 ; 0000 001B     // logic of second, minute, hour
                 ; 0000 001C     if (second == 59)
000106 e3eb      	LDI  R30,LOW(59)
000107 e0f0      	LDI  R31,HIGH(59)
000108 15ec      	CP   R30,R12
000109 05fd      	CPC  R31,R13
00010a f511      	BRNE _0x9
                 ; 0000 001D     {
                 ; 0000 001E         second = 0;
00010b 24cc      	CLR  R12
00010c 24dd      	CLR  R13
                 ; 0000 001F         if (minute == 59)
00010d 940e 0748 	CALL SUBOPT_0x0
00010f 97db      	SBIW R26,59
000110 f4c9      	BRNE _0xA
                 ; 0000 0020         {
                 ; 0000 0021             minute = 0;
000111 e0e0      	LDI  R30,LOW(0)
000112 93e0 02f8 	STS  _minute,R30
000114 93e0 02f9 	STS  _minute+1,R30
                 ; 0000 0022             if (hour == 23)
000116 940e 074d 	CALL SUBOPT_0x1
000118 9757      	SBIW R26,23
000119 f441      	BRNE _0xB
                 ; 0000 0023             {
                 ; 0000 0024                 hour = 0;
00011a e0e0      	LDI  R30,LOW(0)
00011b 93e0 02fa 	STS  _hour,R30
00011d 93e0 02fb 	STS  _hour+1,R30
                 ; 0000 0025                 day++;
00011f efac      	LDI  R26,LOW(_day)
000120 e0b2      	LDI  R27,HIGH(_day)
000121 c002      	RJMP _0xDB
                 ; 0000 0026             }
                 ; 0000 0027             else
                 _0xB:
                 ; 0000 0028                 hour++;
000122 efaa      	LDI  R26,LOW(_hour)
000123 e0b2      	LDI  R27,HIGH(_hour)
                 _0xDB:
000124 91ed      	LD   R30,X+
000125 91fd      	LD   R31,X+
000126 9631      	ADIW R30,1
000127 93fe      	ST   -X,R31
000128 93ee      	ST   -X,R30
                 ; 0000 0029         }
                 ; 0000 002A         else
000129 c002      	RJMP _0xD
                 _0xA:
                 ; 0000 002B             minute++;
00012a 940e 0752 	CALL SUBOPT_0x2
                 ; 0000 002C     }
                 _0xD:
                 ; 0000 002D     else
00012c c003      	RJMP _0xE
                 _0x9:
                 ; 0000 002E         second++;
00012d 01f6      	MOVW R30,R12
00012e 9631      	ADIW R30,1
00012f 016f      	MOVW R12,R30
                 ; 0000 002F 
                 ; 0000 0030     // logic of day, month
                 ; 0000 0031     if (month <= 6)
                 _0xE:
000130 940e 075a 	CALL SUBOPT_0x3
000132 9717      	SBIW R26,7
000133 f43c      	BRGE _0xF
                 ; 0000 0032     {
                 ; 0000 0033         if (day > 31)
000134 940e 075f 	CALL SUBOPT_0x4
000136 9790      	SBIW R26,32
000137 f014      	BRLT _0x10
                 ; 0000 0034         {
                 ; 0000 0035             day = 1;
000138 940e 0764 	CALL SUBOPT_0x5
                 ; 0000 0036             month++;
                 ; 0000 0037         }
                 ; 0000 0038     }
                 _0x10:
                 ; 0000 0039     else
00013a c011      	RJMP _0x11
                 _0xF:
                 ; 0000 003A     {
                 ; 0000 003B         if (month == 12)
00013b 940e 075a 	CALL SUBOPT_0x3
00013d 971c      	SBIW R26,12
00013e f439      	BRNE _0x12
                 ; 0000 003C         {
                 ; 0000 003D             if (day > 29)
00013f 940e 075f 	CALL SUBOPT_0x4
000141 975e      	SBIW R26,30
000142 f014      	BRLT _0x13
                 ; 0000 003E             {
                 ; 0000 003F                 day = 1;
000143 940e 0764 	CALL SUBOPT_0x5
                 ; 0000 0040                 month++;
                 ; 0000 0041             }
                 ; 0000 0042         }
                 _0x13:
                 ; 0000 0043         else
000145 c006      	RJMP _0x14
                 _0x12:
                 ; 0000 0044         {
                 ; 0000 0045             if (day > 30)
000146 940e 075f 	CALL SUBOPT_0x4
000148 975f      	SBIW R26,31
000149 f014      	BRLT _0x15
                 ; 0000 0046             {
                 ; 0000 0047                 day = 1;
00014a 940e 0764 	CALL SUBOPT_0x5
                 ; 0000 0048                 month++;
                 ; 0000 0049             }
                 ; 0000 004A         }
                 _0x15:
                 _0x14:
                 ; 0000 004B     }
                 _0x11:
                 ; 0000 004C 
                 ; 0000 004D     // logic of year
                 ; 0000 004E     if (month > 12)
00014c 940e 075a 	CALL SUBOPT_0x3
00014e 971d      	SBIW R26,13
00014f f03c      	BRLT _0x16
                 ; 0000 004F     {
                 ; 0000 0050         month = 1;
000150 940e 0772 	CALL SUBOPT_0x6
                 ; 0000 0051         year++;
000152 940e 0779 	CALL SUBOPT_0x7
000154 9631      	ADIW R30,1
000155 93fe      	ST   -X,R31
000156 93ee      	ST   -X,R30
                 ; 0000 0052     }
                 ; 0000 0053 }
                 _0x16:
000157 91e9      	LD   R30,Y+
000158 bfef      	OUT  SREG,R30
000159 91f9      	LD   R31,Y+
00015a 91e9      	LD   R30,Y+
00015b 91b9      	LD   R27,Y+
00015c 91a9      	LD   R26,Y+
00015d 9518      	RETI
                 ; .FEND
                 ;
                 ;// define interrupt 0: for exiting cars
                 ;interrupt[EXT_INT0] void ext_int0_isr(void)
                 ; 0000 0057 {
                 _ext_int0_isr:
                 ; .FSTART _ext_int0_isr
00015e 940e 077e 	CALL SUBOPT_0x8
                 ; 0000 0058     if (is_empty == 1)
000160 fe21      	SBRS R2,1
000161 c007      	RJMP _0x17
                 ; 0000 0059     {
                 ; 0000 005A         lcd_clear();
000162 940e 06b6 	CALL _lcd_clear
                 ; 0000 005B         lcd_putsf("Empty");
                +
000164 e7ae     +LDI R26 , LOW ( 2 * _0x0 + ( 0 ) )
000165 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW2FN _0x0,0
000166 940e 078c 	CALL SUBOPT_0x9
                 ; 0000 005C         delay_ms(500);
                 ; 0000 005D     }
                 ; 0000 005E     else
000168 c016      	RJMP _0x18
                 _0x17:
                 ; 0000 005F     {
                 ; 0000 0060 
                 ; 0000 0061         capacity++;
000169 94b3      	INC  R11
                 ; 0000 0062         number_of_exits++;
00016a 01f3      	MOVW R30,R6
00016b 9631      	ADIW R30,1
00016c 013f      	MOVW R6,R30
00016d 9731      	SBIW R30,1
                 ; 0000 0063 
                 ; 0000 0064         // check if the parking is empty
                 ; 0000 0065         if ((capacity + reserved) >= init_capacity)
00016e 940e 0792 	CALL SUBOPT_0xA
000170 f02c      	BRLT _0x19
                 ; 0000 0066         {
                 ; 0000 0067             capacity = init_capacity - reserved;
000171 e0ea      	LDI  R30,LOW(10)
000172 19e8      	SUB  R30,R8
000173 2ebe      	MOV  R11,R30
                 ; 0000 0068             is_empty = 1;
000174 9468      	SET
000175 c001      	RJMP _0xDC
                 ; 0000 0069         }
                 ; 0000 006A         else
                 _0x19:
                 ; 0000 006B         {
                 ; 0000 006C             is_empty = 0;
000176 94e8      	CLT
                 _0xDC:
000177 f821      	BLD  R2,1
                 ; 0000 006D         }
                 ; 0000 006E 
                 ; 0000 006F         // checking if the parking is full
                 ; 0000 0070         if (capacity <= 0)
000178 20bb      	TST  R11
000179 f419      	BRNE _0x1B
                 ; 0000 0071         {
                 ; 0000 0072             capacity = 0;
00017a 24bb      	CLR  R11
                 ; 0000 0073             is_full = 1;
00017b 9468      	SET
00017c c001      	RJMP _0xDD
                 ; 0000 0074         }
                 ; 0000 0075         else
                 _0x1B:
                 ; 0000 0076         {
                 ; 0000 0077             is_full = 0;
00017d 94e8      	CLT
                 _0xDD:
00017e f820      	BLD  R2,0
                 ; 0000 0078         }
                 ; 0000 0079     }
                 _0x18:
                 ; 0000 007A }
00017f c021      	RJMP _0xE0
                 ; .FEND
                 ;
                 ;// define interrupt 1: for entering cars
                 ;interrupt[EXT_INT1] void ext_int1_isr(void)
                 ; 0000 007E {
                 _ext_int1_isr:
                 ; .FSTART _ext_int1_isr
000180 940e 077e 	CALL SUBOPT_0x8
                 ; 0000 007F     if (is_full == 1)
000182 fe20      	SBRS R2,0
000183 c007      	RJMP _0x1D
                 ; 0000 0080     {
                 ; 0000 0081         lcd_clear();
000184 940e 06b6 	CALL _lcd_clear
                 ; 0000 0082         lcd_putsf("Full");
                +
000186 e8a4     +LDI R26 , LOW ( 2 * _0x0 + ( 6 ) )
000187 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 6 ) )
                 	__POINTW2FN _0x0,6
000188 940e 078c 	CALL SUBOPT_0x9
                 ; 0000 0083         delay_ms(500);
                 ; 0000 0084     }
                 ; 0000 0085     else
00018a c016      	RJMP _0x1E
                 _0x1D:
                 ; 0000 0086     {
                 ; 0000 0087 
                 ; 0000 0088         capacity--;
00018b 94ba      	DEC  R11
                 ; 0000 0089         number_of_enters++;
00018c 01f2      	MOVW R30,R4
00018d 9631      	ADIW R30,1
00018e 012f      	MOVW R4,R30
00018f 9731      	SBIW R30,1
                 ; 0000 008A 
                 ; 0000 008B         // checking if the parking is full
                 ; 0000 008C         if ((capacity) <= 0)
000190 20bb      	TST  R11
000191 f419      	BRNE _0x1F
                 ; 0000 008D         {
                 ; 0000 008E             capacity = 0;
000192 24bb      	CLR  R11
                 ; 0000 008F             is_full = 1;
000193 9468      	SET
000194 c001      	RJMP _0xDE
                 ; 0000 0090         }
                 ; 0000 0091         else
                 _0x1F:
                 ; 0000 0092         {
                 ; 0000 0093             is_full = 0;
000195 94e8      	CLT
                 _0xDE:
000196 f820      	BLD  R2,0
                 ; 0000 0094         }
                 ; 0000 0095 
                 ; 0000 0096         // check if the parking is empty
                 ; 0000 0097         if ((capacity + reserved) >= init_capacity)
000197 940e 0792 	CALL SUBOPT_0xA
000199 f02c      	BRLT _0x21
                 ; 0000 0098         {
                 ; 0000 0099             capacity = init_capacity - reserved;
00019a e0ea      	LDI  R30,LOW(10)
00019b 19e8      	SUB  R30,R8
00019c 2ebe      	MOV  R11,R30
                 ; 0000 009A             is_empty = 1;
00019d 9468      	SET
00019e c001      	RJMP _0xDF
                 ; 0000 009B         }
                 ; 0000 009C         else
                 _0x21:
                 ; 0000 009D         {
                 ; 0000 009E             is_empty = 0;
00019f 94e8      	CLT
                 _0xDF:
0001a0 f821      	BLD  R2,1
                 ; 0000 009F         }
                 ; 0000 00A0     }
                 _0x1E:
                 ; 0000 00A1 }
                 _0xE0:
0001a1 91e9      	LD   R30,Y+
0001a2 bfef      	OUT  SREG,R30
0001a3 91f9      	LD   R31,Y+
0001a4 91e9      	LD   R30,Y+
0001a5 91b9      	LD   R27,Y+
0001a6 91a9      	LD   R26,Y+
0001a7 9199      	LD   R25,Y+
0001a8 9189      	LD   R24,Y+
0001a9 9179      	LD   R23,Y+
0001aa 9169      	LD   R22,Y+
0001ab 90f9      	LD   R15,Y+
0001ac 9019      	LD   R1,Y+
0001ad 9009      	LD   R0,Y+
0001ae 9518      	RETI
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 00A4 {
                 _main:
                 ; .FSTART _main
                 ; 0000 00A5     char line[17], line2[17];
                 ; 0000 00A6 
                 ; 0000 00A7     GICR = 0b11000000;   // enable INT0 and INT1 interrupts
0001af 97a2      	SBIW R28,34
                 ;	line -> Y+17
                 ;	line2 -> Y+0
0001b0 ece0      	LDI  R30,LOW(192)
0001b1 bfeb      	OUT  0x3B,R30
                 ; 0000 00A8     MCUCSR = 0b00000000; // how to trigger: low level
0001b2 e0e0      	LDI  R30,LOW(0)
0001b3 bfe4      	OUT  0x34,R30
                 ; 0000 00A9     GIFR = 0b11000000;   // enabling flag
0001b4 ece0      	LDI  R30,LOW(192)
0001b5 bfea      	OUT  0x3A,R30
                 ; 0000 00AA #asm("sei")              // enable interrupt globally
0001b6 9478      	sei
                 ; 0000 00AB 
                 ; 0000 00AC     // initilize lcd
                 ; 0000 00AD     lcd_init(16);
0001b7 e1a0      	LDI  R26,LOW(16)
0001b8 940e 06ff 	CALL _lcd_init
                 ; 0000 00AE     lcd_clear();
0001ba 940e 06b6 	CALL _lcd_clear
                 ; 0000 00AF     lcd_gotoxy(0, 1);
0001bc 940e 079a 	CALL SUBOPT_0xB
                 ; 0000 00B0     delay_ms(300);
0001be 940e 079f 	CALL SUBOPT_0xC
                 ; 0000 00B1 
                 ; 0000 00B2     TCCR2 = 0b00000101; // enable timer
0001c0 e0e5      	LDI  R30,LOW(5)
0001c1 bde5      	OUT  0x25,R30
                 ; 0000 00B3     TIMSK = 0b01000000; // interrupt
0001c2 e4e0      	LDI  R30,LOW(64)
0001c3 bfe9      	OUT  0x39,R30
                 ; 0000 00B4     ASSR = 0b00001000;  // set clock source
0001c4 e0e8      	LDI  R30,LOW(8)
0001c5 bde2      	OUT  0x22,R30
                 ; 0000 00B5 
                 ; 0000 00B6     PORTA = 0b00011111;
0001c6 e1ef      	LDI  R30,LOW(31)
0001c7 bbeb      	OUT  0x1B,R30
                 ; 0000 00B7 
                 ; 0000 00B8     capacity -= reserved;
0001c8 18b8      	SUB  R11,R8
                 ; 0000 00B9     while (1)
                 _0x23:
                 ; 0000 00BA     {
                 ; 0000 00BB         if (PINA .2 == 0)
0001c9 99ca      	SBIC 0x19,2
0001ca c003      	RJMP _0x26
                 ; 0000 00BC         {
                 ; 0000 00BD             while (PINA .2 == 0)
                 _0x27:
0001cb 9bca      	SBIS 0x19,2
                 ; 0000 00BE                 ;
0001cc cffe      	RJMP _0x27
                 ; 0000 00BF             menu();
0001cd d072      	RCALL _menu
                 ; 0000 00C0         }
                 ; 0000 00C1 
                 ; 0000 00C2         // save the enter and exits at the end of the day
                 ; 0000 00C3         if (hour == 0 & minute == 0 & second == 0)
                 _0x26:
0001ce 940e 07a3 	CALL SUBOPT_0xD
0001d0 f1d1      	BREQ _0x2A
                 ; 0000 00C4         {
                 ; 0000 00C5             // save the data
                 ; 0000 00C6             enter_array[day_index] = number_of_enters;
0001d1 2de9      	MOV  R30,R9
0001d2 940e 07b6 	CALL SUBOPT_0xE
0001d4 8240      	ST   Z,R4
0001d5 8251      	STD  Z+1,R5
                 ; 0000 00C7             exit_array[day_index] = number_of_exits;
0001d6 2de9      	MOV  R30,R9
0001d7 940e 07be 	CALL SUBOPT_0xF
0001d9 8260      	ST   Z,R6
0001da 8271      	STD  Z+1,R7
                 ; 0000 00C8 
                 ; 0000 00C9             if (day_index >= 31) // shift the data if array is full
0001db e1ef      	LDI  R30,LOW(31)
0001dc 169e      	CP   R9,R30
0001dd f110      	BRLO _0x2B
                 ; 0000 00CA             {
                 ; 0000 00CB                 char i = 0;
                 ; 0000 00CC                 while (i < 31)
0001de 9721      	SBIW R28,1
0001df e0e0      	LDI  R30,LOW(0)
0001e0 83e8      	ST   Y,R30
                 ;	line -> Y+18
                 ;	line2 -> Y+1
                 ;	i -> Y+0
                 _0x2C:
0001e1 81a8      	LD   R26,Y
0001e2 31af      	CPI  R26,LOW(0x1F)
0001e3 f4d0      	BRSH _0x2E
                 ; 0000 00CD                 {
                 ; 0000 00CE                     enter_array[i] = enter_array[i + 1];
0001e4 81e8      	LD   R30,Y
0001e5 940e 07b6 	CALL SUBOPT_0xE
0001e7 010f      	MOVW R0,R30
0001e8 81a8      	LD   R26,Y
0001e9 27bb      	CLR  R27
0001ea 0faa      	LSL  R26
0001eb 1fbb      	ROL  R27
                +
0001ec 58a2     +SUBI R26 , LOW ( - _enter_array - ( 2 ) )
0001ed 4fbd     +SBCI R27 , HIGH ( - _enter_array - ( 2 ) )
                 	__ADDW2MN _enter_array,2
0001ee 940e 07c6 	CALL SUBOPT_0x10
                 ; 0000 00CF                     exit_array[i] = exit_array[i + 1];
0001f0 940e 07be 	CALL SUBOPT_0xF
0001f2 010f      	MOVW R0,R30
0001f3 81a8      	LD   R26,Y
0001f4 27bb      	CLR  R27
0001f5 0faa      	LSL  R26
0001f6 1fbb      	ROL  R27
                +
0001f7 54a4     +SUBI R26 , LOW ( - _exit_array - ( 2 ) )
0001f8 4fbd     +SBCI R27 , HIGH ( - _exit_array - ( 2 ) )
                 	__ADDW2MN _exit_array,2
0001f9 940e 07c6 	CALL SUBOPT_0x10
                 ; 0000 00D0                     i++;
0001fb 5fef      	SUBI R30,-LOW(1)
0001fc 83e8      	ST   Y,R30
                 ; 0000 00D1                 }
0001fd cfe3      	RJMP _0x2C
                 _0x2E:
                 ; 0000 00D2             }
0001fe 9621      	ADIW R28,1
                 ; 0000 00D3             else // increment array index
0001ff c001      	RJMP _0x2F
                 _0x2B:
                 ; 0000 00D4                 day_index++;
000200 9493      	INC  R9
                 ; 0000 00D5 
                 ; 0000 00D6             while (hour == 0 & minute == 0 & second == 0)
                 _0x2F:
                 _0x30:
000201 940e 07a3 	CALL SUBOPT_0xD
000203 f039      	BREQ _0x32
                 ; 0000 00D7             {
                 ; 0000 00D8                 lcd_clear();
000204 940e 06b6 	CALL _lcd_clear
                 ; 0000 00D9                 lcd_putsf("saving data");
                +
000206 e8a9     +LDI R26 , LOW ( 2 * _0x0 + ( 11 ) )
000207 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 11 ) )
                 	__POINTW2FN _0x0,11
000208 940e 06ec 	CALL _lcd_putsf
                 ; 0000 00DA             }
00020a cff6      	RJMP _0x30
                 _0x32:
                 ; 0000 00DB         }
                 ; 0000 00DC 
                 ; 0000 00DD         sprintf(line, "C=%d %d/%d/%d", capacity, year, month, day);
                 _0x2A:
00020b 01fe      	MOVW R30,R28
00020c 9671      	ADIW R30,17
00020d 93fa      	ST   -Y,R31
00020e 93ea      	ST   -Y,R30
                +
00020f e9e5     +LDI R30 , LOW ( 2 * _0x0 + ( 23 ) )
000210 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 23 ) )
                 	__POINTW1FN _0x0,23
000211 93fa      	ST   -Y,R31
000212 93ea      	ST   -Y,R30
000213 2deb      	MOV  R30,R11
000214 940e 07cd 	CALL SUBOPT_0x11
000216 940e 07d3 	CALL SUBOPT_0x12
000218 940e 07dc 	CALL SUBOPT_0x13
00021a 940e 07e5 	CALL SUBOPT_0x14
00021c e180      	LDI  R24,16
00021d 940e 0642 	CALL _sprintf
00021f 9664      	ADIW R28,20
                 ; 0000 00DE         sprintf(line2, "%d:%d:%d  R=%d ", hour, minute, second, reserved);
000220 940e 07ee 	CALL SUBOPT_0x15
                +
000222 eae3     +LDI R30 , LOW ( 2 * _0x0 + ( 37 ) )
000223 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 37 ) )
                 	__POINTW1FN _0x0,37
000224 940e 07f2 	CALL SUBOPT_0x16
000226 940e 07fd 	CALL SUBOPT_0x17
000228 01f6      	MOVW R30,R12
000229 940e 0806 	CALL SUBOPT_0x18
00022b 2de8      	MOV  R30,R8
00022c 940e 07cd 	CALL SUBOPT_0x11
00022e e180      	LDI  R24,16
00022f 940e 0642 	CALL _sprintf
000231 9664      	ADIW R28,20
                 ; 0000 00DF         lcd_clear();
000232 940e 06b6 	CALL _lcd_clear
                 ; 0000 00E0         lcd_puts(line);
000234 01de      	MOVW R26,R28
000235 9651      	ADIW R26,17
000236 940e 06dd 	CALL _lcd_puts
                 ; 0000 00E1         lcd_gotoxy(0, 1);
000238 940e 079a 	CALL SUBOPT_0xB
                 ; 0000 00E2         lcd_puts(line2);
00023a 940e 080b 	CALL SUBOPT_0x19
                 ; 0000 00E3         delay_ms(25);
00023c 940e 080e 	CALL SUBOPT_0x1A
                 ; 0000 00E4     }
00023e cf8a      	RJMP _0x23
                 ; 0000 00E5 }
                 _0x33:
00023f cfff      	RJMP _0x33
                 ; .FEND
                 ;
                 ;/// Functions 4 menu and...
                 ;char menu(void)
                 ; 0000 00E9 {
                 _menu:
                 ; .FSTART _menu
                 ; 0000 00EA     char choice = 0;
                 ; 0000 00EB     while (1)
000240 931a      	ST   -Y,R17
                 ;	choice -> R17
000241 e010      	LDI  R17,0
                 _0x34:
                 ; 0000 00EC     {
                 ; 0000 00ED         // iterate through menu items
                 ; 0000 00EE         if (choice == 0)
000242 3010      	CPI  R17,0
000243 f431      	BRNE _0x37
                 ; 0000 00EF         {
                 ; 0000 00F0             lcd_clear();
000244 940e 06b6 	CALL _lcd_clear
                 ; 0000 00F1             lcd_putsf("Time Setting >>");
                +
000246 eba3     +LDI R26 , LOW ( 2 * _0x0 + ( 53 ) )
000247 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 53 ) )
                 	__POINTW2FN _0x0,53
000248 940e 06ec 	CALL _lcd_putsf
                 ; 0000 00F2         }
                 ; 0000 00F3         if (choice == 1)
                 _0x37:
00024a 3011      	CPI  R17,1
00024b f431      	BRNE _0x38
                 ; 0000 00F4         {
                 ; 0000 00F5             lcd_clear();
00024c 940e 06b6 	CALL _lcd_clear
                 ; 0000 00F6             lcd_putsf("IN&OUT Search >>");
                +
00024e eca3     +LDI R26 , LOW ( 2 * _0x0 + ( 69 ) )
00024f e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 69 ) )
                 	__POINTW2FN _0x0,69
000250 940e 06ec 	CALL _lcd_putsf
                 ; 0000 00F7         }
                 ; 0000 00F8         if (choice == 2)
                 _0x38:
000252 3012      	CPI  R17,2
000253 f431      	BRNE _0x39
                 ; 0000 00F9         {
                 ; 0000 00FA             lcd_clear();
000254 940e 06b6 	CALL _lcd_clear
                 ; 0000 00FB             lcd_putsf("Reserve_Park >>");
                +
000256 eda4     +LDI R26 , LOW ( 2 * _0x0 + ( 86 ) )
000257 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 86 ) )
                 	__POINTW2FN _0x0,86
000258 940e 06ec 	CALL _lcd_putsf
                 ; 0000 00FC         }
                 ; 0000 00FD         if (choice == 3)
                 _0x39:
00025a 3013      	CPI  R17,3
00025b f431      	BRNE _0x3A
                 ; 0000 00FE         {
                 ; 0000 00FF             lcd_clear();
00025c 940e 06b6 	CALL _lcd_clear
                 ; 0000 0100             lcd_putsf("Set date >>");
                +
00025e eea4     +LDI R26 , LOW ( 2 * _0x0 + ( 102 ) )
00025f e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 102 ) )
                 	__POINTW2FN _0x0,102
000260 940e 06ec 	CALL _lcd_putsf
                 ; 0000 0101         }
                 ; 0000 0102         if (PINA .3 == 0) // next item
                 _0x3A:
000262 99cb      	SBIC 0x19,3
000263 c006      	RJMP _0x3B
                 ; 0000 0103         {
                 ; 0000 0104             while (PINA .3 == 0)
                 _0x3C:
000264 9bcb      	SBIS 0x19,3
                 ; 0000 0105                 ;
000265 cffe      	RJMP _0x3C
                 ; 0000 0106             choice++;
000266 5f1f      	SUBI R17,-1
                 ; 0000 0107             if (choice >= 4)
000267 3014      	CPI  R17,4
000268 f008      	BRLO _0x3F
                 ; 0000 0108                 choice = 0;
000269 e010      	LDI  R17,LOW(0)
                 ; 0000 0109         }
                 _0x3F:
                 ; 0000 010A 
                 ; 0000 010B         if (PINA .4 == 0) // close menu
                 _0x3B:
00026a 99cc      	SBIC 0x19,4
00026b c004      	RJMP _0x40
                 ; 0000 010C         {                 // Back
                 ; 0000 010D             while (PINA .4 == 0)
                 _0x41:
00026c 9bcc      	SBIS 0x19,4
                 ; 0000 010E                 ;
00026d cffe      	RJMP _0x41
                 ; 0000 010F             return 0;
00026e e0e0      	LDI  R30,LOW(0)
00026f c025      	RJMP _0x2080008
                 ; 0000 0110         }
                 ; 0000 0111 
                 ; 0000 0112         // choose time_setting
                 ; 0000 0113         if (PINA .2 == 0 & choice == 0)
                 _0x40:
000270 940e 0812 	CALL SUBOPT_0x1B
000272 940e 081b 	CALL SUBOPT_0x1C
000274 f019      	BREQ _0x44
                 ; 0000 0114         {
                 ; 0000 0115             while (PINA .2 == 0)
                 _0x45:
000275 9bca      	SBIS 0x19,2
                 ; 0000 0116                 ;
000276 cffe      	RJMP _0x45
                 ; 0000 0117             set_time();
000277 d01f      	RCALL _set_time
                 ; 0000 0118         }
                 ; 0000 0119 
                 ; 0000 011A         // choose in_out_search
                 ; 0000 011B         if (PINA .2 == 0 & choice == 1)
                 _0x44:
000278 940e 0812 	CALL SUBOPT_0x1B
00027a 940e 0820 	CALL SUBOPT_0x1D
00027c f019      	BREQ _0x48
                 ; 0000 011C         {
                 ; 0000 011D             while (PINA .2 == 0)
                 _0x49:
00027d 9bca      	SBIS 0x19,2
                 ; 0000 011E                 ;
00027e cffe      	RJMP _0x49
                 ; 0000 011F             in_out_search();
00027f d098      	RCALL _in_out_search
                 ; 0000 0120         }
                 ; 0000 0121 
                 ; 0000 0122         // choose reserve
                 ; 0000 0123         if (PINA .2 == 0 & choice == 2)
                 _0x48:
000280 940e 0812 	CALL SUBOPT_0x1B
000282 940e 0825 	CALL SUBOPT_0x1E
000284 f019      	BREQ _0x4C
                 ; 0000 0124         {
                 ; 0000 0125             while (PINA .2 == 0)
                 _0x4D:
000285 9bca      	SBIS 0x19,2
                 ; 0000 0126                 ;
000286 cffe      	RJMP _0x4D
                 ; 0000 0127             reserve_park();
000287 d16e      	RCALL _reserve_park
                 ; 0000 0128         }
                 ; 0000 0129 
                 ; 0000 012A         // choose set date
                 ; 0000 012B         if (PINA .2 == 0 & choice == 3)
                 _0x4C:
000288 940e 0812 	CALL SUBOPT_0x1B
00028a e0e3      	LDI  R30,LOW(3)
00028b 940e 08d1 	CALL __EQB12
00028d 21e0      	AND  R30,R0
00028e f019      	BREQ _0x50
                 ; 0000 012C         {
                 ; 0000 012D             while (PINA .2 == 0)
                 _0x51:
00028f 9bca      	SBIS 0x19,2
                 ; 0000 012E                 ;
000290 cffe      	RJMP _0x51
                 ; 0000 012F             set_date();
000291 d18f      	RCALL _set_date
                 ; 0000 0130         }
                 ; 0000 0131 
                 ; 0000 0132         delay_ms(25);
                 _0x50:
000292 940e 080e 	CALL SUBOPT_0x1A
                 ; 0000 0133     }
000294 cfad      	RJMP _0x34
                 ; 0000 0134 }
                 _0x2080008:
000295 9119      	LD   R17,Y+
000296 9508      	RET
                 ; .FEND
                 ;
                 ;// Time setting
                 ;char set_time(void)
                 ; 0000 0138 {
                 _set_time:
                 ; .FSTART _set_time
000297 92ff      	PUSH R15
                 ; 0000 0139     bit choice = 0;
                 ; 0000 013A     char line[17];
                 ; 0000 013B     while (1)
000298 9761      	SBIW R28,17
                 ;	choice -> R15.0
                 ;	line -> Y+0
000299 24ff      	CLR  R15
                 _0x54:
                 ; 0000 013C     {
                 ; 0000 013D         if (choice == 0)
00029a fcf0      	SBRC R15,0
00029b c00a      	RJMP _0x57
                 ; 0000 013E         {
                 ; 0000 013F             sprintf(line, "Set min=%d  >", minute);
00029c 940e 07ee 	CALL SUBOPT_0x15
                +
00029e efe0     +LDI R30 , LOW ( 2 * _0x0 + ( 114 ) )
00029f e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 114 ) )
                 	__POINTW1FN _0x0,114
0002a0 93fa      	ST   -Y,R31
0002a1 93ea      	ST   -Y,R30
0002a2 940e 07fd 	CALL SUBOPT_0x17
0002a4 940e 082a 	CALL SUBOPT_0x1F
                 ; 0000 0140             lcd_clear();
                 ; 0000 0141             lcd_puts(line);
                 ; 0000 0142         }
                 ; 0000 0143 
                 ; 0000 0144         if (choice == 1)
                 _0x57:
0002a6 fef0      	SBRS R15,0
0002a7 c008      	RJMP _0x58
                 ; 0000 0145         {
                 ; 0000 0146             sprintf(line, "Set hour=%d  >", hour);
0002a8 940e 07ee 	CALL SUBOPT_0x15
                +
0002aa efee     +LDI R30 , LOW ( 2 * _0x0 + ( 128 ) )
0002ab e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 128 ) )
                 	__POINTW1FN _0x0,128
0002ac 940e 07f2 	CALL SUBOPT_0x16
0002ae 940e 082a 	CALL SUBOPT_0x1F
                 ; 0000 0147             lcd_clear();
                 ; 0000 0148             lcd_puts(line);
                 ; 0000 0149         }
                 ; 0000 014A 
                 ; 0000 014B         if (PINA .1 == 0 & choice == 0)
                 _0x58:
0002b0 940e 0831 	CALL SUBOPT_0x20
0002b2 940e 081b 	CALL SUBOPT_0x1C
0002b4 f069      	BREQ _0x59
                 ; 0000 014C         { // UP     min
                 ; 0000 014D             while (PINA .1 == 0)
                 _0x5A:
0002b5 9bc9      	SBIS 0x19,1
                 ; 0000 014E                 ;
0002b6 cffe      	RJMP _0x5A
                 ; 0000 014F             minute++;
0002b7 940e 0752 	CALL SUBOPT_0x2
                 ; 0000 0150             if (minute > 59)
0002b9 940e 0748 	CALL SUBOPT_0x0
0002bb 97dc      	SBIW R26,60
0002bc f02c      	BRLT _0x5D
                 ; 0000 0151                 minute = 0;
0002bd e0e0      	LDI  R30,LOW(0)
0002be 93e0 02f8 	STS  _minute,R30
0002c0 93e0 02f9 	STS  _minute+1,R30
                 ; 0000 0152         }
                 _0x5D:
                 ; 0000 0153 
                 ; 0000 0154         if (PINA .0 == 0 & choice == 0)
                 _0x59:
0002c2 940e 083c 	CALL SUBOPT_0x21
0002c4 940e 081b 	CALL SUBOPT_0x1C
0002c6 f099      	BREQ _0x5E
                 ; 0000 0155         { // DOWN    min
                 ; 0000 0156             while (PINA .0 == 0)
                 _0x5F:
0002c7 9bc8      	SBIS 0x19,0
                 ; 0000 0157                 ;
0002c8 cffe      	RJMP _0x5F
                 ; 0000 0158             if (minute == 0)
0002c9 91e0 02f8 	LDS  R30,_minute
0002cb 91f0 02f9 	LDS  R31,_minute+1
0002cd 9730      	SBIW R30,0
0002ce f439      	BRNE _0x62
                 ; 0000 0159                 minute = 59;
0002cf e3eb      	LDI  R30,LOW(59)
0002d0 e0f0      	LDI  R31,HIGH(59)
0002d1 93e0 02f8 	STS  _minute,R30
0002d3 93f0 02f9 	STS  _minute+1,R31
                 ; 0000 015A             else
0002d5 c004      	RJMP _0x63
                 _0x62:
                 ; 0000 015B                 minute--;
0002d6 efa8      	LDI  R26,LOW(_minute)
0002d7 e0b2      	LDI  R27,HIGH(_minute)
0002d8 940e 0847 	CALL SUBOPT_0x22
                 ; 0000 015C         }
                 _0x63:
                 ; 0000 015D 
                 ; 0000 015E         if (PINA .1 == 0 & choice == 1)
                 _0x5E:
0002da 940e 0831 	CALL SUBOPT_0x20
0002dc 940e 0820 	CALL SUBOPT_0x1D
0002de f079      	BREQ _0x64
                 ; 0000 015F         { // UP    hour
                 ; 0000 0160             while (PINA .1 == 0)
                 _0x65:
0002df 9bc9      	SBIS 0x19,1
                 ; 0000 0161                 ;
0002e0 cffe      	RJMP _0x65
                 ; 0000 0162             hour++;
0002e1 efaa      	LDI  R26,LOW(_hour)
0002e2 e0b2      	LDI  R27,HIGH(_hour)
0002e3 940e 084d 	CALL SUBOPT_0x23
                 ; 0000 0163             if (hour > 23)
0002e5 940e 074d 	CALL SUBOPT_0x1
0002e7 9758      	SBIW R26,24
0002e8 f02c      	BRLT _0x68
                 ; 0000 0164                 hour = 0;
0002e9 e0e0      	LDI  R30,LOW(0)
0002ea 93e0 02fa 	STS  _hour,R30
0002ec 93e0 02fb 	STS  _hour+1,R30
                 ; 0000 0165         }
                 _0x68:
                 ; 0000 0166 
                 ; 0000 0167         if (PINA .0 == 0 & choice == 1)
                 _0x64:
0002ee 940e 083c 	CALL SUBOPT_0x21
0002f0 940e 0820 	CALL SUBOPT_0x1D
0002f2 f099      	BREQ _0x69
                 ; 0000 0168         { // DOWN    hour
                 ; 0000 0169             while (PINA .0 == 0)
                 _0x6A:
0002f3 9bc8      	SBIS 0x19,0
                 ; 0000 016A                 ;
0002f4 cffe      	RJMP _0x6A
                 ; 0000 016B             if (hour == 0)
0002f5 91e0 02fa 	LDS  R30,_hour
0002f7 91f0 02fb 	LDS  R31,_hour+1
0002f9 9730      	SBIW R30,0
0002fa f439      	BRNE _0x6D
                 ; 0000 016C                 hour = 23;
0002fb e1e7      	LDI  R30,LOW(23)
0002fc e0f0      	LDI  R31,HIGH(23)
0002fd 93e0 02fa 	STS  _hour,R30
0002ff 93f0 02fb 	STS  _hour+1,R31
                 ; 0000 016D             else
000301 c004      	RJMP _0x6E
                 _0x6D:
                 ; 0000 016E                 hour--;
000302 efaa      	LDI  R26,LOW(_hour)
000303 e0b2      	LDI  R27,HIGH(_hour)
000304 940e 0847 	CALL SUBOPT_0x22
                 ; 0000 016F         }
                 _0x6E:
                 ; 0000 0170 
                 ; 0000 0171         if (PINA .3 == 0)
                 _0x69:
000306 99cb      	SBIC 0x19,3
000307 c004      	RJMP _0x6F
                 ; 0000 0172         { // NEXT
                 ; 0000 0173             while (PINA .3 == 0)
                 _0x70:
000308 9bcb      	SBIS 0x19,3
                 ; 0000 0174                 ;
000309 cffe      	RJMP _0x70
                 ; 0000 0175             choice = !choice;
00030a e0e1      	LDI  R30,LOW(1)
00030b 26fe      	EOR  R15,R30
                 ; 0000 0176         }
                 ; 0000 0177 
                 ; 0000 0178         if (PINA .4 == 0)
                 _0x6F:
00030c 99cc      	SBIC 0x19,4
00030d c004      	RJMP _0x73
                 ; 0000 0179         { // Back
                 ; 0000 017A             while (PINA .4 == 0)
                 _0x74:
00030e 9bcc      	SBIS 0x19,4
                 ; 0000 017B                 ;
00030f cffe      	RJMP _0x74
                 ; 0000 017C             return 0;
000310 e0e0      	LDI  R30,LOW(0)
000311 c003      	RJMP _0x2080007
                 ; 0000 017D         }
                 ; 0000 017E 
                 ; 0000 017F         delay_ms(25);
                 _0x73:
000312 940e 080e 	CALL SUBOPT_0x1A
                 ; 0000 0180     }
000314 cf85      	RJMP _0x54
                 ; 0000 0181 }
                 _0x2080007:
000315 9661      	ADIW R28,17
000316 90ff      	POP  R15
000317 9508      	RET
                 ; .FEND
                 ;
                 ;// IN&OUT Search
                 ;char in_out_search(void)
                 ; 0000 0185 {
                 _in_out_search:
                 ; .FSTART _in_out_search
                 ; 0000 0186     char line[17], line2[17];
                 ; 0000 0187     int temp_year = year, temp_month = month, temp_day = day;
                 ; 0000 0188     int temp_day_index = day_index;
                 ; 0000 0189 
                 ; 0000 018A     while (1)
000318 97a4      	SBIW R28,36
000319 940e 08e9 	CALL __SAVELOCR6
                 ;	line -> Y+25
                 ;	line2 -> Y+8
                 ;	temp_year -> R16,R17
                 ;	temp_month -> R18,R19
                 ;	temp_day -> R20,R21
                 ;	temp_day_index -> Y+6
                +
00031b 9100 0300+LDS R16 , 0 + ( _year )
00031d 9110 0301+LDS R17 , 0 + ( _year ) + 1
                 	__GETWRMN 16,17,0,_year
                +
00031f 9120 02fe+LDS R18 , 0 + ( _month )
000321 9130 02ff+LDS R19 , 0 + ( _month ) + 1
                 	__GETWRMN 18,19,0,_month
                +
000323 9140 02fc+LDS R20 , 0 + ( _day )
000325 9150 02fd+LDS R21 , 0 + ( _day ) + 1
                 	__GETWRMN 20,21,0,_day
000327 2de9      	MOV  R30,R9
000328 e0f0      	LDI  R31,0
000329 83ee      	STD  Y+6,R30
00032a 83ff      	STD  Y+6+1,R31
                 _0x77:
                 ; 0000 018B     {
                 ; 0000 018C         // UP
                 ; 0000 018D         if (PINA .1 == 0)
00032b 99c9      	SBIC 0x19,1
00032c c03e      	RJMP _0x7A
                 ; 0000 018E         {
                 ; 0000 018F             while (PINA .1 == 0)
                 _0x7B:
00032d 9bc9      	SBIS 0x19,1
                 ; 0000 0190                 ;
00032e cffe      	RJMP _0x7B
                 ; 0000 0191             if (temp_day_index >= day_index)
00032f 2de9      	MOV  R30,R9
000330 81ae      	LDD  R26,Y+6
000331 81bf      	LDD  R27,Y+6+1
000332 e0f0      	LDI  R31,0
000333 17ae      	CP   R26,R30
000334 07bf      	CPC  R27,R31
000335 f04c      	BRLT _0x7E
                 ; 0000 0192             {
                 ; 0000 0193                 lcd_clear();
000336 940e 06b6 	CALL _lcd_clear
                 ; 0000 0194                 lcd_puts("Out of index.");
                +
000338 e6a0     +LDI R26 , LOW ( _0x7F + ( 0 ) )
000339 e0b2     +LDI R27 , HIGH ( _0x7F + ( 0 ) )
                 	__POINTW2MN _0x7F,0
00033a 940e 06dd 	CALL _lcd_puts
                 ; 0000 0195                 delay_ms(300);
00033c 940e 079f 	CALL SUBOPT_0xC
                 ; 0000 0196             }
                 ; 0000 0197             else
00033e c02c      	RJMP _0x80
                 _0x7E:
                 ; 0000 0198             {
                 ; 0000 0199                 temp_day++;
                +
00033f 5f4f     +SUBI R20 , LOW ( - 1 )
000340 4f5f     +SBCI R21 , HIGH ( - 1 )
                 	__ADDWRN 20,21,1
                 ; 0000 019A                 temp_day_index++;
000341 81ee      	LDD  R30,Y+6
000342 81ff      	LDD  R31,Y+6+1
000343 9631      	ADIW R30,1
000344 83ee      	STD  Y+6,R30
000345 83ff      	STD  Y+6+1,R31
                 ; 0000 019B 
                 ; 0000 019C                 // logic of day, month
                 ; 0000 019D                 if (temp_month <= 6)
                +
000346 3027     +CPI R18 , LOW ( 7 )
000347 e0e0     +LDI R30 , HIGH ( 7 )
000348 073e     +CPC R19 , R30
                 	__CPWRN 18,19,7
000349 f43c      	BRGE _0x81
                 ; 0000 019E                 {
                 ; 0000 019F                     if (temp_day > 31)
                +
00034a 3240     +CPI R20 , LOW ( 32 )
00034b e0e0     +LDI R30 , HIGH ( 32 )
00034c 075e     +CPC R21 , R30
                 	__CPWRN 20,21,32
00034d f014      	BRLT _0x82
                 ; 0000 01A0                     {
                 ; 0000 01A1                         temp_day = 1;
00034e 940e 0853 	CALL SUBOPT_0x24
                 ; 0000 01A2                         temp_month++;
                 ; 0000 01A3                     }
                 ; 0000 01A4                 }
                 _0x82:
                 ; 0000 01A5                 else
000350 c012      	RJMP _0x83
                 _0x81:
                 ; 0000 01A6                 {
                 ; 0000 01A7                     if (temp_month == 12)
000351 e0ec      	LDI  R30,LOW(12)
000352 e0f0      	LDI  R31,HIGH(12)
000353 17e2      	CP   R30,R18
000354 07f3      	CPC  R31,R19
000355 f439      	BRNE _0x84
                 ; 0000 01A8                     {
                 ; 0000 01A9                         if (temp_day > 29)
                +
000356 314e     +CPI R20 , LOW ( 30 )
000357 e0e0     +LDI R30 , HIGH ( 30 )
000358 075e     +CPC R21 , R30
                 	__CPWRN 20,21,30
000359 f014      	BRLT _0x85
                 ; 0000 01AA                         {
                 ; 0000 01AB                             temp_day = 1;
00035a 940e 0853 	CALL SUBOPT_0x24
                 ; 0000 01AC                             temp_month++;
                 ; 0000 01AD                         }
                 ; 0000 01AE                     }
                 _0x85:
                 ; 0000 01AF                     else
00035c c006      	RJMP _0x86
                 _0x84:
                 ; 0000 01B0                     {
                 ; 0000 01B1                         if (temp_day > 30)
                +
00035d 314f     +CPI R20 , LOW ( 31 )
00035e e0e0     +LDI R30 , HIGH ( 31 )
00035f 075e     +CPC R21 , R30
                 	__CPWRN 20,21,31
000360 f014      	BRLT _0x87
                 ; 0000 01B2                         {
                 ; 0000 01B3                             temp_day = 1;
000361 940e 0853 	CALL SUBOPT_0x24
                 ; 0000 01B4                             temp_month++;
                 ; 0000 01B5                         }
                 ; 0000 01B6                     }
                 _0x87:
                 _0x86:
                 ; 0000 01B7                 }
                 _0x83:
                 ; 0000 01B8 
                 ; 0000 01B9                 // logic of year
                 ; 0000 01BA                 if (temp_month > 12)
                +
000363 302d     +CPI R18 , LOW ( 13 )
000364 e0e0     +LDI R30 , HIGH ( 13 )
000365 073e     +CPC R19 , R30
                 	__CPWRN 18,19,13
000366 f024      	BRLT _0x88
                 ; 0000 01BB                 {
                 ; 0000 01BC                     temp_month = 1;
                +
000367 e021     +LDI R18 , LOW ( 1 )
000368 e030     +LDI R19 , HIGH ( 1 )
                 	__GETWRN 18,19,1
                 ; 0000 01BD                     temp_year++;
                +
000369 5f0f     +SUBI R16 , LOW ( - 1 )
00036a 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
                 ; 0000 01BE                 }
                 ; 0000 01BF             }
                 _0x88:
                 _0x80:
                 ; 0000 01C0         }
                 ; 0000 01C1 
                 ; 0000 01C2         // DOWN
                 ; 0000 01C3         if (PINA .0 == 0)
                 _0x7A:
00036b 99c8      	SBIC 0x19,0
00036c c043      	RJMP _0x89
                 ; 0000 01C4         {
                 ; 0000 01C5             while (PINA .0 == 0)
                 _0x8A:
00036d 9bc8      	SBIS 0x19,0
                 ; 0000 01C6                 ;
00036e cffe      	RJMP _0x8A
                 ; 0000 01C7 
                 ; 0000 01C8             if (temp_day_index == 0)
00036f 81ee      	LDD  R30,Y+6
000370 81ff      	LDD  R31,Y+6+1
000371 9730      	SBIW R30,0
000372 f449      	BRNE _0x8D
                 ; 0000 01C9             {
                 ; 0000 01CA                 lcd_clear();
000373 940e 06b6 	CALL _lcd_clear
                 ; 0000 01CB                 lcd_puts("Out of index.");
                +
000375 e6ae     +LDI R26 , LOW ( _0x7F + ( 14 ) )
000376 e0b2     +LDI R27 , HIGH ( _0x7F + ( 14 ) )
                 	__POINTW2MN _0x7F,14
000377 940e 06dd 	CALL _lcd_puts
                 ; 0000 01CC                 delay_ms(300);
000379 940e 079f 	CALL SUBOPT_0xC
                 ; 0000 01CD             }
                 ; 0000 01CE             else
00037b c034      	RJMP _0x8E
                 _0x8D:
                 ; 0000 01CF             {
                 ; 0000 01D0                 temp_day_index--;
00037c 81ee      	LDD  R30,Y+6
00037d 81ff      	LDD  R31,Y+6+1
00037e 9731      	SBIW R30,1
00037f 83ee      	STD  Y+6,R30
000380 83ff      	STD  Y+6+1,R31
                 ; 0000 01D1                 if (temp_day == 1)
000381 e0e1      	LDI  R30,LOW(1)
000382 e0f0      	LDI  R31,HIGH(1)
000383 17e4      	CP   R30,R20
000384 07f5      	CPC  R31,R21
000385 f541      	BRNE _0x8F
                 ; 0000 01D2                 {
                 ; 0000 01D3                     if (temp_month == 1)
000386 17e2      	CP   R30,R18
000387 07f3      	CPC  R31,R19
000388 f429      	BRNE _0x90
                 ; 0000 01D4                     {
                 ; 0000 01D5                         temp_month = 12;
                +
000389 e02c     +LDI R18 , LOW ( 12 )
00038a e030     +LDI R19 , HIGH ( 12 )
                 	__GETWRN 18,19,12
                 ; 0000 01D6                         temp_year--;
                +
00038b 5001     +SUBI R16 , LOW ( 1 )
00038c 4010     +SBCI R17 , HIGH ( 1 )
                 	__SUBWRN 16,17,1
                 ; 0000 01D7                     }
                 ; 0000 01D8                     else
00038d c002      	RJMP _0x91
                 _0x90:
                 ; 0000 01D9                         temp_month--;
                +
00038e 5021     +SUBI R18 , LOW ( 1 )
00038f 4030     +SBCI R19 , HIGH ( 1 )
                 	__SUBWRN 18,19,1
                 ; 0000 01DA 
                 ; 0000 01DB                     if (1 <= temp_month && temp_month <= 6)
                 _0x91:
                +
000390 3021     +CPI R18 , LOW ( 1 )
000391 e0e0     +LDI R30 , HIGH ( 1 )
000392 073e     +CPC R19 , R30
                 	__CPWRN 18,19,1
000393 f024      	BRLT _0x93
                +
000394 3027     +CPI R18 , LOW ( 7 )
000395 e0e0     +LDI R30 , HIGH ( 7 )
000396 073e     +CPC R19 , R30
                 	__CPWRN 18,19,7
000397 f00c      	BRLT _0x94
                 _0x93:
000398 c002      	RJMP _0x92
                 _0x94:
                 ; 0000 01DC                         temp_day = 31;
                +
000399 e14f     +LDI R20 , LOW ( 31 )
00039a e050     +LDI R21 , HIGH ( 31 )
                 	__GETWRN 20,21,31
                 ; 0000 01DD                     if (7 <= temp_month && temp_month <= 11)
                 _0x92:
                +
00039b 3027     +CPI R18 , LOW ( 7 )
00039c e0e0     +LDI R30 , HIGH ( 7 )
00039d 073e     +CPC R19 , R30
                 	__CPWRN 18,19,7
00039e f024      	BRLT _0x96
                +
00039f 302c     +CPI R18 , LOW ( 12 )
0003a0 e0e0     +LDI R30 , HIGH ( 12 )
0003a1 073e     +CPC R19 , R30
                 	__CPWRN 18,19,12
0003a2 f00c      	BRLT _0x97
                 _0x96:
0003a3 c002      	RJMP _0x95
                 _0x97:
                 ; 0000 01DE                         temp_day = 30;
                +
0003a4 e14e     +LDI R20 , LOW ( 30 )
0003a5 e050     +LDI R21 , HIGH ( 30 )
                 	__GETWRN 20,21,30
                 ; 0000 01DF                     if (temp_month == 12)
                 _0x95:
0003a6 e0ec      	LDI  R30,LOW(12)
0003a7 e0f0      	LDI  R31,HIGH(12)
0003a8 17e2      	CP   R30,R18
0003a9 07f3      	CPC  R31,R19
0003aa f411      	BRNE _0x98
                 ; 0000 01E0                         temp_day = 29;
                +
0003ab e14d     +LDI R20 , LOW ( 29 )
0003ac e050     +LDI R21 , HIGH ( 29 )
                 	__GETWRN 20,21,29
                 ; 0000 01E1                 }
                 _0x98:
                 ; 0000 01E2                 else
0003ad c002      	RJMP _0x99
                 _0x8F:
                 ; 0000 01E3                     temp_day--;
                +
0003ae 5041     +SUBI R20 , LOW ( 1 )
0003af 4050     +SBCI R21 , HIGH ( 1 )
                 	__SUBWRN 20,21,1
                 ; 0000 01E4             }
                 _0x99:
                 _0x8E:
                 ; 0000 01E5         }
                 ; 0000 01E6 
                 ; 0000 01E7         sprintf(line, "%d/%d/%d", temp_year, temp_month, temp_day);
                 _0x89:
0003b0 01fe      	MOVW R30,R28
0003b1 9679      	ADIW R30,25
0003b2 93fa      	ST   -Y,R31
0003b3 93ea      	ST   -Y,R30
                +
0003b4 e9ea     +LDI R30 , LOW ( 2 * _0x0 + ( 28 ) )
0003b5 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 28 ) )
                 	__POINTW1FN _0x0,28
0003b6 93fa      	ST   -Y,R31
0003b7 93ea      	ST   -Y,R30
0003b8 01f8      	MOVW R30,R16
0003b9 940e 0806 	CALL SUBOPT_0x18
0003bb 01f9      	MOVW R30,R18
0003bc 940e 0806 	CALL SUBOPT_0x18
0003be 01fa      	MOVW R30,R20
0003bf 940e 0806 	CALL SUBOPT_0x18
0003c1 e08c      	LDI  R24,12
0003c2 940e 0642 	CALL _sprintf
0003c4 9660      	ADIW R28,16
                 ; 0000 01E8         sprintf(line2, "in=%d out=%d", enter_array[temp_day_index], exit_array[temp_day_index]);
0003c5 01fe      	MOVW R30,R28
0003c6 9638      	ADIW R30,8
0003c7 93fa      	ST   -Y,R31
0003c8 93ea      	ST   -Y,R30
                +
0003c9 e1eb     +LDI R30 , LOW ( 2 * _0x0 + ( 157 ) )
0003ca e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 157 ) )
                 	__POINTW1FN _0x0,157
0003cb 93fa      	ST   -Y,R31
0003cc 93ea      	ST   -Y,R30
0003cd 85ea      	LDD  R30,Y+10
0003ce 85fb      	LDD  R31,Y+10+1
0003cf e7ac      	LDI  R26,LOW(_enter_array)
0003d0 e0b2      	LDI  R27,HIGH(_enter_array)
0003d1 940e 0858 	CALL SUBOPT_0x25
0003d3 85ee      	LDD  R30,Y+14
0003d4 85ff      	LDD  R31,Y+14+1
0003d5 ebaa      	LDI  R26,LOW(_exit_array)
0003d6 e0b2      	LDI  R27,HIGH(_exit_array)
0003d7 940e 0858 	CALL SUBOPT_0x25
0003d9 e088      	LDI  R24,8
0003da 940e 0642 	CALL _sprintf
0003dc 962c      	ADIW R28,12
                 ; 0000 01E9 
                 ; 0000 01EA         lcd_clear();
0003dd 940e 06b6 	CALL _lcd_clear
                 ; 0000 01EB         lcd_puts(line);
0003df 01de      	MOVW R26,R28
0003e0 9659      	ADIW R26,25
0003e1 940e 06dd 	CALL _lcd_puts
                 ; 0000 01EC         lcd_gotoxy(0, 1);
0003e3 940e 079a 	CALL SUBOPT_0xB
                 ; 0000 01ED         lcd_puts(line2);
0003e5 01de      	MOVW R26,R28
0003e6 9618      	ADIW R26,8
0003e7 940e 06dd 	CALL _lcd_puts
                 ; 0000 01EE 
                 ; 0000 01EF         // Back
                 ; 0000 01F0         if (PINA .4 == 0)
0003e9 99cc      	SBIC 0x19,4
0003ea c004      	RJMP _0x9A
                 ; 0000 01F1         {
                 ; 0000 01F2             while (PINA .4 == 0)
                 _0x9B:
0003eb 9bcc      	SBIS 0x19,4
                 ; 0000 01F3                 ;
0003ec cffe      	RJMP _0x9B
                 ; 0000 01F4             return 0;
0003ed e0e0      	LDI  R30,LOW(0)
0003ee c003      	RJMP _0x2080006
                 ; 0000 01F5         }
                 ; 0000 01F6         delay_ms(25);
                 _0x9A:
0003ef 940e 080e 	CALL SUBOPT_0x1A
                 ; 0000 01F7     }
0003f1 cf39      	RJMP _0x77
                 ; 0000 01F8 }
                 _0x2080006:
0003f2 940e 08f0 	CALL __LOADLOCR6
0003f4 96aa      	ADIW R28,42
0003f5 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0x7F:
000260           	.BYTE 0x1C
                 ;
                 ;// reserve_park
                 ;char reserve_park(void)
                 ; 0000 01FC {
                 
                 	.CSEG
                 _reserve_park:
                 ; .FSTART _reserve_park
                 ; 0000 01FD     char line[17];
                 ; 0000 01FE 
                 ; 0000 01FF     while (1)
0003f6 9761      	SBIW R28,17
                 ;	line -> Y+0
                 _0x9E:
                 ; 0000 0200     {
                 ; 0000 0201         sprintf(line, "Reserved=%d", reserved);
0003f7 940e 07ee 	CALL SUBOPT_0x15
                +
0003f9 e2e8     +LDI R30 , LOW ( 2 * _0x0 + ( 170 ) )
0003fa e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 170 ) )
                 	__POINTW1FN _0x0,170
0003fb 93fa      	ST   -Y,R31
0003fc 93ea      	ST   -Y,R30
0003fd 2de8      	MOV  R30,R8
0003fe 940e 07cd 	CALL SUBOPT_0x11
000400 940e 082a 	CALL SUBOPT_0x1F
                 ; 0000 0202         lcd_clear();
                 ; 0000 0203         lcd_puts(line);
                 ; 0000 0204 
                 ; 0000 0205         if (PINA .1 == 0)
000402 99c9      	SBIC 0x19,1
000403 c004      	RJMP _0xA1
                 ; 0000 0206         {
                 ; 0000 0207             while (PINA .1 == 0)
                 _0xA2:
000404 9bc9      	SBIS 0x19,1
                 ; 0000 0208                 ;
000405 cffe      	RJMP _0xA2
                 ; 0000 0209             reserved++;
000406 9483      	INC  R8
                 ; 0000 020A             capacity--;
000407 94ba      	DEC  R11
                 ; 0000 020B         }
                 ; 0000 020C 
                 ; 0000 020D         if (reserved >= init_capacity)
                 _0xA1:
000408 e0ea      	LDI  R30,LOW(10)
000409 168e      	CP   R8,R30
00040a f010      	BRLO _0xA5
                 ; 0000 020E         {
                 ; 0000 020F             reserved = init_capacity - 1;
00040b e0e9      	LDI  R30,LOW(9)
00040c 2e8e      	MOV  R8,R30
                 ; 0000 0210         }
                 ; 0000 0211 
                 ; 0000 0212         if (PINA .0 == 0)
                 _0xA5:
00040d 99c8      	SBIC 0x19,0
00040e c004      	RJMP _0xA6
                 ; 0000 0213         {
                 ; 0000 0214             while (PINA .0 == 0)
                 _0xA7:
00040f 9bc8      	SBIS 0x19,0
                 ; 0000 0215                 ;
000410 cffe      	RJMP _0xA7
                 ; 0000 0216             reserved--;
000411 948a      	DEC  R8
                 ; 0000 0217             capacity++;
000412 94b3      	INC  R11
                 ; 0000 0218         }
                 ; 0000 0219 
                 ; 0000 021A         if (reserved <= 0)
                 _0xA6:
000413 2088      	TST  R8
000414 f409      	BRNE _0xAA
                 ; 0000 021B         {
                 ; 0000 021C             reserved = 0;
000415 2488      	CLR  R8
                 ; 0000 021D         }
                 ; 0000 021E 
                 ; 0000 021F         if (PINA .4 == 0)
                 _0xAA:
000416 99cc      	SBIC 0x19,4
000417 c004      	RJMP _0xAB
                 ; 0000 0220         { // Back
                 ; 0000 0221             while (PINA .4 == 0)
                 _0xAC:
000418 9bcc      	SBIS 0x19,4
                 ; 0000 0222                 ;
000419 cffe      	RJMP _0xAC
                 ; 0000 0223             return 0;
00041a e0e0      	LDI  R30,LOW(0)
00041b c003      	RJMP _0x2080005
                 ; 0000 0224         }
                 ; 0000 0225         delay_ms(25);
                 _0xAB:
00041c 940e 080e 	CALL SUBOPT_0x1A
                 ; 0000 0226     }
00041e cfd8      	RJMP _0x9E
                 ; 0000 0227 }
                 _0x2080005:
00041f 9661      	ADIW R28,17
000420 9508      	RET
                 ; .FEND
                 ;
                 ;//// data setting
                 ;char set_date(void)
                 ; 0000 022B {
                 _set_date:
                 ; .FSTART _set_date
                 ; 0000 022C     char choice = 0;
                 ; 0000 022D     char line[17];
                 ; 0000 022E     while (1)
000421 9761      	SBIW R28,17
000422 931a      	ST   -Y,R17
                 ;	choice -> R17
                 ;	line -> Y+1
000423 e010      	LDI  R17,0
                 _0xAF:
                 ; 0000 022F     {
                 ; 0000 0230         if (choice == 1)
000424 3011      	CPI  R17,1
000425 f451      	BRNE _0xB2
                 ; 0000 0231         {
                 ; 0000 0232             sprintf(line, "Set month=%d  >", month);
000426 940e 085f 	CALL SUBOPT_0x26
                +
000428 e3e4     +LDI R30 , LOW ( 2 * _0x0 + ( 182 ) )
000429 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 182 ) )
                 	__POINTW1FN _0x0,182
00042a 93fa      	ST   -Y,R31
00042b 93ea      	ST   -Y,R30
00042c 940e 07dc 	CALL SUBOPT_0x13
00042e 940e 0864 	CALL SUBOPT_0x27
                 ; 0000 0233             lcd_clear();
                 ; 0000 0234             lcd_puts(line);
                 ; 0000 0235         }
                 ; 0000 0236 
                 ; 0000 0237         if (choice == 0)
                 _0xB2:
000430 3010      	CPI  R17,0
000431 f451      	BRNE _0xB3
                 ; 0000 0238         {
                 ; 0000 0239             sprintf(line, "Set day=%d  >", day);
000432 940e 085f 	CALL SUBOPT_0x26
                +
000434 e4e4     +LDI R30 , LOW ( 2 * _0x0 + ( 198 ) )
000435 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 198 ) )
                 	__POINTW1FN _0x0,198
000436 93fa      	ST   -Y,R31
000437 93ea      	ST   -Y,R30
000438 940e 07e5 	CALL SUBOPT_0x14
00043a 940e 0864 	CALL SUBOPT_0x27
                 ; 0000 023A             lcd_clear();
                 ; 0000 023B             lcd_puts(line);
                 ; 0000 023C         }
                 ; 0000 023D 
                 ; 0000 023E         if (choice == 2)
                 _0xB3:
00043c 3012      	CPI  R17,2
00043d f451      	BRNE _0xB4
                 ; 0000 023F         {
                 ; 0000 0240             sprintf(line, "Set year=%d  >", year);
00043e 940e 085f 	CALL SUBOPT_0x26
                +
000440 e5e2     +LDI R30 , LOW ( 2 * _0x0 + ( 212 ) )
000441 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 212 ) )
                 	__POINTW1FN _0x0,212
000442 93fa      	ST   -Y,R31
000443 93ea      	ST   -Y,R30
000444 940e 07d3 	CALL SUBOPT_0x12
000446 940e 0864 	CALL SUBOPT_0x27
                 ; 0000 0241             lcd_clear();
                 ; 0000 0242             lcd_puts(line);
                 ; 0000 0243         }
                 ; 0000 0244 
                 ; 0000 0245         if (PINA .1 == 0 & choice == 1)
                 _0xB4:
000448 940e 086e 	CALL SUBOPT_0x28
00044a 940e 0820 	CALL SUBOPT_0x1D
00044c f061      	BREQ _0xB5
                 ; 0000 0246         { // UP     month
                 ; 0000 0247             while (PINA .1 == 0)
                 _0xB6:
00044d 9bc9      	SBIS 0x19,1
                 ; 0000 0248                 ;
00044e cffe      	RJMP _0xB6
                 ; 0000 0249             month++;
00044f efae      	LDI  R26,LOW(_month)
000450 e0b2      	LDI  R27,HIGH(_month)
000451 940e 084d 	CALL SUBOPT_0x23
                 ; 0000 024A             if (month > 12)
000453 940e 075a 	CALL SUBOPT_0x3
000455 971d      	SBIW R26,13
000456 f014      	BRLT _0xB9
                 ; 0000 024B                 month = 1;
000457 940e 0772 	CALL SUBOPT_0x6
                 ; 0000 024C         }
                 _0xB9:
                 ; 0000 024D 
                 ; 0000 024E         if (PINA .0 == 0 & choice == 1)
                 _0xB5:
000459 940e 0877 	CALL SUBOPT_0x29
00045b 940e 0820 	CALL SUBOPT_0x1D
00045d f081      	BREQ _0xBA
                 ; 0000 024F         { // DOWN    month
                 ; 0000 0250             while (PINA .0 == 0)
                 _0xBB:
00045e 9bc8      	SBIS 0x19,0
                 ; 0000 0251                 ;
00045f cffe      	RJMP _0xBB
                 ; 0000 0252             month--;
000460 efae      	LDI  R26,LOW(_month)
000461 e0b2      	LDI  R27,HIGH(_month)
000462 940e 0847 	CALL SUBOPT_0x22
                 ; 0000 0253             if (month < 1)
000464 940e 075a 	CALL SUBOPT_0x3
000466 9711      	SBIW R26,1
000467 f434      	BRGE _0xBE
                 ; 0000 0254                 month = 12;
000468 e0ec      	LDI  R30,LOW(12)
000469 e0f0      	LDI  R31,HIGH(12)
00046a 93e0 02fe 	STS  _month,R30
00046c 93f0 02ff 	STS  _month+1,R31
                 ; 0000 0255         }
                 _0xBE:
                 ; 0000 0256 
                 ; 0000 0257         if (PINA .1 == 0 & choice == 0)
                 _0xBA:
00046e 940e 086e 	CALL SUBOPT_0x28
000470 940e 081b 	CALL SUBOPT_0x1C
000472 f091      	BREQ _0xBF
                 ; 0000 0258         { // UP    day
                 ; 0000 0259             while (PINA .1 == 0)
                 _0xC0:
000473 9bc9      	SBIS 0x19,1
                 ; 0000 025A                 ;
000474 cffe      	RJMP _0xC0
                 ; 0000 025B             day++;
000475 efac      	LDI  R26,LOW(_day)
000476 e0b2      	LDI  R27,HIGH(_day)
000477 940e 084d 	CALL SUBOPT_0x23
                 ; 0000 025C             day_index = day;
000479 9090 02fc 	LDS  R9,_day
                 ; 0000 025D             if (day > 31)
00047b 940e 075f 	CALL SUBOPT_0x4
00047d 9790      	SBIW R26,32
00047e f034      	BRLT _0xC3
                 ; 0000 025E                 day = 1;
00047f e0e1      	LDI  R30,LOW(1)
000480 e0f0      	LDI  R31,HIGH(1)
000481 93e0 02fc 	STS  _day,R30
000483 93f0 02fd 	STS  _day+1,R31
                 ; 0000 025F         }
                 _0xC3:
                 ; 0000 0260 
                 ; 0000 0261         if (PINA .0 == 0 & choice == 0)
                 _0xBF:
000485 940e 0877 	CALL SUBOPT_0x29
000487 940e 081b 	CALL SUBOPT_0x1C
000489 f091      	BREQ _0xC4
                 ; 0000 0262         { // DOWN    day
                 ; 0000 0263             while (PINA .0 == 0)
                 _0xC5:
00048a 9bc8      	SBIS 0x19,0
                 ; 0000 0264                 ;
00048b cffe      	RJMP _0xC5
                 ; 0000 0265             day--;
00048c efac      	LDI  R26,LOW(_day)
00048d e0b2      	LDI  R27,HIGH(_day)
00048e 940e 0847 	CALL SUBOPT_0x22
                 ; 0000 0266             day_index = day;
000490 9090 02fc 	LDS  R9,_day
                 ; 0000 0267             if (day < 1)
000492 940e 075f 	CALL SUBOPT_0x4
000494 9711      	SBIW R26,1
000495 f434      	BRGE _0xC8
                 ; 0000 0268                 day = 31;
000496 e1ef      	LDI  R30,LOW(31)
000497 e0f0      	LDI  R31,HIGH(31)
000498 93e0 02fc 	STS  _day,R30
00049a 93f0 02fd 	STS  _day+1,R31
                 ; 0000 0269         }
                 _0xC8:
                 ; 0000 026A 
                 ; 0000 026B         if (PINA .0 == 0 & choice == 2)
                 _0xC4:
00049c 940e 0877 	CALL SUBOPT_0x29
00049e 940e 0825 	CALL SUBOPT_0x1E
0004a0 f099      	BREQ _0xC9
                 ; 0000 026C         { // DOWN    year
                 ; 0000 026D             while (PINA .0 == 0)
                 _0xCA:
0004a1 9bc8      	SBIS 0x19,0
                 ; 0000 026E                 ;
0004a2 cffe      	RJMP _0xCA
                 ; 0000 026F             year--;
0004a3 940e 0779 	CALL SUBOPT_0x7
0004a5 9731      	SBIW R30,1
0004a6 93fe      	ST   -X,R31
0004a7 93ee      	ST   -X,R30
                 ; 0000 0270             if (year < 1)
0004a8 91a0 0300 	LDS  R26,_year
0004aa 91b0 0301 	LDS  R27,_year+1
0004ac 9711      	SBIW R26,1
0004ad f434      	BRGE _0xCD
                 ; 0000 0271                 year = 1300;
0004ae e1e4      	LDI  R30,LOW(1300)
0004af e0f5      	LDI  R31,HIGH(1300)
0004b0 93e0 0300 	STS  _year,R30
0004b2 93f0 0301 	STS  _year+1,R31
                 ; 0000 0272         }
                 _0xCD:
                 ; 0000 0273 
                 ; 0000 0274         if (PINA .1 == 0 & choice == 2)
                 _0xC9:
0004b4 940e 086e 	CALL SUBOPT_0x28
0004b6 940e 0825 	CALL SUBOPT_0x1E
0004b8 f039      	BREQ _0xCE
                 ; 0000 0275         { // UP    year
                 ; 0000 0276             while (PINA .1 == 0)
                 _0xCF:
0004b9 9bc9      	SBIS 0x19,1
                 ; 0000 0277                 ;
0004ba cffe      	RJMP _0xCF
                 ; 0000 0278             year++;
0004bb 940e 0779 	CALL SUBOPT_0x7
0004bd 9631      	ADIW R30,1
0004be 93fe      	ST   -X,R31
0004bf 93ee      	ST   -X,R30
                 ; 0000 0279             // if(year>1404)
                 ; 0000 027A             // year=0;
                 ; 0000 027B         }
                 ; 0000 027C 
                 ; 0000 027D         if (PINA .3 == 0)
                 _0xCE:
0004c0 99cb      	SBIC 0x19,3
0004c1 c006      	RJMP _0xD2
                 ; 0000 027E         { // NEXT
                 ; 0000 027F             while (PINA .3 == 0)
                 _0xD3:
0004c2 9bcb      	SBIS 0x19,3
                 ; 0000 0280                 ;
0004c3 cffe      	RJMP _0xD3
                 ; 0000 0281             choice++;
0004c4 5f1f      	SUBI R17,-1
                 ; 0000 0282             if (choice >= 3)
0004c5 3013      	CPI  R17,3
0004c6 f008      	BRLO _0xD6
                 ; 0000 0283                 choice = 0;
0004c7 e010      	LDI  R17,LOW(0)
                 ; 0000 0284         }
                 _0xD6:
                 ; 0000 0285 
                 ; 0000 0286         if (PINA .4 == 0)
                 _0xD2:
0004c8 99cc      	SBIC 0x19,4
0004c9 c004      	RJMP _0xD7
                 ; 0000 0287         { // Back
                 ; 0000 0288             while (PINA .4 == 0)
                 _0xD8:
0004ca 9bcc      	SBIS 0x19,4
                 ; 0000 0289                 ;
0004cb cffe      	RJMP _0xD8
                 ; 0000 028A             return 0;
0004cc e0e0      	LDI  R30,LOW(0)
0004cd c003      	RJMP _0x2080004
                 ; 0000 028B         }
                 ; 0000 028C 
                 ; 0000 028D         delay_ms(25);
                 _0xD7:
0004ce 940e 080e 	CALL SUBOPT_0x1A
                 ; 0000 028E     }
0004d0 cf53      	RJMP _0xAF
                 ; 0000 028F }
                 _0x2080004:
0004d1 8118      	LDD  R17,Y+0
0004d2 9662      	ADIW R28,18
0004d3 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G100:
                 ; .FSTART _put_buff_G100
0004d4 93ba      	ST   -Y,R27
0004d5 93aa      	ST   -Y,R26
0004d6 931a      	ST   -Y,R17
0004d7 930a      	ST   -Y,R16
0004d8 81aa      	LDD  R26,Y+2
0004d9 81bb      	LDD  R27,Y+2+1
0004da 9612      	ADIW R26,2
0004db 940e 08dc 	CALL __GETW1P
0004dd 9730      	SBIW R30,0
0004de f129      	BREQ _0x2000010
0004df 81aa      	LDD  R26,Y+2
0004e0 81bb      	LDD  R27,Y+2+1
0004e1 9614      	ADIW R26,4
0004e2 940e 08dc 	CALL __GETW1P
0004e4 018f      	MOVW R16,R30
0004e5 9730      	SBIW R30,0
0004e6 f061      	BREQ _0x2000012
                +
0004e7 3002     +CPI R16 , LOW ( 2 )
0004e8 e0e0     +LDI R30 , HIGH ( 2 )
0004e9 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
0004ea f080      	BRLO _0x2000013
0004eb 01f8      	MOVW R30,R16
0004ec 9731      	SBIW R30,1
0004ed 018f      	MOVW R16,R30
                +
0004ee 81aa     +LDD R26 , Y + 2
0004ef 81bb     +LDD R27 , Y + 2 + 1
0004f0 9614     +ADIW R26 , 4
0004f1 93ed     +ST X + , R30
0004f2 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2000012:
0004f3 81aa      	LDD  R26,Y+2
0004f4 81bb      	LDD  R27,Y+2+1
0004f5 9612      	ADIW R26,2
0004f6 940e 084d 	CALL SUBOPT_0x23
0004f8 9731      	SBIW R30,1
0004f9 81ac      	LDD  R26,Y+4
0004fa 83a0      	STD  Z+0,R26
                 _0x2000013:
0004fb 81aa      	LDD  R26,Y+2
0004fc 81bb      	LDD  R27,Y+2+1
0004fd 940e 08dc 	CALL __GETW1P
0004ff 23ff      	TST  R31
000500 f012      	BRMI _0x2000014
000501 940e 084d 	CALL SUBOPT_0x23
                 _0x2000014:
000503 c006      	RJMP _0x2000015
                 _0x2000010:
000504 81aa      	LDD  R26,Y+2
000505 81bb      	LDD  R27,Y+2+1
000506 efef      	LDI  R30,LOW(65535)
000507 efff      	LDI  R31,HIGH(65535)
000508 93ed      	ST   X+,R30
000509 93fc      	ST   X,R31
                 _0x2000015:
00050a 8119      	LDD  R17,Y+1
00050b 8108      	LDD  R16,Y+0
00050c 9625      	ADIW R28,5
00050d 9508      	RET
                 ; .FEND
                 __print_G100:
                 ; .FSTART __print_G100
00050e 93ba      	ST   -Y,R27
00050f 93aa      	ST   -Y,R26
000510 9726      	SBIW R28,6
000511 940e 08e9 	CALL __SAVELOCR6
000513 e010      	LDI  R17,0
000514 85ac      	LDD  R26,Y+12
000515 85bd      	LDD  R27,Y+12+1
000516 e0e0      	LDI  R30,LOW(0)
000517 e0f0      	LDI  R31,HIGH(0)
000518 93ed      	ST   X+,R30
000519 93fc      	ST   X,R31
                 _0x2000016:
00051a 89ea      	LDD  R30,Y+18
00051b 89fb      	LDD  R31,Y+18+1
00051c 9631      	ADIW R30,1
00051d 8bea      	STD  Y+18,R30
00051e 8bfb      	STD  Y+18+1,R31
00051f 9731      	SBIW R30,1
000520 91e4      	LPM  R30,Z
000521 2f2e      	MOV  R18,R30
000522 30e0      	CPI  R30,0
000523 f409      	BRNE PC+2
000524 c115      	RJMP _0x2000018
000525 2fe1      	MOV  R30,R17
000526 30e0      	CPI  R30,0
000527 f439      	BRNE _0x200001C
000528 3225      	CPI  R18,37
000529 f411      	BRNE _0x200001D
00052a e011      	LDI  R17,LOW(1)
00052b c002      	RJMP _0x200001E
                 _0x200001D:
00052c 940e 0880 	CALL SUBOPT_0x2A
                 _0x200001E:
00052e c10a      	RJMP _0x200001B
                 _0x200001C:
00052f 30e1      	CPI  R30,LOW(0x1)
000530 f4a9      	BRNE _0x200001F
000531 3225      	CPI  R18,37
000532 f419      	BRNE _0x2000020
000533 940e 0880 	CALL SUBOPT_0x2A
000535 c102      	RJMP _0x20000CC
                 _0x2000020:
000536 e012      	LDI  R17,LOW(2)
000537 e040      	LDI  R20,LOW(0)
000538 e000      	LDI  R16,LOW(0)
000539 322d      	CPI  R18,45
00053a f411      	BRNE _0x2000021
00053b e001      	LDI  R16,LOW(1)
00053c c0fc      	RJMP _0x200001B
                 _0x2000021:
00053d 322b      	CPI  R18,43
00053e f411      	BRNE _0x2000022
00053f e24b      	LDI  R20,LOW(43)
000540 c0f8      	RJMP _0x200001B
                 _0x2000022:
000541 3220      	CPI  R18,32
000542 f411      	BRNE _0x2000023
000543 e240      	LDI  R20,LOW(32)
000544 c0f4      	RJMP _0x200001B
                 _0x2000023:
000545 c002      	RJMP _0x2000024
                 _0x200001F:
000546 30e2      	CPI  R30,LOW(0x2)
000547 f439      	BRNE _0x2000025
                 _0x2000024:
000548 e050      	LDI  R21,LOW(0)
000549 e013      	LDI  R17,LOW(3)
00054a 3320      	CPI  R18,48
00054b f411      	BRNE _0x2000026
00054c 6800      	ORI  R16,LOW(128)
00054d c0eb      	RJMP _0x200001B
                 _0x2000026:
00054e c003      	RJMP _0x2000027
                 _0x2000025:
00054f 30e3      	CPI  R30,LOW(0x3)
000550 f009      	BREQ PC+2
000551 c0e7      	RJMP _0x200001B
                 _0x2000027:
000552 3320      	CPI  R18,48
000553 f010      	BRLO _0x200002A
000554 332a      	CPI  R18,58
000555 f008      	BRLO _0x200002B
                 _0x200002A:
000556 c007      	RJMP _0x2000029
                 _0x200002B:
000557 e0aa      	LDI  R26,LOW(10)
000558 9f5a      	MUL  R21,R26
000559 2d50      	MOV  R21,R0
00055a 2fe2      	MOV  R30,R18
00055b 53e0      	SUBI R30,LOW(48)
00055c 0f5e      	ADD  R21,R30
00055d c0db      	RJMP _0x200001B
                 _0x2000029:
00055e 2fe2      	MOV  R30,R18
00055f 36e3      	CPI  R30,LOW(0x63)
000560 f449      	BRNE _0x200002F
000561 940e 0887 	CALL SUBOPT_0x2B
000563 89e8      	LDD  R30,Y+16
000564 89f9      	LDD  R31,Y+16+1
000565 81a4      	LDD  R26,Z+4
000566 93aa      	ST   -Y,R26
000567 940e 088d 	CALL SUBOPT_0x2C
000569 c0ce      	RJMP _0x2000030
                 _0x200002F:
00056a 37e3      	CPI  R30,LOW(0x73)
00056b f441      	BRNE _0x2000032
00056c 940e 0887 	CALL SUBOPT_0x2B
00056e 940e 0893 	CALL SUBOPT_0x2D
000570 940e 072f 	CALL _strlen
000572 2f1e      	MOV  R17,R30
000573 c00a      	RJMP _0x2000033
                 _0x2000032:
000574 37e0      	CPI  R30,LOW(0x70)
000575 f461      	BRNE _0x2000035
000576 940e 0887 	CALL SUBOPT_0x2B
000578 940e 0893 	CALL SUBOPT_0x2D
00057a 940e 073b 	CALL _strlenf
00057c 2f1e      	MOV  R17,R30
00057d 6008      	ORI  R16,LOW(8)
                 _0x2000033:
00057e 6002      	ORI  R16,LOW(2)
00057f 770f      	ANDI R16,LOW(127)
000580 e030      	LDI  R19,LOW(0)
000581 c034      	RJMP _0x2000036
                 _0x2000035:
000582 36e4      	CPI  R30,LOW(0x64)
000583 f011      	BREQ _0x2000039
000584 36e9      	CPI  R30,LOW(0x69)
000585 f411      	BRNE _0x200003A
                 _0x2000039:
000586 6004      	ORI  R16,LOW(4)
000587 c002      	RJMP _0x200003B
                 _0x200003A:
000588 37e5      	CPI  R30,LOW(0x75)
000589 f431      	BRNE _0x200003C
                 _0x200003B:
00058a e5e4      	LDI  R30,LOW(_tbl10_G100*2)
00058b e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
00058c 83ee      	STD  Y+6,R30
00058d 83ff      	STD  Y+6+1,R31
00058e e015      	LDI  R17,LOW(5)
00058f c00c      	RJMP _0x200003D
                 _0x200003C:
000590 35e8      	CPI  R30,LOW(0x58)
000591 f411      	BRNE _0x200003F
000592 6008      	ORI  R16,LOW(8)
000593 c003      	RJMP _0x2000040
                 _0x200003F:
000594 37e8      	CPI  R30,LOW(0x78)
000595 f009      	BREQ PC+2
000596 c0a1      	RJMP _0x2000071
                 _0x2000040:
000597 e5ee      	LDI  R30,LOW(_tbl16_G100*2)
000598 e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
000599 83ee      	STD  Y+6,R30
00059a 83ff      	STD  Y+6+1,R31
00059b e014      	LDI  R17,LOW(4)
                 _0x200003D:
00059c ff02      	SBRS R16,2
00059d c014      	RJMP _0x2000042
00059e 940e 0887 	CALL SUBOPT_0x2B
0005a0 940e 089d 	CALL SUBOPT_0x2E
0005a2 85ab      	LDD  R26,Y+11
0005a3 23aa      	TST  R26
0005a4 f43a      	BRPL _0x2000043
0005a5 85ea      	LDD  R30,Y+10
0005a6 85fb      	LDD  R31,Y+10+1
0005a7 940e 08c8 	CALL __ANEGW1
0005a9 87ea      	STD  Y+10,R30
0005aa 87fb      	STD  Y+10+1,R31
0005ab e24d      	LDI  R20,LOW(45)
                 _0x2000043:
0005ac 3040      	CPI  R20,0
0005ad f011      	BREQ _0x2000044
0005ae 5f1f      	SUBI R17,-LOW(1)
0005af c001      	RJMP _0x2000045
                 _0x2000044:
0005b0 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
0005b1 c004      	RJMP _0x2000046
                 _0x2000042:
0005b2 940e 0887 	CALL SUBOPT_0x2B
0005b4 940e 089d 	CALL SUBOPT_0x2E
                 _0x2000046:
                 _0x2000036:
0005b6 fd00      	SBRC R16,0
0005b7 c011      	RJMP _0x2000047
                 _0x2000048:
0005b8 1715      	CP   R17,R21
0005b9 f478      	BRSH _0x200004A
0005ba ff07      	SBRS R16,7
0005bb c008      	RJMP _0x200004B
0005bc ff02      	SBRS R16,2
0005bd c004      	RJMP _0x200004C
0005be 7f0b      	ANDI R16,LOW(251)
0005bf 2f24      	MOV  R18,R20
0005c0 5011      	SUBI R17,LOW(1)
0005c1 c001      	RJMP _0x200004D
                 _0x200004C:
0005c2 e320      	LDI  R18,LOW(48)
                 _0x200004D:
0005c3 c001      	RJMP _0x200004E
                 _0x200004B:
0005c4 e220      	LDI  R18,LOW(32)
                 _0x200004E:
0005c5 940e 0880 	CALL SUBOPT_0x2A
0005c7 5051      	SUBI R21,LOW(1)
0005c8 cfef      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
0005c9 2f31      	MOV  R19,R17
0005ca ff01      	SBRS R16,1
0005cb c017      	RJMP _0x200004F
                 _0x2000050:
0005cc 3030      	CPI  R19,0
0005cd f0a1      	BREQ _0x2000052
0005ce ff03      	SBRS R16,3
0005cf c006      	RJMP _0x2000053
0005d0 81ee      	LDD  R30,Y+6
0005d1 81ff      	LDD  R31,Y+6+1
0005d2 9125      	LPM  R18,Z+
0005d3 83ee      	STD  Y+6,R30
0005d4 83ff      	STD  Y+6+1,R31
0005d5 c005      	RJMP _0x2000054
                 _0x2000053:
0005d6 81ae      	LDD  R26,Y+6
0005d7 81bf      	LDD  R27,Y+6+1
0005d8 912d      	LD   R18,X+
0005d9 83ae      	STD  Y+6,R26
0005da 83bf      	STD  Y+6+1,R27
                 _0x2000054:
0005db 940e 0880 	CALL SUBOPT_0x2A
0005dd 3050      	CPI  R21,0
0005de f009      	BREQ _0x2000055
0005df 5051      	SUBI R21,LOW(1)
                 _0x2000055:
0005e0 5031      	SUBI R19,LOW(1)
0005e1 cfea      	RJMP _0x2000050
                 _0x2000052:
0005e2 c04b      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
0005e3 e320      	LDI  R18,LOW(48)
0005e4 81ee      	LDD  R30,Y+6
0005e5 81ff      	LDD  R31,Y+6+1
0005e6 940e 08e0 	CALL __GETW1PF
0005e8 87e8      	STD  Y+8,R30
0005e9 87f9      	STD  Y+8+1,R31
0005ea 81ee      	LDD  R30,Y+6
0005eb 81ff      	LDD  R31,Y+6+1
0005ec 9632      	ADIW R30,2
0005ed 83ee      	STD  Y+6,R30
0005ee 83ff      	STD  Y+6+1,R31
                 _0x200005A:
0005ef 85e8      	LDD  R30,Y+8
0005f0 85f9      	LDD  R31,Y+8+1
0005f1 85aa      	LDD  R26,Y+10
0005f2 85bb      	LDD  R27,Y+10+1
0005f3 17ae      	CP   R26,R30
0005f4 07bf      	CPC  R27,R31
0005f5 f050      	BRLO _0x200005C
0005f6 5f2f      	SUBI R18,-LOW(1)
0005f7 85a8      	LDD  R26,Y+8
0005f8 85b9      	LDD  R27,Y+8+1
0005f9 85ea      	LDD  R30,Y+10
0005fa 85fb      	LDD  R31,Y+10+1
0005fb 1bea      	SUB  R30,R26
0005fc 0bfb      	SBC  R31,R27
0005fd 87ea      	STD  Y+10,R30
0005fe 87fb      	STD  Y+10+1,R31
0005ff cfef      	RJMP _0x200005A
                 _0x200005C:
000600 332a      	CPI  R18,58
000601 f028      	BRLO _0x200005D
000602 ff03      	SBRS R16,3
000603 c002      	RJMP _0x200005E
000604 5f29      	SUBI R18,-LOW(7)
000605 c001      	RJMP _0x200005F
                 _0x200005E:
000606 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
000607 fd04      	SBRC R16,4
000608 c01a      	RJMP _0x2000061
000609 3321      	CPI  R18,49
00060a f420      	BRSH _0x2000063
00060b 85a8      	LDD  R26,Y+8
00060c 85b9      	LDD  R27,Y+8+1
00060d 9711      	SBIW R26,1
00060e f409      	BRNE _0x2000062
                 _0x2000063:
00060f c009      	RJMP _0x20000CD
                 _0x2000062:
000610 1753      	CP   R21,R19
000611 f010      	BRLO _0x2000067
000612 ff00      	SBRS R16,0
000613 c001      	RJMP _0x2000068
                 _0x2000067:
000614 c013      	RJMP _0x2000066
                 _0x2000068:
000615 e220      	LDI  R18,LOW(32)
000616 ff07      	SBRS R16,7
000617 c00b      	RJMP _0x2000069
000618 e320      	LDI  R18,LOW(48)
                 _0x20000CD:
000619 6100      	ORI  R16,LOW(16)
00061a ff02      	SBRS R16,2
00061b c007      	RJMP _0x200006A
00061c 7f0b      	ANDI R16,LOW(251)
00061d 934a      	ST   -Y,R20
00061e 940e 088d 	CALL SUBOPT_0x2C
000620 3050      	CPI  R21,0
000621 f009      	BREQ _0x200006B
000622 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
000623 940e 0880 	CALL SUBOPT_0x2A
000625 3050      	CPI  R21,0
000626 f009      	BREQ _0x200006C
000627 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
000628 5031      	SUBI R19,LOW(1)
000629 85a8      	LDD  R26,Y+8
00062a 85b9      	LDD  R27,Y+8+1
00062b 9712      	SBIW R26,2
00062c f008      	BRLO _0x2000059
00062d cfb5      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
00062e ff00      	SBRS R16,0
00062f c008      	RJMP _0x200006D
                 _0x200006E:
000630 3050      	CPI  R21,0
000631 f031      	BREQ _0x2000070
000632 5051      	SUBI R21,LOW(1)
000633 e2e0      	LDI  R30,LOW(32)
000634 93ea      	ST   -Y,R30
000635 940e 088d 	CALL SUBOPT_0x2C
000637 cff8      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000CC:
000638 e010      	LDI  R17,LOW(0)
                 _0x200001B:
000639 cee0      	RJMP _0x2000016
                 _0x2000018:
00063a 85ac      	LDD  R26,Y+12
00063b 85bd      	LDD  R27,Y+12+1
00063c 940e 08dc 	CALL __GETW1P
00063e 940e 08f0 	CALL __LOADLOCR6
000640 9664      	ADIW R28,20
000641 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
000642 92ff      	PUSH R15
000643 2ef8      	MOV  R15,R24
000644 9726      	SBIW R28,6
000645 940e 08eb 	CALL __SAVELOCR4
000647 940e 08a5 	CALL SUBOPT_0x2F
000649 9730      	SBIW R30,0
00064a f419      	BRNE _0x2000072
00064b efef      	LDI  R30,LOW(65535)
00064c efff      	LDI  R31,HIGH(65535)
00064d c023      	RJMP _0x2080003
                 _0x2000072:
00064e 01de      	MOVW R26,R28
00064f 9616      	ADIW R26,6
000650 940e 08c4 	CALL __ADDW2R15
000652 018d      	MOVW R16,R26
000653 940e 08a5 	CALL SUBOPT_0x2F
000655 83ee      	STD  Y+6,R30
000656 83ff      	STD  Y+6+1,R31
000657 e0e0      	LDI  R30,LOW(0)
000658 87e8      	STD  Y+8,R30
000659 87e9      	STD  Y+8+1,R30
00065a 01de      	MOVW R26,R28
00065b 961a      	ADIW R26,10
00065c 940e 08c4 	CALL __ADDW2R15
00065e 940e 08dc 	CALL __GETW1P
000660 93fa      	ST   -Y,R31
000661 93ea      	ST   -Y,R30
000662 931a      	ST   -Y,R17
000663 930a      	ST   -Y,R16
000664 ede4      	LDI  R30,LOW(_put_buff_G100)
000665 e0f4      	LDI  R31,HIGH(_put_buff_G100)
000666 93fa      	ST   -Y,R31
000667 93ea      	ST   -Y,R30
000668 01de      	MOVW R26,R28
000669 961a      	ADIW R26,10
00066a dea3      	RCALL __print_G100
00066b 019f      	MOVW R18,R30
00066c 81ae      	LDD  R26,Y+6
00066d 81bf      	LDD  R27,Y+6+1
00066e e0e0      	LDI  R30,LOW(0)
00066f 93ec      	ST   X,R30
000670 01f9      	MOVW R30,R18
                 _0x2080003:
000671 940e 08f2 	CALL __LOADLOCR4
000673 962a      	ADIW R28,10
000674 90ff      	POP  R15
000675 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G101:
                 ; .FSTART __lcd_write_nibble_G101
000676 93aa      	ST   -Y,R26
000677 81e8      	LD   R30,Y
000678 71e0      	ANDI R30,LOW(0x10)
000679 f011      	BREQ _0x2020004
00067a 9ac3      	SBI  0x18,3
00067b c001      	RJMP _0x2020005
                 _0x2020004:
00067c 98c3      	CBI  0x18,3
                 _0x2020005:
00067d 81e8      	LD   R30,Y
00067e 72e0      	ANDI R30,LOW(0x20)
00067f f011      	BREQ _0x2020006
000680 9ac4      	SBI  0x18,4
000681 c001      	RJMP _0x2020007
                 _0x2020006:
000682 98c4      	CBI  0x18,4
                 _0x2020007:
000683 81e8      	LD   R30,Y
000684 74e0      	ANDI R30,LOW(0x40)
000685 f011      	BREQ _0x2020008
000686 9ac5      	SBI  0x18,5
000687 c001      	RJMP _0x2020009
                 _0x2020008:
000688 98c5      	CBI  0x18,5
                 _0x2020009:
000689 81e8      	LD   R30,Y
00068a 78e0      	ANDI R30,LOW(0x80)
00068b f011      	BREQ _0x202000A
00068c 9ac6      	SBI  0x18,6
00068d c001      	RJMP _0x202000B
                 _0x202000A:
00068e 98c6      	CBI  0x18,6
                 _0x202000B:
                +
00068f e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000690 958a     +DEC R24
000691 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000692 9ac2      	SBI  0x18,2
                +
000693 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000694 958a     +DEC R24
000695 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000696 98c2      	CBI  0x18,2
                +
000697 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000698 958a     +DEC R24
000699 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00069a c092      	RJMP _0x2080001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
00069b 93aa      	ST   -Y,R26
00069c 81a8      	LD   R26,Y
00069d dfd8      	RCALL __lcd_write_nibble_G101
00069e 81e8          ld    r30,y
00069f 95e2          swap  r30
0006a0 83e8          st    y,r30
0006a1 81a8      	LD   R26,Y
0006a2 dfd3      	RCALL __lcd_write_nibble_G101
                +
0006a3 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
0006a4 958a     +DEC R24
0006a5 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
0006a6 c086      	RJMP _0x2080001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0006a7 93aa      	ST   -Y,R26
0006a8 81e8      	LD   R30,Y
0006a9 e0f0      	LDI  R31,0
0006aa 5fee      	SUBI R30,LOW(-__base_y_G101)
0006ab 4ffc      	SBCI R31,HIGH(-__base_y_G101)
0006ac 81e0      	LD   R30,Z
0006ad 81a9      	LDD  R26,Y+1
0006ae 0fae      	ADD  R26,R30
0006af dfeb      	RCALL __lcd_write_data
0006b0 80a9      	LDD  R10,Y+1
0006b1 81e8      	LD   R30,Y
0006b2 93e0 0306 	STS  __lcd_y,R30
0006b4 9622      	ADIW R28,2
0006b5 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0006b6 e0a2      	LDI  R26,LOW(2)
0006b7 940e 08ac 	CALL SUBOPT_0x30
0006b9 e0ac      	LDI  R26,LOW(12)
0006ba dfe0      	RCALL __lcd_write_data
0006bb e0a1      	LDI  R26,LOW(1)
0006bc 940e 08ac 	CALL SUBOPT_0x30
0006be e0e0      	LDI  R30,LOW(0)
0006bf 93e0 0306 	STS  __lcd_y,R30
0006c1 2eae      	MOV  R10,R30
0006c2 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
0006c3 93aa      	ST   -Y,R26
0006c4 81a8      	LD   R26,Y
0006c5 30aa      	CPI  R26,LOW(0xA)
0006c6 f021      	BREQ _0x2020011
0006c7 91e0 0307 	LDS  R30,__lcd_maxx
0006c9 16ae      	CP   R10,R30
0006ca f060      	BRLO _0x2020010
                 _0x2020011:
0006cb e0e0      	LDI  R30,LOW(0)
0006cc 93ea      	ST   -Y,R30
0006cd 91a0 0306 	LDS  R26,__lcd_y
0006cf 5faf      	SUBI R26,-LOW(1)
0006d0 93a0 0306 	STS  __lcd_y,R26
0006d2 dfd4      	RCALL _lcd_gotoxy
0006d3 81a8      	LD   R26,Y
0006d4 30aa      	CPI  R26,LOW(0xA)
0006d5 f409      	BRNE _0x2020013
0006d6 c056      	RJMP _0x2080001
                 _0x2020013:
                 _0x2020010:
0006d7 94a3      	INC  R10
0006d8 9ac0      	SBI  0x18,0
0006d9 81a8      	LD   R26,Y
0006da dfc0      	RCALL __lcd_write_data
0006db 98c0      	CBI  0x18,0
0006dc c050      	RJMP _0x2080001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
0006dd 93ba      	ST   -Y,R27
0006de 93aa      	ST   -Y,R26
0006df 931a      	ST   -Y,R17
                 _0x2020014:
0006e0 81a9      	LDD  R26,Y+1
0006e1 81ba      	LDD  R27,Y+1+1
0006e2 91ed      	LD   R30,X+
0006e3 83a9      	STD  Y+1,R26
0006e4 83ba      	STD  Y+1+1,R27
0006e5 2f1e      	MOV  R17,R30
0006e6 30e0      	CPI  R30,0
0006e7 f019      	BREQ _0x2020016
0006e8 2fa1      	MOV  R26,R17
0006e9 dfd9      	RCALL _lcd_putchar
0006ea cff5      	RJMP _0x2020014
                 _0x2020016:
0006eb c010      	RJMP _0x2080002
                 ; .FEND
                 _lcd_putsf:
                 ; .FSTART _lcd_putsf
0006ec 93ba      	ST   -Y,R27
0006ed 93aa      	ST   -Y,R26
0006ee 931a      	ST   -Y,R17
                 _0x2020017:
0006ef 81e9      	LDD  R30,Y+1
0006f0 81fa      	LDD  R31,Y+1+1
0006f1 9631      	ADIW R30,1
0006f2 83e9      	STD  Y+1,R30
0006f3 83fa      	STD  Y+1+1,R31
0006f4 9731      	SBIW R30,1
0006f5 91e4      	LPM  R30,Z
0006f6 2f1e      	MOV  R17,R30
0006f7 30e0      	CPI  R30,0
0006f8 f019      	BREQ _0x2020019
0006f9 2fa1      	MOV  R26,R17
0006fa dfc8      	RCALL _lcd_putchar
0006fb cff3      	RJMP _0x2020017
                 _0x2020019:
                 _0x2080002:
0006fc 8118      	LDD  R17,Y+0
0006fd 9623      	ADIW R28,3
0006fe 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
0006ff 93aa      	ST   -Y,R26
000700 9abb      	SBI  0x17,3
000701 9abc      	SBI  0x17,4
000702 9abd      	SBI  0x17,5
000703 9abe      	SBI  0x17,6
000704 9aba      	SBI  0x17,2
000705 9ab8      	SBI  0x17,0
000706 9ab9      	SBI  0x17,1
000707 98c2      	CBI  0x18,2
000708 98c0      	CBI  0x18,0
000709 98c1      	CBI  0x18,1
00070a 81e8      	LD   R30,Y
00070b 93e0 0307 	STS  __lcd_maxx,R30
00070d 58e0      	SUBI R30,-LOW(128)
                +
00070e 93e0 0304+STS __base_y_G101 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G101,2
000710 81e8      	LD   R30,Y
000711 54e0      	SUBI R30,-LOW(192)
                +
000712 93e0 0305+STS __base_y_G101 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G101,3
000714 e1a4      	LDI  R26,LOW(20)
000715 e0b0      	LDI  R27,0
000716 940e 08ba 	CALL _delay_ms
000718 940e 08b2 	CALL SUBOPT_0x31
00071a 940e 08b2 	CALL SUBOPT_0x31
00071c 940e 08b2 	CALL SUBOPT_0x31
00071e e2a0      	LDI  R26,LOW(32)
00071f df56      	RCALL __lcd_write_nibble_G101
                +
000720 ec88     +LDI R24 , LOW ( 200 )
000721 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000722 9701     +SBIW R24 , 1
000723 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000724 e2a8      	LDI  R26,LOW(40)
000725 df75      	RCALL __lcd_write_data
000726 e0a4      	LDI  R26,LOW(4)
000727 df73      	RCALL __lcd_write_data
000728 e8a5      	LDI  R26,LOW(133)
000729 df71      	RCALL __lcd_write_data
00072a e0a6      	LDI  R26,LOW(6)
00072b df6f      	RCALL __lcd_write_data
00072c df89      	RCALL _lcd_clear
                 _0x2080001:
00072d 9621      	ADIW R28,1
00072e 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
00072f 93ba      	ST   -Y,R27
000730 93aa      	ST   -Y,R26
000731 91a9          ld   r26,y+
000732 91b9          ld   r27,y+
000733 27ee          clr  r30
000734 27ff          clr  r31
                 strlen0:
000735 916d          ld   r22,x+
000736 2366          tst  r22
000737 f011          breq strlen1
000738 9631          adiw r30,1
000739 cffb          rjmp strlen0
                 strlen1:
00073a 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
00073b 93ba      	ST   -Y,R27
00073c 93aa      	ST   -Y,R26
00073d 27aa          clr  r26
00073e 27bb          clr  r27
00073f 91e9          ld   r30,y+
000740 91f9          ld   r31,y+
                 strlenf0:
000741 9005      	lpm  r0,z+
000742 2000          tst  r0
000743 f011          breq strlenf1
000744 9611          adiw r26,1
000745 cffb          rjmp strlenf0
                 strlenf1:
000746 01fd          movw r30,r26
000747 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _enter_array:
00027c           	.BYTE 0x3E
                 _exit_array:
0002ba           	.BYTE 0x3E
                 _minute:
0002f8           	.BYTE 0x2
                 _hour:
0002fa           	.BYTE 0x2
                 _day:
0002fc           	.BYTE 0x2
                 _month:
0002fe           	.BYTE 0x2
                 _year:
000300           	.BYTE 0x2
                 __base_y_G101:
000302           	.BYTE 0x4
                 __lcd_y:
000306           	.BYTE 0x1
                 __lcd_maxx:
000307           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
000748 91a0 02f8 	LDS  R26,_minute
00074a 91b0 02f9 	LDS  R27,_minute+1
00074c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1:
00074d 91a0 02fa 	LDS  R26,_hour
00074f 91b0 02fb 	LDS  R27,_hour+1
000751 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x2:
000752 efa8      	LDI  R26,LOW(_minute)
000753 e0b2      	LDI  R27,HIGH(_minute)
000754 91ed      	LD   R30,X+
000755 91fd      	LD   R31,X+
000756 9631      	ADIW R30,1
000757 93fe      	ST   -X,R31
000758 93ee      	ST   -X,R30
000759 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x3:
00075a 91a0 02fe 	LDS  R26,_month
00075c 91b0 02ff 	LDS  R27,_month+1
00075e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x4:
00075f 91a0 02fc 	LDS  R26,_day
000761 91b0 02fd 	LDS  R27,_day+1
000763 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:19 WORDS
                 SUBOPT_0x5:
000764 e0e1      	LDI  R30,LOW(1)
000765 e0f0      	LDI  R31,HIGH(1)
000766 93e0 02fc 	STS  _day,R30
000768 93f0 02fd 	STS  _day+1,R31
00076a efae      	LDI  R26,LOW(_month)
00076b e0b2      	LDI  R27,HIGH(_month)
00076c 91ed      	LD   R30,X+
00076d 91fd      	LD   R31,X+
00076e 9631      	ADIW R30,1
00076f 93fe      	ST   -X,R31
000770 93ee      	ST   -X,R30
000771 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
000772 e0e1      	LDI  R30,LOW(1)
000773 e0f0      	LDI  R31,HIGH(1)
000774 93e0 02fe 	STS  _month,R30
000776 93f0 02ff 	STS  _month+1,R31
000778 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
000779 e0a0      	LDI  R26,LOW(_year)
00077a e0b3      	LDI  R27,HIGH(_year)
00077b 91ed      	LD   R30,X+
00077c 91fd      	LD   R31,X+
00077d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x8:
00077e 920a      	ST   -Y,R0
00077f 921a      	ST   -Y,R1
000780 92fa      	ST   -Y,R15
000781 936a      	ST   -Y,R22
000782 937a      	ST   -Y,R23
000783 938a      	ST   -Y,R24
000784 939a      	ST   -Y,R25
000785 93aa      	ST   -Y,R26
000786 93ba      	ST   -Y,R27
000787 93ea      	ST   -Y,R30
000788 93fa      	ST   -Y,R31
000789 b7ef      	IN   R30,SREG
00078a 93ea      	ST   -Y,R30
00078b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x9:
00078c 940e 06ec 	CALL _lcd_putsf
00078e efa4      	LDI  R26,LOW(500)
00078f e0b1      	LDI  R27,HIGH(500)
000790 940c 08ba 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xA:
000792 2dab      	MOV  R26,R11
000793 27bb      	CLR  R27
000794 2de8      	MOV  R30,R8
000795 e0f0      	LDI  R31,0
000796 0fae      	ADD  R26,R30
000797 1fbf      	ADC  R27,R31
000798 971a      	SBIW R26,10
000799 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xB:
00079a e0e0      	LDI  R30,LOW(0)
00079b 93ea      	ST   -Y,R30
00079c e0a1      	LDI  R26,LOW(1)
00079d 940c 06a7 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xC:
00079f e2ac      	LDI  R26,LOW(300)
0007a0 e0b1      	LDI  R27,HIGH(300)
0007a1 940c 08ba 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0xD:
0007a3 dfa9      	RCALL SUBOPT_0x1
0007a4 e0e0      	LDI  R30,LOW(0)
0007a5 e0f0      	LDI  R31,HIGH(0)
0007a6 940e 08d6 	CALL __EQW12
0007a8 2e0e      	MOV  R0,R30
0007a9 df9e      	RCALL SUBOPT_0x0
0007aa e0e0      	LDI  R30,LOW(0)
0007ab e0f0      	LDI  R31,HIGH(0)
0007ac 940e 08d6 	CALL __EQW12
0007ae 220e      	AND  R0,R30
0007af 01d6      	MOVW R26,R12
0007b0 e0e0      	LDI  R30,LOW(0)
0007b1 e0f0      	LDI  R31,HIGH(0)
0007b2 940e 08d6 	CALL __EQW12
0007b4 21e0      	AND  R30,R0
0007b5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xE:
0007b6 e7ac      	LDI  R26,LOW(_enter_array)
0007b7 e0b2      	LDI  R27,HIGH(_enter_array)
0007b8 e0f0      	LDI  R31,0
0007b9 0fee      	LSL  R30
0007ba 1fff      	ROL  R31
0007bb 0fea      	ADD  R30,R26
0007bc 1ffb      	ADC  R31,R27
0007bd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xF:
0007be ebaa      	LDI  R26,LOW(_exit_array)
0007bf e0b2      	LDI  R27,HIGH(_exit_array)
0007c0 e0f0      	LDI  R31,0
0007c1 0fee      	LSL  R30
0007c2 1fff      	ROL  R31
0007c3 0fea      	ADD  R30,R26
0007c4 1ffb      	ADC  R31,R27
0007c5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x10:
0007c6 940e 08dc 	CALL __GETW1P
0007c8 01d0      	MOVW R26,R0
0007c9 93ed      	ST   X+,R30
0007ca 93fc      	ST   X,R31
0007cb 81e8      	LD   R30,Y
0007cc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x11:
0007cd 27ff      	CLR  R31
0007ce 2766      	CLR  R22
0007cf 2777      	CLR  R23
0007d0 940e 08e4 	CALL __PUTPARD1
0007d2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x12:
0007d3 91e0 0300 	LDS  R30,_year
0007d5 91f0 0301 	LDS  R31,_year+1
0007d7 940e 08cc 	CALL __CWD1
0007d9 940e 08e4 	CALL __PUTPARD1
0007db 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x13:
0007dc 91e0 02fe 	LDS  R30,_month
0007de 91f0 02ff 	LDS  R31,_month+1
0007e0 940e 08cc 	CALL __CWD1
0007e2 940e 08e4 	CALL __PUTPARD1
0007e4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x14:
0007e5 91e0 02fc 	LDS  R30,_day
0007e7 91f0 02fd 	LDS  R31,_day+1
0007e9 940e 08cc 	CALL __CWD1
0007eb 940e 08e4 	CALL __PUTPARD1
0007ed 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x15:
0007ee 01fe      	MOVW R30,R28
0007ef 93fa      	ST   -Y,R31
0007f0 93ea      	ST   -Y,R30
0007f1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x16:
0007f2 93fa      	ST   -Y,R31
0007f3 93ea      	ST   -Y,R30
0007f4 91e0 02fa 	LDS  R30,_hour
0007f6 91f0 02fb 	LDS  R31,_hour+1
0007f8 940e 08cc 	CALL __CWD1
0007fa 940e 08e4 	CALL __PUTPARD1
0007fc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x17:
0007fd 91e0 02f8 	LDS  R30,_minute
0007ff 91f0 02f9 	LDS  R31,_minute+1
000801 940e 08cc 	CALL __CWD1
000803 940e 08e4 	CALL __PUTPARD1
000805 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x18:
000806 940e 08cc 	CALL __CWD1
000808 940e 08e4 	CALL __PUTPARD1
00080a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x19:
00080b 01de      	MOVW R26,R28
00080c 940c 06dd 	JMP  _lcd_puts
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x1A:
00080e e1a9      	LDI  R26,LOW(25)
00080f e0b0      	LDI  R27,0
000810 940c 08ba 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x1B:
000812 e0a0      	LDI  R26,0
000813 99ca      	SBIC 0x19,2
000814 e0a1      	LDI  R26,1
000815 e0e0      	LDI  R30,LOW(0)
000816 940e 08d1 	CALL __EQB12
000818 2e0e      	MOV  R0,R30
000819 2fa1      	MOV  R26,R17
00081a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1C:
00081b e0e0      	LDI  R30,LOW(0)
00081c 940e 08d1 	CALL __EQB12
00081e 21e0      	AND  R30,R0
00081f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1D:
000820 e0e1      	LDI  R30,LOW(1)
000821 940e 08d1 	CALL __EQB12
000823 21e0      	AND  R30,R0
000824 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1E:
000825 e0e2      	LDI  R30,LOW(2)
000826 940e 08d1 	CALL __EQB12
000828 21e0      	AND  R30,R0
000829 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x1F:
00082a e084      	LDI  R24,4
00082b 940e 0642 	CALL _sprintf
00082d 9628      	ADIW R28,8
00082e 940e 06b6 	CALL _lcd_clear
000830 cfda      	RJMP SUBOPT_0x19
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x20:
000831 e0a0      	LDI  R26,0
000832 99c9      	SBIC 0x19,1
000833 e0a1      	LDI  R26,1
000834 e0e0      	LDI  R30,LOW(0)
000835 940e 08d1 	CALL __EQB12
000837 2e0e      	MOV  R0,R30
000838 e0a0      	LDI  R26,0
000839 fcf0      	SBRC R15,0
00083a e0a1      	LDI  R26,1
00083b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x21:
00083c e0a0      	LDI  R26,0
00083d 99c8      	SBIC 0x19,0
00083e e0a1      	LDI  R26,1
00083f e0e0      	LDI  R30,LOW(0)
000840 940e 08d1 	CALL __EQB12
000842 2e0e      	MOV  R0,R30
000843 e0a0      	LDI  R26,0
000844 fcf0      	SBRC R15,0
000845 e0a1      	LDI  R26,1
000846 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x22:
000847 91ed      	LD   R30,X+
000848 91fd      	LD   R31,X+
000849 9731      	SBIW R30,1
00084a 93fe      	ST   -X,R31
00084b 93ee      	ST   -X,R30
00084c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x23:
00084d 91ed      	LD   R30,X+
00084e 91fd      	LD   R31,X+
00084f 9631      	ADIW R30,1
000850 93fe      	ST   -X,R31
000851 93ee      	ST   -X,R30
000852 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x24:
                +
000853 e041     +LDI R20 , LOW ( 1 )
000854 e050     +LDI R21 , HIGH ( 1 )
                 	__GETWRN 20,21,1
                +
000855 5f2f     +SUBI R18 , LOW ( - 1 )
000856 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
000857 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x25:
000858 0fee      	LSL  R30
000859 1fff      	ROL  R31
00085a 0fae      	ADD  R26,R30
00085b 1fbf      	ADC  R27,R31
00085c 940e 08dc 	CALL __GETW1P
00085e cfa7      	RJMP SUBOPT_0x18
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x26:
00085f 01fe      	MOVW R30,R28
000860 9631      	ADIW R30,1
000861 93fa      	ST   -Y,R31
000862 93ea      	ST   -Y,R30
000863 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x27:
000864 e084      	LDI  R24,4
000865 940e 0642 	CALL _sprintf
000867 9628      	ADIW R28,8
000868 940e 06b6 	CALL _lcd_clear
00086a 01de      	MOVW R26,R28
00086b 9611      	ADIW R26,1
00086c 940c 06dd 	JMP  _lcd_puts
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x28:
00086e e0a0      	LDI  R26,0
00086f 99c9      	SBIC 0x19,1
000870 e0a1      	LDI  R26,1
000871 e0e0      	LDI  R30,LOW(0)
000872 940e 08d1 	CALL __EQB12
000874 2e0e      	MOV  R0,R30
000875 2fa1      	MOV  R26,R17
000876 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x29:
000877 e0a0      	LDI  R26,0
000878 99c8      	SBIC 0x19,0
000879 e0a1      	LDI  R26,1
00087a e0e0      	LDI  R30,LOW(0)
00087b 940e 08d1 	CALL __EQB12
00087d 2e0e      	MOV  R0,R30
00087e 2fa1      	MOV  R26,R17
00087f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x2A:
000880 932a      	ST   -Y,R18
000881 85ad      	LDD  R26,Y+13
000882 85be      	LDD  R27,Y+13+1
000883 85ef      	LDD  R30,Y+15
000884 89f8      	LDD  R31,Y+15+1
000885 9509      	ICALL
000886 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x2B:
000887 89e8      	LDD  R30,Y+16
000888 89f9      	LDD  R31,Y+16+1
000889 9734      	SBIW R30,4
00088a 8be8      	STD  Y+16,R30
00088b 8bf9      	STD  Y+16+1,R31
00088c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2C:
00088d 85ad      	LDD  R26,Y+13
00088e 85be      	LDD  R27,Y+13+1
00088f 85ef      	LDD  R30,Y+15
000890 89f8      	LDD  R31,Y+15+1
000891 9509      	ICALL
000892 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x2D:
000893 89a8      	LDD  R26,Y+16
000894 89b9      	LDD  R27,Y+16+1
000895 9614      	ADIW R26,4
000896 940e 08dc 	CALL __GETW1P
000898 83ee      	STD  Y+6,R30
000899 83ff      	STD  Y+6+1,R31
00089a 81ae      	LDD  R26,Y+6
00089b 81bf      	LDD  R27,Y+6+1
00089c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x2E:
00089d 89a8      	LDD  R26,Y+16
00089e 89b9      	LDD  R27,Y+16+1
00089f 9614      	ADIW R26,4
0008a0 940e 08dc 	CALL __GETW1P
0008a2 87ea      	STD  Y+10,R30
0008a3 87fb      	STD  Y+10+1,R31
0008a4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2F:
0008a5 01de      	MOVW R26,R28
0008a6 961c      	ADIW R26,12
0008a7 940e 08c4 	CALL __ADDW2R15
0008a9 940e 08dc 	CALL __GETW1P
0008ab 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x30:
0008ac 940e 069b 	CALL __lcd_write_data
0008ae e0a3      	LDI  R26,LOW(3)
0008af e0b0      	LDI  R27,0
0008b0 940c 08ba 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x31:
0008b2 e3a0      	LDI  R26,LOW(48)
0008b3 940e 0676 	CALL __lcd_write_nibble_G101
                +
0008b5 ec88     +LDI R24 , LOW ( 200 )
0008b6 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0008b7 9701     +SBIW R24 , 1
0008b8 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0008b9 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0008ba 9610      	adiw r26,0
0008bb f039      	breq __delay_ms1
                 __delay_ms0:
0008bc 95a8      	wdr
                +
0008bd ed80     +LDI R24 , LOW ( 0x7D0 )
0008be e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0008bf 9701     +SBIW R24 , 1
0008c0 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0008c1 9711      	sbiw r26,1
0008c2 f7c9      	brne __delay_ms0
                 __delay_ms1:
0008c3 9508      	ret
                 
                 __ADDW2R15:
0008c4 2400      	CLR  R0
0008c5 0daf      	ADD  R26,R15
0008c6 1db0      	ADC  R27,R0
0008c7 9508      	RET
                 
                 __ANEGW1:
0008c8 95f1      	NEG  R31
0008c9 95e1      	NEG  R30
0008ca 40f0      	SBCI R31,0
0008cb 9508      	RET
                 
                 __CWD1:
0008cc 2f6f      	MOV  R22,R31
0008cd 0f66      	ADD  R22,R22
0008ce 0b66      	SBC  R22,R22
0008cf 2f76      	MOV  R23,R22
0008d0 9508      	RET
                 
                 __EQB12:
0008d1 17ea      	CP   R30,R26
0008d2 e0e1      	LDI  R30,1
0008d3 f009      	BREQ __EQB12T
0008d4 27ee      	CLR  R30
                 __EQB12T:
0008d5 9508      	RET
                 
                 __EQW12:
0008d6 17ea      	CP   R30,R26
0008d7 07fb      	CPC  R31,R27
0008d8 e0e1      	LDI  R30,1
0008d9 f009      	BREQ __EQW12T
0008da 27ee      	CLR  R30
                 __EQW12T:
0008db 9508      	RET
                 
                 __GETW1P:
0008dc 91ed      	LD   R30,X+
0008dd 91fc      	LD   R31,X
0008de 9711      	SBIW R26,1
0008df 9508      	RET
                 
                 __GETW1PF:
0008e0 9005      	LPM  R0,Z+
0008e1 91f4      	LPM  R31,Z
0008e2 2de0      	MOV  R30,R0
0008e3 9508      	RET
                 
                 __PUTPARD1:
0008e4 937a      	ST   -Y,R23
0008e5 936a      	ST   -Y,R22
0008e6 93fa      	ST   -Y,R31
0008e7 93ea      	ST   -Y,R30
0008e8 9508      	RET
                 
                 __SAVELOCR6:
0008e9 935a      	ST   -Y,R21
                 __SAVELOCR5:
0008ea 934a      	ST   -Y,R20
                 __SAVELOCR4:
0008eb 933a      	ST   -Y,R19
                 __SAVELOCR3:
0008ec 932a      	ST   -Y,R18
                 __SAVELOCR2:
0008ed 931a      	ST   -Y,R17
0008ee 930a      	ST   -Y,R16
0008ef 9508      	RET
                 
                 __LOADLOCR6:
0008f0 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0008f1 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0008f2 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0008f3 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0008f4 8119      	LDD  R17,Y+1
0008f5 8108      	LD   R16,Y
0008f6 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32A register use summary:
r0 :  28 r1 :   3 r2 :   6 r3 :   0 r4 :   3 r5 :   1 r6 :   3 r7 :   1 
r8 :  12 r9 :   8 r10:   4 r11:  13 r12:   6 r13:   2 r14:   0 r15:  14 
r16:  38 r17:  52 r18:  44 r19:  22 r20:  21 r21:  28 r22:  14 r23:   5 
r24:  30 r25:   7 r26: 196 r27:  88 r28:  40 r29:   1 r30: 391 r31: 155 
x  :  45 y  : 262 z  :  20 
Registers used: 33 out of 35 (94.3%)

ATmega32A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   5 add   :   8 
adiw  :  51 and   :   6 andi  :   8 asr   :   0 bclr  :   0 bld   :   4 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  40 
brge  :   5 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  12 
brlt  :  19 brmi  :   1 brne  :  51 brpl  :   1 brsh  :   3 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  : 229 
cbi   :   9 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  21 cls   :   0 clt   :   4 clv   :   0 clz   :   0 com   :   0 
cp    :  14 cpc   :  18 cpi   :  53 cpse  :   0 dec   :   8 des   :   0 
eor   :   1 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   2 inc   :   5 jmp   :  29 ld    :  60 ldd   :  90 ldi   : 269 
lds   :  34 lpm   :  16 lsl   :   5 lsr   :   0 mov   :  39 movw  :  38 
mul   :   1 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   0 
ori   :   6 out   :  16 pop   :   2 push  :   2 rcall :  22 ret   :  66 
reti  :   2 rjmp  : 146 rol   :   5 ror   :   0 sbc   :   2 sbci  :  10 
sbi   :  13 sbic  :  18 sbis  :  27 sbiw  :  50 sbr   :   0 sbrc  :   5 
sbrs  :  13 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   4 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    : 123 std   :  41 sts   :  30 sub   :   4 subi  :  28 swap  :   1 
tst   :   7 wdr   :   1 
Instructions used: 65 out of 116 (56.0%)

ATmega32A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0011ee   4256    334   4590   32768  14.0%
[.dseg] 0x000060 0x000308      0    168    168    2048   8.2%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 16 warnings
