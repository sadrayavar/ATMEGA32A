
AVRASM ver. 2.1.30  D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm Thu Feb 08 18:48:36 2024

D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1087): warning: Register r4 already defined by the .DEF directive
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1088): warning: Register r5 already defined by the .DEF directive
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1089): warning: Register r6 already defined by the .DEF directive
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1090): warning: Register r7 already defined by the .DEF directive
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1091): warning: Register r9 already defined by the .DEF directive
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1092): warning: Register r8 already defined by the .DEF directive
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1093): warning: Register r10 already defined by the .DEF directive
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1094): warning: Register r11 already defined by the .DEF directive
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1095): warning: Register r12 already defined by the .DEF directive
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1096): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Release
                 ;Chip type              : ATmega32A
                 ;Program type           : Application
                 ;Clock frequency        : 8/000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32A
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _n_vurud=R4
                 	.DEF _n_vurud_msb=R5
                 	.DEF _n_khuruj=R6
                 	.DEF _n_khuruj_msb=R7
                 	.DEF _capacity=R9
                 	.DEF _reserved=R8
                 	.DEF _second=R10
                 	.DEF _second_msb=R11
                 	.DEF _minute=R12
                 	.DEF _minute_msb=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 00c5 	JMP  __RESET
000002 940c 014f 	JMP  _ext_int0_isr
000004 940c 0172 	JMP  _ext_int1_isr
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 00f4 	JMP  _timer2_ovf_isr
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
000033 0002      	.DW  0x0002
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000034 0000
000035 0000      	.DB  0x0,0x0,0x0,0x0
000036 0a00
000037 0032      	.DB  0x0,0xA,0x32,0x0
000038 003b      	.DB  0x3B,0x0
                 
                 _0x3:
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1144): warning: .cseg .db misalignment - padding zero byte
000039 000a      	.DB  0xA
                 _0x4:
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1146): warning: .cseg .db misalignment - padding zero byte
00003a 0017      	.DB  0x17
                 _0x5:
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1148): warning: .cseg .db misalignment - padding zero byte
00003b 001d      	.DB  0x1D
                 _0x6:
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1150): warning: .cseg .db misalignment - padding zero byte
00003c 000c      	.DB  0xC
                 _0x7:
00003d 057a      	.DB  0x7A,0x5
                 _0x0:
00003e 6d45
00003f 7470
000040 0079
000041 7546      	.DB  0x45,0x6D,0x70,0x74,0x79,0x0,0x46,0x75
000042 6c6c
000043 7300
000044 7661
000045 6e69      	.DB  0x6C,0x6C,0x0,0x73,0x61,0x76,0x69,0x6E
000046 2067
000047 6164
000048 6174
000049 4300      	.DB  0x67,0x20,0x64,0x61,0x74,0x61,0x0,0x43
00004a 253d
00004b 2064
00004c 6425
00004d 252f      	.DB  0x3D,0x25,0x64,0x20,0x25,0x64,0x2F,0x25
00004e 2f64
00004f 6425
000050 2500
000051 3a64      	.DB  0x64,0x2F,0x25,0x64,0x0,0x25,0x64,0x3A
000052 6425
000053 253a
000054 2064
000055 5220      	.DB  0x25,0x64,0x3A,0x25,0x64,0x20,0x20,0x52
000056 253d
000057 2064
000058 5400
000059 6d69      	.DB  0x3D,0x25,0x64,0x20,0x0,0x54,0x69,0x6D
00005a 2065
00005b 6553
00005c 7474
00005d 6e69      	.DB  0x65,0x20,0x53,0x65,0x74,0x74,0x69,0x6E
00005e 2067
00005f 3e3e
000060 4900
000061 264e      	.DB  0x67,0x20,0x3E,0x3E,0x0,0x49,0x4E,0x26
000062 554f
000063 2054
000064 6553
000065 7261      	.DB  0x4F,0x55,0x54,0x20,0x53,0x65,0x61,0x72
000066 6863
000067 3e20
000068 003e
000069 6552      	.DB  0x63,0x68,0x20,0x3E,0x3E,0x0,0x52,0x65
00006a 6573
00006b 7672
00006c 5f65
00006d 6150      	.DB  0x73,0x65,0x72,0x76,0x65,0x5F,0x50,0x61
00006e 6b72
00006f 3e20
000070 003e
000071 6553      	.DB  0x72,0x6B,0x20,0x3E,0x3E,0x0,0x53,0x65
000072 2074
000073 6164
000074 6574
000075 3e20      	.DB  0x74,0x20,0x64,0x61,0x74,0x65,0x20,0x3E
000076 003e
000077 6553
000078 2074
000079 696d      	.DB  0x3E,0x0,0x53,0x65,0x74,0x20,0x6D,0x69
00007a 3d6e
00007b 6425
00007c 2020
00007d 003e      	.DB  0x6E,0x3D,0x25,0x64,0x20,0x20,0x3E,0x0
00007e 6553
00007f 2074
000080 6f68
000081 7275      	.DB  0x53,0x65,0x74,0x20,0x68,0x6F,0x75,0x72
000082 253d
000083 2064
000084 3e20
000085 2500      	.DB  0x3D,0x25,0x64,0x20,0x20,0x3E,0x0,0x25
000086 2f64
000087 6425
000088 252f
000089 2064      	.DB  0x64,0x2F,0x25,0x64,0x2F,0x25,0x64,0x20
00008a 6900
00008b 3d6e
00008c 6425
00008d 6f20      	.DB  0x0,0x69,0x6E,0x3D,0x25,0x64,0x20,0x6F
00008e 7475
00008f 253d
000090 0064
000091 6552      	.DB  0x75,0x74,0x3D,0x25,0x64,0x0,0x52,0x65
000092 6573
000093 7672
000094 6465
000095 253d      	.DB  0x73,0x65,0x72,0x76,0x65,0x64,0x3D,0x25
000096 0064
000097 6553
000098 2074
000099 6f6d      	.DB  0x64,0x0,0x53,0x65,0x74,0x20,0x6D,0x6F
00009a 746e
00009b 3d68
00009c 6425
00009d 2020      	.DB  0x6E,0x74,0x68,0x3D,0x25,0x64,0x20,0x20
00009e 003e
00009f 6553
0000a0 2074
0000a1 6164      	.DB  0x3E,0x0,0x53,0x65,0x74,0x20,0x64,0x61
0000a2 3d79
0000a3 6425
0000a4 2020
0000a5 003e      	.DB  0x79,0x3D,0x25,0x64,0x20,0x20,0x3E,0x0
0000a6 6553
0000a7 2074
0000a8 6579
0000a9 7261      	.DB  0x53,0x65,0x74,0x20,0x79,0x65,0x61,0x72
0000aa 253d
0000ab 2064
0000ac 3e20
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1181): warning: .cseg .db misalignment - padding zero byte
0000ad 0000      	.DB  0x3D,0x25,0x64,0x20,0x20,0x3E,0x0
                 _0x2020003:
0000ae c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
0000af 0001      	.DW  0x01
0000b0 0002      	.DW  0x02
0000b1 0066      	.DW  __REG_BIT_VARS*2
                 
0000b2 000a      	.DW  0x0A
0000b3 0004      	.DW  0x04
0000b4 0068      	.DW  __REG_VARS*2
                 
0000b5 0001      	.DW  0x01
0000b6 0260      	.DW  _hour
0000b7 0074      	.DW  _0x4*2
                 
0000b8 0001      	.DW  0x01
0000b9 0262      	.DW  _day
0000ba 0076      	.DW  _0x5*2
                 
0000bb 0001      	.DW  0x01
0000bc 0264      	.DW  _month
0000bd 0078      	.DW  _0x6*2
                 
0000be 0002      	.DW  0x02
0000bf 0266      	.DW  _year
0000c0 007a      	.DW  _0x7*2
                 
0000c1 0002      	.DW  0x02
0000c2 0268      	.DW  __base_y_G101
0000c3 015c      	.DW  _0x2020003*2
                 
                 _0xFFFFFFFF:
0000c4 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
0000c5 94f8      	CLI
0000c6 27ee      	CLR  R30
0000c7 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
0000c8 e0f1      	LDI  R31,1
0000c9 bff5      	OUT  MCUCR,R31
0000ca bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
0000cb e1f8      	LDI  R31,0x18
0000cc bdf1      	OUT  WDTCR,R31
0000cd bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
0000ce e08d      	LDI  R24,(14-2)+1
0000cf e0a2      	LDI  R26,2
0000d0 27bb      	CLR  R27
                 __CLEAR_REG:
0000d1 93ed      	ST   X+,R30
0000d2 958a      	DEC  R24
0000d3 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0000d4 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
0000d5 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
0000d6 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
0000d7 93ed      	ST   X+,R30
0000d8 9701      	SBIW R24,1
0000d9 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0000da e5ee      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0000db e0f1      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0000dc 9185      	LPM  R24,Z+
0000dd 9195      	LPM  R25,Z+
0000de 9700      	SBIW R24,0
0000df f061      	BREQ __GLOBAL_INI_END
0000e0 91a5      	LPM  R26,Z+
0000e1 91b5      	LPM  R27,Z+
0000e2 9005      	LPM  R0,Z+
0000e3 9015      	LPM  R1,Z+
0000e4 01bf      	MOVW R22,R30
0000e5 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0000e6 9005      	LPM  R0,Z+
0000e7 920d      	ST   X+,R0
0000e8 9701      	SBIW R24,1
0000e9 f7e1      	BRNE __GLOBAL_INI_LOOP
0000ea 01fb      	MOVW R30,R22
0000eb cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0000ec e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0000ed bfed      	OUT  SPL,R30
0000ee e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000ef bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000f0 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000f1 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000f2 940c 01a2 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <mega32a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h> // delay_ms functions
                 ;#include <stdio.h> // sprintf function
                 ;#include <alcd.h>  // lcd related functions
                 ;#define xtal 8000000
                 ;
                 ;// prototyping functions
                 ;char menu(void);
                 ;char in_out_search(void);
                 ;char set_time(void);
                 ;char reserve_park(void);
                 ;char set_date(void);
                 ;
                 ;// parking related variables
                 ;unsigned int n_vurud = 0, n_khuruj = 0;
                 ;eeprom unsigned int enter_array[31] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  ...
                 ;eeprom unsigned int exit_array[31] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ...
                 ;eeprom unsigned char day_index = 0;
                 ;unsigned char const init_capacity = 10;
                 
                 	.DSEG
                 ;signed char capacity = init_capacity, reserved = 0;
                 ;bit is_full = 0, is_empty = 1;
                 ;
                 ;// date related variables
                 ;unsigned int second = 50, minute = 59, hour = 23, day = 29, month = 12, year = 1402;
                 ;
                 ;// define timer interrupt: clock and date logic
                 ;interrupt[TIM2_OVF] void timer2_ovf_isr(void)
                 ; 0000 001C {
                 
                 	.CSEG
                 _timer2_ovf_isr:
                 ; .FSTART _timer2_ovf_isr
0000f4 93aa      	ST   -Y,R26
0000f5 93ba      	ST   -Y,R27
0000f6 93ea      	ST   -Y,R30
0000f7 93fa      	ST   -Y,R31
0000f8 b7ef      	IN   R30,SREG
0000f9 93ea      	ST   -Y,R30
                 ; 0000 001D 
                 ; 0000 001E   // logic of second, minute, hour
                 ; 0000 001F   if (second == 59)
0000fa e3eb      	LDI  R30,LOW(59)
0000fb e0f0      	LDI  R31,HIGH(59)
0000fc 15ea      	CP   R30,R10
0000fd 05fb      	CPC  R31,R11
0000fe f4f9      	BRNE _0x8
                 ; 0000 0020   {
                 ; 0000 0021     second = 0;
0000ff 24aa      	CLR  R10
000100 24bb      	CLR  R11
                 ; 0000 0022     if (minute == 59)
000101 15ec      	CP   R30,R12
000102 05fd      	CPC  R31,R13
000103 f4b1      	BRNE _0x9
                 ; 0000 0023     {
                 ; 0000 0024       minute = 0;
000104 24cc      	CLR  R12
000105 24dd      	CLR  R13
                 ; 0000 0025       if (hour == 23)
000106 940e 0724 	CALL SUBOPT_0x0
000108 9757      	SBIW R26,23
000109 f441      	BRNE _0xA
                 ; 0000 0026       {
                 ; 0000 0027         hour = 0;
00010a e0e0      	LDI  R30,LOW(0)
00010b 93e0 0260 	STS  _hour,R30
00010d 93e0 0261 	STS  _hour+1,R30
                 ; 0000 0028         day++;
00010f e6a2      	LDI  R26,LOW(_day)
000110 e0b2      	LDI  R27,HIGH(_day)
000111 c002      	RJMP _0xCD
                 ; 0000 0029       }
                 ; 0000 002A       else
                 _0xA:
                 ; 0000 002B         hour++;
000112 e6a0      	LDI  R26,LOW(_hour)
000113 e0b2      	LDI  R27,HIGH(_hour)
                 _0xCD:
000114 91ed      	LD   R30,X+
000115 91fd      	LD   R31,X+
000116 9631      	ADIW R30,1
000117 93fe      	ST   -X,R31
000118 93ee      	ST   -X,R30
                 ; 0000 002C     }
                 ; 0000 002D     else
000119 c003      	RJMP _0xC
                 _0x9:
                 ; 0000 002E       minute++;
00011a 01f6      	MOVW R30,R12
00011b 9631      	ADIW R30,1
00011c 016f      	MOVW R12,R30
                 ; 0000 002F   }
                 _0xC:
                 ; 0000 0030   else
00011d c003      	RJMP _0xD
                 _0x8:
                 ; 0000 0031     second++;
00011e 01f5      	MOVW R30,R10
00011f 9631      	ADIW R30,1
000120 015f      	MOVW R10,R30
                 ; 0000 0032 
                 ; 0000 0033   // logic of day, month
                 ; 0000 0034   if (month <= 6)
                 _0xD:
000121 940e 0729 	CALL SUBOPT_0x1
000123 9717      	SBIW R26,7
000124 f438      	BRSH _0xE
                 ; 0000 0035   {
                 ; 0000 0036     if (day > 31)
000125 940e 072e 	CALL SUBOPT_0x2
000127 9790      	SBIW R26,32
000128 f010      	BRLO _0xF
                 ; 0000 0037     {
                 ; 0000 0038       day = 1;
000129 940e 0733 	CALL SUBOPT_0x3
                 ; 0000 0039       month++;
                 ; 0000 003A     }
                 ; 0000 003B   }
                 _0xF:
                 ; 0000 003C   else
00012b c011      	RJMP _0x10
                 _0xE:
                 ; 0000 003D   {
                 ; 0000 003E     if (month == 12)
00012c 940e 0729 	CALL SUBOPT_0x1
00012e 971c      	SBIW R26,12
00012f f439      	BRNE _0x11
                 ; 0000 003F     {
                 ; 0000 0040       if (day > 29)
000130 940e 072e 	CALL SUBOPT_0x2
000132 975e      	SBIW R26,30
000133 f010      	BRLO _0x12
                 ; 0000 0041       {
                 ; 0000 0042         day = 1;
000134 940e 0733 	CALL SUBOPT_0x3
                 ; 0000 0043         month++;
                 ; 0000 0044       }
                 ; 0000 0045     }
                 _0x12:
                 ; 0000 0046     else
000136 c006      	RJMP _0x13
                 _0x11:
                 ; 0000 0047     {
                 ; 0000 0048       if (day > 30)
000137 940e 072e 	CALL SUBOPT_0x2
000139 975f      	SBIW R26,31
00013a f010      	BRLO _0x14
                 ; 0000 0049       {
                 ; 0000 004A         day = 1;
00013b 940e 0733 	CALL SUBOPT_0x3
                 ; 0000 004B         month++;
                 ; 0000 004C       }
                 ; 0000 004D     }
                 _0x14:
                 _0x13:
                 ; 0000 004E   }
                 _0x10:
                 ; 0000 004F 
                 ; 0000 0050   // logic of year
                 ; 0000 0051   if (month > 12)
00013d 940e 0729 	CALL SUBOPT_0x1
00013f 971d      	SBIW R26,13
000140 f038      	BRLO _0x15
                 ; 0000 0052   {
                 ; 0000 0053     month = 1;
000141 940e 0741 	CALL SUBOPT_0x4
                 ; 0000 0054     year++;
000143 940e 0748 	CALL SUBOPT_0x5
000145 9631      	ADIW R30,1
000146 93fe      	ST   -X,R31
000147 93ee      	ST   -X,R30
                 ; 0000 0055   }
                 ; 0000 0056 }
                 _0x15:
000148 91e9      	LD   R30,Y+
000149 bfef      	OUT  SREG,R30
00014a 91f9      	LD   R31,Y+
00014b 91e9      	LD   R30,Y+
00014c 91b9      	LD   R27,Y+
00014d 91a9      	LD   R26,Y+
00014e 9518      	RETI
                 ; .FEND
                 ;
                 ;// define interrupt 0: for exiting cars
                 ;interrupt[EXT_INT0] void ext_int0_isr(void)
                 ; 0000 005A {
                 _ext_int0_isr:
                 ; .FSTART _ext_int0_isr
00014f 940e 074d 	CALL SUBOPT_0x6
                 ; 0000 005B   if (is_empty == 1)
000151 fe21      	SBRS R2,1
000152 c007      	RJMP _0x16
                 ; 0000 005C   {
                 ; 0000 005D     lcd_clear();
000153 940e 068b 	CALL _lcd_clear
                 ; 0000 005E     lcd_putsf("Empty");
                +
000155 e7ac     +LDI R26 , LOW ( 2 * _0x0 + ( 0 ) )
000156 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW2FN _0x0,0
000157 940e 075b 	CALL SUBOPT_0x7
                 ; 0000 005F     delay_ms(500);
                 ; 0000 0060   }
                 ; 0000 0061   else
000159 c017      	RJMP _0x17
                 _0x16:
                 ; 0000 0062   {
                 ; 0000 0063 
                 ; 0000 0064     capacity++;
00015a 9493      	INC  R9
                 ; 0000 0065     n_khuruj++;
00015b 01f3      	MOVW R30,R6
00015c 9631      	ADIW R30,1
00015d 013f      	MOVW R6,R30
00015e 9731      	SBIW R30,1
                 ; 0000 0066 
                 ; 0000 0067     // check if the parking is empty
                 ; 0000 0068     if ((capacity + reserved) >= init_capacity)
00015f 940e 0761 	CALL SUBOPT_0x8
000161 f02c      	BRLT _0x18
                 ; 0000 0069     {
                 ; 0000 006A       capacity = init_capacity - reserved;
000162 e0ea      	LDI  R30,LOW(10)
000163 19e8      	SUB  R30,R8
000164 2e9e      	MOV  R9,R30
                 ; 0000 006B       is_empty = 1;
000165 9468      	SET
000166 c001      	RJMP _0xCE
                 ; 0000 006C     }
                 ; 0000 006D     else
                 _0x18:
                 ; 0000 006E     {
                 ; 0000 006F       is_empty = 0;
000167 94e8      	CLT
                 _0xCE:
000168 f821      	BLD  R2,1
                 ; 0000 0070     }
                 ; 0000 0071 
                 ; 0000 0072     // checking if the parking is full
                 ; 0000 0073     if (capacity <= 0)
000169 e0e0      	LDI  R30,LOW(0)
00016a 15e9      	CP   R30,R9
00016b f01c      	BRLT _0x1A
                 ; 0000 0074     {
                 ; 0000 0075       capacity = 0;
00016c 2499      	CLR  R9
                 ; 0000 0076       is_full = 1;
00016d 9468      	SET
00016e c001      	RJMP _0xCF
                 ; 0000 0077     }
                 ; 0000 0078     else
                 _0x1A:
                 ; 0000 0079     {
                 ; 0000 007A       is_full = 0;
00016f 94e8      	CLT
                 _0xCF:
000170 f820      	BLD  R2,0
                 ; 0000 007B     }
                 ; 0000 007C   }
                 _0x17:
                 ; 0000 007D }
000171 c022      	RJMP _0xD3
                 ; .FEND
                 ;
                 ;// define interrupt 1: for entering cars
                 ;interrupt[EXT_INT1] void ext_int1_isr(void)
                 ; 0000 0081 {
                 _ext_int1_isr:
                 ; .FSTART _ext_int1_isr
000172 940e 074d 	CALL SUBOPT_0x6
                 ; 0000 0082   if (is_full == 1)
000174 fe20      	SBRS R2,0
000175 c007      	RJMP _0x1C
                 ; 0000 0083   {
                 ; 0000 0084     lcd_clear();
000176 940e 068b 	CALL _lcd_clear
                 ; 0000 0085     lcd_putsf("Full");
                +
000178 e8a2     +LDI R26 , LOW ( 2 * _0x0 + ( 6 ) )
000179 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 6 ) )
                 	__POINTW2FN _0x0,6
00017a 940e 075b 	CALL SUBOPT_0x7
                 ; 0000 0086     delay_ms(500);
                 ; 0000 0087   }
                 ; 0000 0088   else
00017c c017      	RJMP _0x1D
                 _0x1C:
                 ; 0000 0089   {
                 ; 0000 008A 
                 ; 0000 008B     capacity--;
00017d 949a      	DEC  R9
                 ; 0000 008C     n_vurud++;
00017e 01f2      	MOVW R30,R4
00017f 9631      	ADIW R30,1
000180 012f      	MOVW R4,R30
000181 9731      	SBIW R30,1
                 ; 0000 008D 
                 ; 0000 008E     // checking if the parking is full
                 ; 0000 008F     if ((capacity) <= 0)
000182 e0e0      	LDI  R30,LOW(0)
000183 15e9      	CP   R30,R9
000184 f01c      	BRLT _0x1E
                 ; 0000 0090     {
                 ; 0000 0091       capacity = 0;
000185 2499      	CLR  R9
                 ; 0000 0092       is_full = 1;
000186 9468      	SET
000187 c001      	RJMP _0xD0
                 ; 0000 0093     }
                 ; 0000 0094     else
                 _0x1E:
                 ; 0000 0095     {
                 ; 0000 0096       is_full = 0;
000188 94e8      	CLT
                 _0xD0:
000189 f820      	BLD  R2,0
                 ; 0000 0097     }
                 ; 0000 0098 
                 ; 0000 0099     // check if the parking is empty
                 ; 0000 009A     if ((capacity + reserved) >= init_capacity)
00018a 940e 0761 	CALL SUBOPT_0x8
00018c f02c      	BRLT _0x20
                 ; 0000 009B     {
                 ; 0000 009C       capacity = init_capacity - reserved;
00018d e0ea      	LDI  R30,LOW(10)
00018e 19e8      	SUB  R30,R8
00018f 2e9e      	MOV  R9,R30
                 ; 0000 009D       is_empty = 1;
000190 9468      	SET
000191 c001      	RJMP _0xD1
                 ; 0000 009E     }
                 ; 0000 009F     else
                 _0x20:
                 ; 0000 00A0     {
                 ; 0000 00A1       is_empty = 0;
000192 94e8      	CLT
                 _0xD1:
000193 f821      	BLD  R2,1
                 ; 0000 00A2     }
                 ; 0000 00A3   }
                 _0x1D:
                 ; 0000 00A4 }
                 _0xD3:
000194 91e9      	LD   R30,Y+
000195 bfef      	OUT  SREG,R30
000196 91f9      	LD   R31,Y+
000197 91e9      	LD   R30,Y+
000198 91b9      	LD   R27,Y+
000199 91a9      	LD   R26,Y+
00019a 9199      	LD   R25,Y+
00019b 9189      	LD   R24,Y+
00019c 9179      	LD   R23,Y+
00019d 9169      	LD   R22,Y+
00019e 90f9      	LD   R15,Y+
00019f 9019      	LD   R1,Y+
0001a0 9009      	LD   R0,Y+
0001a1 9518      	RETI
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 00A7 {
                 _main:
                 ; .FSTART _main
                 ; 0000 00A8   char line[17], line2[17];
                 ; 0000 00A9 
                 ; 0000 00AA   GICR |= 0xC0;
0001a2 97a2      	SBIW R28,34
                 ;	line -> Y+17
                 ;	line2 -> Y+0
0001a3 b7eb      	IN   R30,0x3B
0001a4 6ce0      	ORI  R30,LOW(0xC0)
0001a5 bfeb      	OUT  0x3B,R30
                 ; 0000 00AB   MCUCR = 0x0B;
0001a6 e0eb      	LDI  R30,LOW(11)
0001a7 bfe5      	OUT  0x35,R30
                 ; 0000 00AC   MCUCSR = 0x00;
0001a8 e0e0      	LDI  R30,LOW(0)
0001a9 bfe4      	OUT  0x34,R30
                 ; 0000 00AD   GIFR = 0xC0;
0001aa ece0      	LDI  R30,LOW(192)
0001ab bfea      	OUT  0x3A,R30
                 ; 0000 00AE 
                 ; 0000 00AF   // initilize lcd
                 ; 0000 00B0   lcd_init(16);
0001ac e1a0      	LDI  R26,LOW(16)
0001ad 940e 06db 	CALL _lcd_init
                 ; 0000 00B1   lcd_clear();
0001af 940e 068b 	CALL _lcd_clear
                 ; 0000 00B2   lcd_gotoxy(0, 1);
0001b1 940e 076d 	CALL SUBOPT_0x9
                 ; 0000 00B3   delay_ms(300);
0001b3 e2ac      	LDI  R26,LOW(300)
0001b4 e0b1      	LDI  R27,HIGH(300)
0001b5 940e 0887 	CALL _delay_ms
                 ; 0000 00B4 
                 ; 0000 00B5   ASSR = 0x08; // timer2
0001b7 e0e8      	LDI  R30,LOW(8)
0001b8 bde2      	OUT  0x22,R30
                 ; 0000 00B6   TCCR2 = 0x05;
0001b9 e0e5      	LDI  R30,LOW(5)
0001ba bde5      	OUT  0x25,R30
                 ; 0000 00B7   TCNT2 = 0x00;
0001bb e0e0      	LDI  R30,LOW(0)
0001bc bde4      	OUT  0x24,R30
                 ; 0000 00B8   OCR2 = 0x00;
0001bd bde3      	OUT  0x23,R30
                 ; 0000 00B9   TIMSK = 0x40;
0001be e4e0      	LDI  R30,LOW(64)
0001bf bfe9      	OUT  0x39,R30
                 ; 0000 00BA 
                 ; 0000 00BB   PORTA = 0b00011111;
0001c0 e1ef      	LDI  R30,LOW(31)
0001c1 bbeb      	OUT  0x1B,R30
                 ; 0000 00BC 
                 ; 0000 00BD   // day = day_index; // day_index in epprom
                 ; 0000 00BE 
                 ; 0000 00BF #asm("sei")
0001c2 9478      	sei
                 ; 0000 00C0   capacity = capacity - reserved;
0001c3 1898      	SUB  R9,R8
                 ; 0000 00C1 
                 ; 0000 00C2   while (1)
                 _0x22:
                 ; 0000 00C3   {
                 ; 0000 00C4 
                 ; 0000 00C5     if (PINA .2 == 0)
0001c4 99ca      	SBIC 0x19,2
0001c5 c003      	RJMP _0x25
                 ; 0000 00C6     {
                 ; 0000 00C7       while (PINA .2 == 0)
                 _0x26:
0001c6 9bca      	SBIS 0x19,2
                 ; 0000 00C8         ;
0001c7 cffe      	RJMP _0x26
                 ; 0000 00C9       menu();
0001c8 d069      	RCALL _menu
                 ; 0000 00CA     }
                 ; 0000 00CB 
                 ; 0000 00CC     // save the enter and exits at the end of the day
                 ; 0000 00CD     if (hour == 0 & minute == 0 & second == 0)
                 _0x25:
0001c9 940e 0772 	CALL SUBOPT_0xA
0001cb f181      	BREQ _0x29
                 ; 0000 00CE     { //  data will save   in 0:0:00
                 ; 0000 00CF       enter_array[day_index] = n_vurud;
0001cc 940e 0785 	CALL SUBOPT_0xB
0001ce e0a0      	LDI  R26,LOW(_enter_array)
0001cf e0b0      	LDI  R27,HIGH(_enter_array)
0001d0 e0f0      	LDI  R31,0
0001d1 0fee      	LSL  R30
0001d2 1fff      	ROL  R31
0001d3 0fae      	ADD  R26,R30
0001d4 1fbf      	ADC  R27,R31
0001d5 01f2      	MOVW R30,R4
0001d6 940e 08d6 	CALL __EEPROMWRW
                 ; 0000 00D0       exit_array[day_index] = n_khuruj;
0001d8 940e 0785 	CALL SUBOPT_0xB
0001da e3ae      	LDI  R26,LOW(_exit_array)
0001db e0b0      	LDI  R27,HIGH(_exit_array)
0001dc e0f0      	LDI  R31,0
0001dd 0fee      	LSL  R30
0001de 1fff      	ROL  R31
0001df 0fae      	ADD  R26,R30
0001e0 1fbf      	ADC  R27,R31
0001e1 01f3      	MOVW R30,R6
0001e2 940e 08d6 	CALL __EEPROMWRW
                 ; 0000 00D1       day_index++;
0001e4 940e 0785 	CALL SUBOPT_0xB
0001e6 5fef      	SUBI R30,-LOW(1)
0001e7 940e 08de 	CALL __EEPROMWRB
                 ; 0000 00D2 
                 ; 0000 00D3       if (day_index > 30) // 30 31 29 yek mah
0001e9 940e 0785 	CALL SUBOPT_0xB
0001eb 31ef      	CPI  R30,LOW(0x1F)
0001ec f028      	BRLO _0x2A
                 ; 0000 00D4         day_index = 0;
0001ed e7ac      	LDI  R26,LOW(_day_index)
0001ee e0b0      	LDI  R27,HIGH(_day_index)
0001ef e0e0      	LDI  R30,LOW(0)
0001f0 940e 08de 	CALL __EEPROMWRB
                 ; 0000 00D5 
                 ; 0000 00D6       while (hour == 0 & minute == 0 & second == 0)
                 _0x2A:
                 _0x2B:
0001f2 940e 0772 	CALL SUBOPT_0xA
0001f4 f039      	BREQ _0x2D
                 ; 0000 00D7       {
                 ; 0000 00D8         lcd_clear();
0001f5 940e 068b 	CALL _lcd_clear
                 ; 0000 00D9         lcd_putsf("saving data");
                +
0001f7 e8a7     +LDI R26 , LOW ( 2 * _0x0 + ( 11 ) )
0001f8 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 11 ) )
                 	__POINTW2FN _0x0,11
0001f9 940e 06c8 	CALL _lcd_putsf
                 ; 0000 00DA       }
0001fb cff6      	RJMP _0x2B
                 _0x2D:
                 ; 0000 00DB     }
                 ; 0000 00DC 
                 ; 0000 00DD     sprintf(line, "C=%d %d/%d/%d", capacity, year, month, day);
                 _0x29:
0001fc 01fe      	MOVW R30,R28
0001fd 9671      	ADIW R30,17
0001fe 93fa      	ST   -Y,R31
0001ff 93ea      	ST   -Y,R30
                +
000200 e9e3     +LDI R30 , LOW ( 2 * _0x0 + ( 23 ) )
000201 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 23 ) )
                 	__POINTW1FN _0x0,23
000202 93fa      	ST   -Y,R31
000203 93ea      	ST   -Y,R30
000204 2de9      	MOV  R30,R9
000205 940e 078a 	CALL SUBOPT_0xC
000207 940e 078f 	CALL SUBOPT_0xD
000209 940e 0798 	CALL SUBOPT_0xE
00020b 940e 07a1 	CALL SUBOPT_0xF
00020d e180      	LDI  R24,16
00020e 940e 0615 	CALL _sprintf
000210 9664      	ADIW R28,20
                 ; 0000 00DE     sprintf(line2, "%d:%d:%d  R=%d ", hour, minute, second, reserved);
000211 940e 07aa 	CALL SUBOPT_0x10
                +
000213 eae1     +LDI R30 , LOW ( 2 * _0x0 + ( 37 ) )
000214 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 37 ) )
                 	__POINTW1FN _0x0,37
000215 940e 07ae 	CALL SUBOPT_0x11
000217 01f6      	MOVW R30,R12
000218 940e 07b9 	CALL SUBOPT_0x12
00021a 01f5      	MOVW R30,R10
00021b 940e 07b9 	CALL SUBOPT_0x12
00021d 2de8      	MOV  R30,R8
00021e 940e 078a 	CALL SUBOPT_0xC
000220 e180      	LDI  R24,16
000221 940e 0615 	CALL _sprintf
000223 9664      	ADIW R28,20
                 ; 0000 00DF     lcd_clear();
000224 940e 068b 	CALL _lcd_clear
                 ; 0000 00E0     lcd_puts(line);
000226 01de      	MOVW R26,R28
000227 9651      	ADIW R26,17
000228 940e 06b9 	CALL _lcd_puts
                 ; 0000 00E1     lcd_gotoxy(0, 1);
00022a 940e 076d 	CALL SUBOPT_0x9
                 ; 0000 00E2     lcd_puts(line2);
00022c 940e 07be 	CALL SUBOPT_0x13
                 ; 0000 00E3     delay_ms(25);
00022e 940e 07c1 	CALL SUBOPT_0x14
                 ; 0000 00E4   }
000230 cf93      	RJMP _0x22
                 ; 0000 00E5 }
                 _0x2E:
000231 cfff      	RJMP _0x2E
                 ; .FEND
                 ;
                 ;/// Functions 4 menu and...
                 ;char menu(void)
                 ; 0000 00E9 {
                 _menu:
                 ; .FSTART _menu
                 ; 0000 00EA   char choice = 0;
                 ; 0000 00EB   while (1)
000232 931a      	ST   -Y,R17
                 ;	choice -> R17
000233 e010      	LDI  R17,0
                 _0x2F:
                 ; 0000 00EC   {
                 ; 0000 00ED     // iterate through menu items
                 ; 0000 00EE     if (choice == 0)
000234 3010      	CPI  R17,0
000235 f431      	BRNE _0x32
                 ; 0000 00EF     {
                 ; 0000 00F0       lcd_clear();
000236 940e 068b 	CALL _lcd_clear
                 ; 0000 00F1       lcd_putsf("Time Setting >>");
                +
000238 eba1     +LDI R26 , LOW ( 2 * _0x0 + ( 53 ) )
000239 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 53 ) )
                 	__POINTW2FN _0x0,53
00023a 940e 06c8 	CALL _lcd_putsf
                 ; 0000 00F2     }
                 ; 0000 00F3     if (choice == 1)
                 _0x32:
00023c 3011      	CPI  R17,1
00023d f431      	BRNE _0x33
                 ; 0000 00F4     {
                 ; 0000 00F5       lcd_clear();
00023e 940e 068b 	CALL _lcd_clear
                 ; 0000 00F6       lcd_putsf("IN&OUT Search >>");
                +
000240 eca1     +LDI R26 , LOW ( 2 * _0x0 + ( 69 ) )
000241 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 69 ) )
                 	__POINTW2FN _0x0,69
000242 940e 06c8 	CALL _lcd_putsf
                 ; 0000 00F7     }
                 ; 0000 00F8     if (choice == 2)
                 _0x33:
000244 3012      	CPI  R17,2
000245 f431      	BRNE _0x34
                 ; 0000 00F9     {
                 ; 0000 00FA       lcd_clear();
000246 940e 068b 	CALL _lcd_clear
                 ; 0000 00FB       lcd_putsf("Reserve_Park >>");
                +
000248 eda2     +LDI R26 , LOW ( 2 * _0x0 + ( 86 ) )
000249 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 86 ) )
                 	__POINTW2FN _0x0,86
00024a 940e 06c8 	CALL _lcd_putsf
                 ; 0000 00FC     }
                 ; 0000 00FD     if (choice == 3)
                 _0x34:
00024c 3013      	CPI  R17,3
00024d f431      	BRNE _0x35
                 ; 0000 00FE     {
                 ; 0000 00FF       lcd_clear();
00024e 940e 068b 	CALL _lcd_clear
                 ; 0000 0100       lcd_putsf("Set date >>");
                +
000250 eea2     +LDI R26 , LOW ( 2 * _0x0 + ( 102 ) )
000251 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 102 ) )
                 	__POINTW2FN _0x0,102
000252 940e 06c8 	CALL _lcd_putsf
                 ; 0000 0101     }
                 ; 0000 0102     if (PINA .3 == 0) // next item
                 _0x35:
000254 99cb      	SBIC 0x19,3
000255 c006      	RJMP _0x36
                 ; 0000 0103     {
                 ; 0000 0104       while (PINA .3 == 0)
                 _0x37:
000256 9bcb      	SBIS 0x19,3
                 ; 0000 0105         ;
000257 cffe      	RJMP _0x37
                 ; 0000 0106       choice++;
000258 5f1f      	SUBI R17,-1
                 ; 0000 0107       if (choice >= 4)
000259 3014      	CPI  R17,4
00025a f008      	BRLO _0x3A
                 ; 0000 0108         choice = 0;
00025b e010      	LDI  R17,LOW(0)
                 ; 0000 0109     }
                 _0x3A:
                 ; 0000 010A 
                 ; 0000 010B     if (PINA .4 == 0) // close menu
                 _0x36:
00025c 99cc      	SBIC 0x19,4
00025d c004      	RJMP _0x3B
                 ; 0000 010C     {                 // Back
                 ; 0000 010D       while (PINA .4 == 0)
                 _0x3C:
00025e 9bcc      	SBIS 0x19,4
                 ; 0000 010E         ;
00025f cffe      	RJMP _0x3C
                 ; 0000 010F       return 0;
000260 e0e0      	LDI  R30,LOW(0)
000261 c025      	RJMP _0x2080008
                 ; 0000 0110     }
                 ; 0000 0111 
                 ; 0000 0112     // choose time_setting
                 ; 0000 0113     if (PINA .2 == 0 & choice == 0)
                 _0x3B:
000262 940e 07c5 	CALL SUBOPT_0x15
000264 940e 07ce 	CALL SUBOPT_0x16
000266 f019      	BREQ _0x3F
                 ; 0000 0114     {
                 ; 0000 0115       while (PINA .2 == 0)
                 _0x40:
000267 9bca      	SBIS 0x19,2
                 ; 0000 0116         ;
000268 cffe      	RJMP _0x40
                 ; 0000 0117       set_time();
000269 d01f      	RCALL _set_time
                 ; 0000 0118     }
                 ; 0000 0119 
                 ; 0000 011A     // choose in_out_search
                 ; 0000 011B     if (PINA .2 == 0 & choice == 1)
                 _0x3F:
00026a 940e 07c5 	CALL SUBOPT_0x15
00026c 940e 07d3 	CALL SUBOPT_0x17
00026e f019      	BREQ _0x43
                 ; 0000 011C     {
                 ; 0000 011D       while (PINA .2 == 0)
                 _0x44:
00026f 9bca      	SBIS 0x19,2
                 ; 0000 011E         ;
000270 cffe      	RJMP _0x44
                 ; 0000 011F       in_out_search();
000271 d090      	RCALL _in_out_search
                 ; 0000 0120     }
                 ; 0000 0121 
                 ; 0000 0122     // choose reserve
                 ; 0000 0123     if (PINA .2 == 0 & choice == 2)
                 _0x43:
000272 940e 07c5 	CALL SUBOPT_0x15
000274 940e 07d8 	CALL SUBOPT_0x18
000276 f019      	BREQ _0x47
                 ; 0000 0124     {
                 ; 0000 0125       while (PINA .2 == 0)
                 _0x48:
000277 9bca      	SBIS 0x19,2
                 ; 0000 0126         ;
000278 cffe      	RJMP _0x48
                 ; 0000 0127       reserve_park();
000279 d14c      	RCALL _reserve_park
                 ; 0000 0128     }
                 ; 0000 0129 
                 ; 0000 012A     // choose set date
                 ; 0000 012B     if (PINA .2 == 0 & choice == 3)
                 _0x47:
00027a 940e 07c5 	CALL SUBOPT_0x15
00027c e0e3      	LDI  R30,LOW(3)
00027d 940e 089f 	CALL __EQB12
00027f 21e0      	AND  R30,R0
000280 f019      	BREQ _0x4B
                 ; 0000 012C     {
                 ; 0000 012D       while (PINA .2 == 0)
                 _0x4C:
000281 9bca      	SBIS 0x19,2
                 ; 0000 012E         ;
000282 cffe      	RJMP _0x4C
                 ; 0000 012F       set_date();
000283 d174      	RCALL _set_date
                 ; 0000 0130     }
                 ; 0000 0131 
                 ; 0000 0132     delay_ms(25);
                 _0x4B:
000284 940e 07c1 	CALL SUBOPT_0x14
                 ; 0000 0133   }
000286 cfad      	RJMP _0x2F
                 ; 0000 0134 }
                 _0x2080008:
000287 9119      	LD   R17,Y+
000288 9508      	RET
                 ; .FEND
                 ;
                 ;// Time setting
                 ;char set_time(void)
                 ; 0000 0138 {
                 _set_time:
                 ; .FSTART _set_time
000289 92ff      	PUSH R15
                 ; 0000 0139   bit choice = 0;
                 ; 0000 013A   char line[17];
                 ; 0000 013B   while (1)
00028a 9761      	SBIW R28,17
                 ;	choice -> R15.0
                 ;	line -> Y+0
00028b 24ff      	CLR  R15
                 _0x4F:
                 ; 0000 013C   {
                 ; 0000 013D     if (choice == 0)
00028c fcf0      	SBRC R15,0
00028d c00b      	RJMP _0x52
                 ; 0000 013E     {
                 ; 0000 013F       sprintf(line, "Set min=%d  >", minute);
00028e 940e 07aa 	CALL SUBOPT_0x10
                +
000290 eeee     +LDI R30 , LOW ( 2 * _0x0 + ( 114 ) )
000291 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 114 ) )
                 	__POINTW1FN _0x0,114
000292 93fa      	ST   -Y,R31
000293 93ea      	ST   -Y,R30
000294 01f6      	MOVW R30,R12
000295 940e 07b9 	CALL SUBOPT_0x12
000297 940e 07dd 	CALL SUBOPT_0x19
                 ; 0000 0140       lcd_clear();
                 ; 0000 0141       lcd_puts(line);
                 ; 0000 0142     }
                 ; 0000 0143 
                 ; 0000 0144     if (choice == 1)
                 _0x52:
000299 fef0      	SBRS R15,0
00029a c008      	RJMP _0x53
                 ; 0000 0145     {
                 ; 0000 0146       sprintf(line, "Set hour=%d  >", hour);
00029b 940e 07aa 	CALL SUBOPT_0x10
                +
00029d efec     +LDI R30 , LOW ( 2 * _0x0 + ( 128 ) )
00029e e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 128 ) )
                 	__POINTW1FN _0x0,128
00029f 940e 07ae 	CALL SUBOPT_0x11
0002a1 940e 07dd 	CALL SUBOPT_0x19
                 ; 0000 0147       lcd_clear();
                 ; 0000 0148       lcd_puts(line);
                 ; 0000 0149     }
                 ; 0000 014A 
                 ; 0000 014B     if (PINA .1 == 0 & choice == 0)
                 _0x53:
0002a3 940e 07e4 	CALL SUBOPT_0x1A
0002a5 940e 07ce 	CALL SUBOPT_0x16
0002a7 f061      	BREQ _0x54
                 ; 0000 014C     { // UP     min
                 ; 0000 014D       while (PINA .1 == 0)
                 _0x55:
0002a8 9bc9      	SBIS 0x19,1
                 ; 0000 014E         ;
0002a9 cffe      	RJMP _0x55
                 ; 0000 014F       minute++;
0002aa 01f6      	MOVW R30,R12
0002ab 9631      	ADIW R30,1
0002ac 016f      	MOVW R12,R30
                 ; 0000 0150       if (minute > 59)
0002ad e3eb      	LDI  R30,LOW(59)
0002ae e0f0      	LDI  R31,HIGH(59)
0002af 15ec      	CP   R30,R12
0002b0 05fd      	CPC  R31,R13
0002b1 f410      	BRSH _0x58
                 ; 0000 0151         minute = 0;
0002b2 24cc      	CLR  R12
0002b3 24dd      	CLR  R13
                 ; 0000 0152     }
                 _0x58:
                 ; 0000 0153 
                 ; 0000 0154     if (PINA .0 == 0 & choice == 0)
                 _0x54:
0002b4 940e 07ef 	CALL SUBOPT_0x1B
0002b6 940e 07ce 	CALL SUBOPT_0x16
0002b8 f059      	BREQ _0x59
                 ; 0000 0155     { // DOWN    min
                 ; 0000 0156       while (PINA .0 == 0)
                 _0x5A:
0002b9 9bc8      	SBIS 0x19,0
                 ; 0000 0157         ;
0002ba cffe      	RJMP _0x5A
                 ; 0000 0158       if (minute == 0)
0002bb 2c0c      	MOV  R0,R12
0002bc 280d      	OR   R0,R13
0002bd f419      	BRNE _0x5D
                 ; 0000 0159         minute = 59;
0002be e3eb      	LDI  R30,LOW(59)
0002bf e0f0      	LDI  R31,HIGH(59)
0002c0 c002      	RJMP _0xD2
                 ; 0000 015A       else
                 _0x5D:
                 ; 0000 015B         minute--;
0002c1 01f6      	MOVW R30,R12
0002c2 9731      	SBIW R30,1
                 _0xD2:
0002c3 016f      	MOVW R12,R30
                 ; 0000 015C     }
                 ; 0000 015D 
                 ; 0000 015E     if (PINA .1 == 0 & choice == 1)
                 _0x59:
0002c4 940e 07e4 	CALL SUBOPT_0x1A
0002c6 940e 07d3 	CALL SUBOPT_0x17
0002c8 f079      	BREQ _0x5F
                 ; 0000 015F     { // UP    hour
                 ; 0000 0160       while (PINA .1 == 0)
                 _0x60:
0002c9 9bc9      	SBIS 0x19,1
                 ; 0000 0161         ;
0002ca cffe      	RJMP _0x60
                 ; 0000 0162       hour++;
0002cb e6a0      	LDI  R26,LOW(_hour)
0002cc e0b2      	LDI  R27,HIGH(_hour)
0002cd 940e 07fa 	CALL SUBOPT_0x1C
                 ; 0000 0163       if (hour > 23)
0002cf 940e 0724 	CALL SUBOPT_0x0
0002d1 9758      	SBIW R26,24
0002d2 f028      	BRLO _0x63
                 ; 0000 0164         hour = 0;
0002d3 e0e0      	LDI  R30,LOW(0)
0002d4 93e0 0260 	STS  _hour,R30
0002d6 93e0 0261 	STS  _hour+1,R30
                 ; 0000 0165     }
                 _0x63:
                 ; 0000 0166 
                 ; 0000 0167     if (PINA .0 == 0 & choice == 1)
                 _0x5F:
0002d8 940e 07ef 	CALL SUBOPT_0x1B
0002da 940e 07d3 	CALL SUBOPT_0x17
0002dc f099      	BREQ _0x64
                 ; 0000 0168     { // DOWN    hour
                 ; 0000 0169       while (PINA .0 == 0)
                 _0x65:
0002dd 9bc8      	SBIS 0x19,0
                 ; 0000 016A         ;
0002de cffe      	RJMP _0x65
                 ; 0000 016B       if (hour == 0)
0002df 91e0 0260 	LDS  R30,_hour
0002e1 91f0 0261 	LDS  R31,_hour+1
0002e3 9730      	SBIW R30,0
0002e4 f439      	BRNE _0x68
                 ; 0000 016C         hour = 23;
0002e5 e1e7      	LDI  R30,LOW(23)
0002e6 e0f0      	LDI  R31,HIGH(23)
0002e7 93e0 0260 	STS  _hour,R30
0002e9 93f0 0261 	STS  _hour+1,R31
                 ; 0000 016D       else
0002eb c004      	RJMP _0x69
                 _0x68:
                 ; 0000 016E         hour--;
0002ec e6a0      	LDI  R26,LOW(_hour)
0002ed e0b2      	LDI  R27,HIGH(_hour)
0002ee 940e 0800 	CALL SUBOPT_0x1D
                 ; 0000 016F     }
                 _0x69:
                 ; 0000 0170 
                 ; 0000 0171     if (PINA .3 == 0)
                 _0x64:
0002f0 99cb      	SBIC 0x19,3
0002f1 c004      	RJMP _0x6A
                 ; 0000 0172     { // NEXT
                 ; 0000 0173       while (PINA .3 == 0)
                 _0x6B:
0002f2 9bcb      	SBIS 0x19,3
                 ; 0000 0174         ;
0002f3 cffe      	RJMP _0x6B
                 ; 0000 0175       choice = !choice;
0002f4 e0e1      	LDI  R30,LOW(1)
0002f5 26fe      	EOR  R15,R30
                 ; 0000 0176     }
                 ; 0000 0177 
                 ; 0000 0178     if (PINA .4 == 0)
                 _0x6A:
0002f6 99cc      	SBIC 0x19,4
0002f7 c004      	RJMP _0x6E
                 ; 0000 0179     { // Back
                 ; 0000 017A       while (PINA .4 == 0)
                 _0x6F:
0002f8 9bcc      	SBIS 0x19,4
                 ; 0000 017B         ;
0002f9 cffe      	RJMP _0x6F
                 ; 0000 017C       return 0;
0002fa e0e0      	LDI  R30,LOW(0)
0002fb c003      	RJMP _0x2080007
                 ; 0000 017D     }
                 ; 0000 017E 
                 ; 0000 017F     delay_ms(25);
                 _0x6E:
0002fc 940e 07c1 	CALL SUBOPT_0x14
                 ; 0000 0180   }
0002fe cf8d      	RJMP _0x4F
                 ; 0000 0181 }
                 _0x2080007:
0002ff 9661      	ADIW R28,17
000300 90ff      	POP  R15
000301 9508      	RET
                 ; .FEND
                 ;
                 ;/// IN&OUT Search
                 ;char in_out_search(void)
                 ; 0000 0185 {
                 _in_out_search:
                 ; .FSTART _in_out_search
000302 92ff      	PUSH R15
                 ; 0000 0186   char line[17], line2[17];
                 ; 0000 0187   char temp_year = year, temp_month = month, temp_day = day_index;
                 ; 0000 0188   bit bit_m = 0;
                 ; 0000 0189 
                 ; 0000 018A   while (1)
000303 97a2      	SBIW R28,34
000304 940e 08f1 	CALL __SAVELOCR4
                 ;	line -> Y+21
                 ;	line2 -> Y+4
                 ;	temp_year -> R17
                 ;	temp_month -> R16
                 ;	temp_day -> R19
                 ;	bit_m -> R15.0
000306 24ff      	CLR  R15
000307 9110 0266 	LDS  R17,_year
000309 9100 0264 	LDS  R16,_month
00030b 940e 0785 	CALL SUBOPT_0xB
00030d 2f3e      	MOV  R19,R30
                 _0x72:
                 ; 0000 018B   {
                 ; 0000 018C 
                 ; 0000 018D     // UP
                 ; 0000 018E     if (PINA .1 == 0)
00030e 99c9      	SBIC 0x19,1
00030f c03b      	RJMP _0x75
                 ; 0000 018F     {
                 ; 0000 0190       while (PINA .1 == 0)
                 _0x76:
000310 9bc9      	SBIS 0x19,1
                 ; 0000 0191         ;
000311 cffe      	RJMP _0x76
                 ; 0000 0192       temp_day++;
000312 5f3f      	SUBI R19,-1
                 ; 0000 0193 
                 ; 0000 0194       if (temp_day > day_index & bit_m == 0)
000313 940e 0785 	CALL SUBOPT_0xB
000315 2fa3      	MOV  R26,R19
000316 940e 08ae 	CALL __GTB12U
000318 940e 0806 	CALL SUBOPT_0x1E
00031a f031      	BREQ _0x79
                 ; 0000 0195       {
                 ; 0000 0196         temp_day = day_index;
00031b 940e 0785 	CALL SUBOPT_0xB
00031d 2f3e      	MOV  R19,R30
                 ; 0000 0197         temp_month--;
00031e 5001      	SUBI R16,1
                 ; 0000 0198         bit_m = 1;
00031f 9468      	SET
000320 f8f0      	BLD  R15,0
                 ; 0000 0199       }
                 ; 0000 019A 
                 ; 0000 019B       if (temp_month <= 6 & temp_day > 31 & bit_m == 1)
                 _0x79:
000321 2fa0      	MOV  R26,R16
000322 e0e6      	LDI  R30,LOW(6)
000323 940e 08a4 	CALL __LEB12U
000325 2e0e      	MOV  R0,R30
000326 2fa3      	MOV  R26,R19
000327 e1ef      	LDI  R30,LOW(31)
000328 940e 080b 	CALL SUBOPT_0x1F
00032a f011      	BREQ _0x7A
                 ; 0000 019C       {
                 ; 0000 019D         temp_day = 1;
00032b 940e 0812 	CALL SUBOPT_0x20
                 ; 0000 019E         temp_month++;
                 ; 0000 019F         bit_m = 0;
                 ; 0000 01A0       }
                 ; 0000 01A1 
                 ; 0000 01A2       if (temp_month > 6 & temp_day > 30 & bit_m == 1)
                 _0x7A:
00032d 2fa0      	MOV  R26,R16
00032e e0e6      	LDI  R30,LOW(6)
00032f 940e 08ae 	CALL __GTB12U
000331 2e0e      	MOV  R0,R30
000332 2fa3      	MOV  R26,R19
000333 e1ee      	LDI  R30,LOW(30)
000334 940e 080b 	CALL SUBOPT_0x1F
000336 f011      	BREQ _0x7B
                 ; 0000 01A3       {
                 ; 0000 01A4         temp_day = 1;
000337 940e 0812 	CALL SUBOPT_0x20
                 ; 0000 01A5         temp_month++;
                 ; 0000 01A6         bit_m = 0;
                 ; 0000 01A7       }
                 ; 0000 01A8 
                 ; 0000 01A9       if (temp_month == 12 & temp_day > 29 & bit_m == 1)
                 _0x7B:
000339 2fa0      	MOV  R26,R16
00033a e0ec      	LDI  R30,LOW(12)
00033b 940e 089f 	CALL __EQB12
00033d 2e0e      	MOV  R0,R30
00033e 2fa3      	MOV  R26,R19
00033f e1ed      	LDI  R30,LOW(29)
000340 940e 080b 	CALL SUBOPT_0x1F
000342 f011      	BREQ _0x7C
                 ; 0000 01AA       {
                 ; 0000 01AB         temp_day = 1;
000343 940e 0812 	CALL SUBOPT_0x20
                 ; 0000 01AC         temp_month++;
                 ; 0000 01AD         bit_m = 0;
                 ; 0000 01AE       }
                 ; 0000 01AF 
                 ; 0000 01B0       if (temp_month == 0)
                 _0x7C:
000345 3000      	CPI  R16,0
000346 f409      	BRNE _0x7D
                 ; 0000 01B1         temp_month = 12;
000347 e00c      	LDI  R16,LOW(12)
                 ; 0000 01B2 
                 ; 0000 01B3       if (temp_month > 12)
                 _0x7D:
000348 300d      	CPI  R16,13
000349 f008      	BRLO _0x7E
                 ; 0000 01B4         temp_month = 1;
00034a e001      	LDI  R16,LOW(1)
                 ; 0000 01B5     }
                 _0x7E:
                 ; 0000 01B6 
                 ; 0000 01B7     // DOWN
                 ; 0000 01B8     if (PINA .0 == 0)
                 _0x75:
00034b 99c8      	SBIC 0x19,0
00034c c034      	RJMP _0x7F
                 ; 0000 01B9     {
                 ; 0000 01BA       while (PINA .0 == 0)
                 _0x80:
00034d 9bc8      	SBIS 0x19,0
                 ; 0000 01BB         ;
00034e cffe      	RJMP _0x80
                 ; 0000 01BC       temp_day--;
00034f 5031      	SUBI R19,1
                 ; 0000 01BD 
                 ; 0000 01BE       if (temp_day == 0 & bit_m == 0)
000350 2fa3      	MOV  R26,R19
000351 e0e0      	LDI  R30,LOW(0)
000352 940e 089f 	CALL __EQB12
000354 940e 0806 	CALL SUBOPT_0x1E
000356 f091      	BREQ _0x83
                 ; 0000 01BF       {
                 ; 0000 01C0 
                 ; 0000 01C1         temp_month--;
000357 5001      	SUBI R16,1
                 ; 0000 01C2 
                 ; 0000 01C3         if (temp_month == 0)
000358 3000      	CPI  R16,0
000359 f409      	BRNE _0x84
                 ; 0000 01C4           temp_month = 12;
00035a e00c      	LDI  R16,LOW(12)
                 ; 0000 01C5 
                 ; 0000 01C6         if (temp_month > 12)
                 _0x84:
00035b 300d      	CPI  R16,13
00035c f008      	BRLO _0x85
                 ; 0000 01C7           temp_month = 1;
00035d e001      	LDI  R16,LOW(1)
                 ; 0000 01C8 
                 ; 0000 01C9         if (temp_month <= 6)
                 _0x85:
00035e 3007      	CPI  R16,7
00035f f408      	BRSH _0x86
                 ; 0000 01CA           temp_day = 31;
000360 e13f      	LDI  R19,LOW(31)
                 ; 0000 01CB 
                 ; 0000 01CC         if (temp_month > 6)
                 _0x86:
000361 3007      	CPI  R16,7
000362 f008      	BRLO _0x87
                 ; 0000 01CD           temp_day = 30;
000363 e13e      	LDI  R19,LOW(30)
                 ; 0000 01CE 
                 ; 0000 01CF         if (temp_month == 12)
                 _0x87:
000364 300c      	CPI  R16,12
000365 f409      	BRNE _0x88
                 ; 0000 01D0           temp_day = 29;
000366 e13d      	LDI  R19,LOW(29)
                 ; 0000 01D1 
                 ; 0000 01D2         bit_m = 1;
                 _0x88:
000367 9468      	SET
000368 f8f0      	BLD  R15,0
                 ; 0000 01D3       }
                 ; 0000 01D4 
                 ; 0000 01D5       if (temp_day < day_index & bit_m == 1)
                 _0x83:
000369 940e 0785 	CALL SUBOPT_0xB
00036b 2fa3      	MOV  R26,R19
00036c 940e 08a9 	CALL __LTB12U
00036e 2e0e      	MOV  R0,R30
00036f e0a0      	LDI  R26,0
000370 fcf0      	SBRC R15,0
000371 e0a1      	LDI  R26,1
000372 940e 07d3 	CALL SUBOPT_0x17
000374 f031      	BREQ _0x89
                 ; 0000 01D6       {
                 ; 0000 01D7         temp_day = day_index;
000375 940e 0785 	CALL SUBOPT_0xB
000377 2f3e      	MOV  R19,R30
                 ; 0000 01D8         temp_month++;
000378 5f0f      	SUBI R16,-1
                 ; 0000 01D9         bit_m = 0;
000379 94e8      	CLT
00037a f8f0      	BLD  R15,0
                 ; 0000 01DA       }
                 ; 0000 01DB 
                 ; 0000 01DC       if (temp_month == 0)
                 _0x89:
00037b 3000      	CPI  R16,0
00037c f409      	BRNE _0x8A
                 ; 0000 01DD         temp_month = 12;
00037d e00c      	LDI  R16,LOW(12)
                 ; 0000 01DE 
                 ; 0000 01DF       if (temp_month > 12)
                 _0x8A:
00037e 300d      	CPI  R16,13
00037f f008      	BRLO _0x8B
                 ; 0000 01E0         temp_month = 1;
000380 e001      	LDI  R16,LOW(1)
                 ; 0000 01E1     }
                 _0x8B:
                 ; 0000 01E2 
                 ; 0000 01E3     sprintf(line, "%d/%d/%d ", temp_year, temp_month, temp_day);
                 _0x7F:
000381 01fe      	MOVW R30,R28
000382 9675      	ADIW R30,21
000383 93fa      	ST   -Y,R31
000384 93ea      	ST   -Y,R30
                +
000385 e0eb     +LDI R30 , LOW ( 2 * _0x0 + ( 143 ) )
000386 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 143 ) )
                 	__POINTW1FN _0x0,143
000387 93fa      	ST   -Y,R31
000388 93ea      	ST   -Y,R30
000389 2fe1      	MOV  R30,R17
00038a 940e 0817 	CALL SUBOPT_0x21
00038c 2fe0      	MOV  R30,R16
00038d 940e 0817 	CALL SUBOPT_0x21
00038f 2fe3      	MOV  R30,R19
000390 940e 0817 	CALL SUBOPT_0x21
000392 e08c      	LDI  R24,12
000393 940e 0615 	CALL _sprintf
000395 9660      	ADIW R28,16
                 ; 0000 01E4     sprintf(line2, "in=%d out=%d", enter_array[temp_day], exit_array[temp_day]);
000396 01fe      	MOVW R30,R28
000397 9634      	ADIW R30,4
000398 93fa      	ST   -Y,R31
000399 93ea      	ST   -Y,R30
                +
00039a e1e5     +LDI R30 , LOW ( 2 * _0x0 + ( 153 ) )
00039b e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 153 ) )
                 	__POINTW1FN _0x0,153
00039c 93fa      	ST   -Y,R31
00039d 93ea      	ST   -Y,R30
00039e 2fe3      	MOV  R30,R19
00039f e0a0      	LDI  R26,LOW(_enter_array)
0003a0 e0b0      	LDI  R27,HIGH(_enter_array)
0003a1 940e 081d 	CALL SUBOPT_0x22
0003a3 2fe3      	MOV  R30,R19
0003a4 e3ae      	LDI  R26,LOW(_exit_array)
0003a5 e0b0      	LDI  R27,HIGH(_exit_array)
0003a6 940e 081d 	CALL SUBOPT_0x22
0003a8 e088      	LDI  R24,8
0003a9 940e 0615 	CALL _sprintf
0003ab 962c      	ADIW R28,12
                 ; 0000 01E5 
                 ; 0000 01E6     lcd_clear();
0003ac 940e 068b 	CALL _lcd_clear
                 ; 0000 01E7     lcd_puts(line);
0003ae 01de      	MOVW R26,R28
0003af 9655      	ADIW R26,21
0003b0 940e 06b9 	CALL _lcd_puts
                 ; 0000 01E8     lcd_gotoxy(0, 1);
0003b2 940e 076d 	CALL SUBOPT_0x9
                 ; 0000 01E9     lcd_puts(line2);
0003b4 01de      	MOVW R26,R28
0003b5 9614      	ADIW R26,4
0003b6 940e 06b9 	CALL _lcd_puts
                 ; 0000 01EA 
                 ; 0000 01EB     // Back
                 ; 0000 01EC     if (PINA .4 == 0)
0003b8 99cc      	SBIC 0x19,4
0003b9 c004      	RJMP _0x8C
                 ; 0000 01ED     {
                 ; 0000 01EE       while (PINA .4 == 0)
                 _0x8D:
0003ba 9bcc      	SBIS 0x19,4
                 ; 0000 01EF         ;
0003bb cffe      	RJMP _0x8D
                 ; 0000 01F0       return 0;
0003bc e0e0      	LDI  R30,LOW(0)
0003bd c003      	RJMP _0x2080006
                 ; 0000 01F1     }
                 ; 0000 01F2     delay_ms(25);
                 _0x8C:
0003be 940e 07c1 	CALL SUBOPT_0x14
                 ; 0000 01F3   }
0003c0 cf4d      	RJMP _0x72
                 ; 0000 01F4 }
                 _0x2080006:
0003c1 940e 08f8 	CALL __LOADLOCR4
0003c3 96a6      	ADIW R28,38
0003c4 90ff      	POP  R15
0003c5 9508      	RET
                 ; .FEND
                 ;
                 ;// reserve_park
                 ;char reserve_park(void)
                 ; 0000 01F8 {
                 _reserve_park:
                 ; .FSTART _reserve_park
                 ; 0000 01F9   char line[17];
                 ; 0000 01FA 
                 ; 0000 01FB   while (1)
0003c6 9761      	SBIW R28,17
                 ;	line -> Y+0
                 _0x90:
                 ; 0000 01FC   {
                 ; 0000 01FD     sprintf(line, "Reserved=%d", reserved);
0003c7 940e 07aa 	CALL SUBOPT_0x10
                +
0003c9 e2e2     +LDI R30 , LOW ( 2 * _0x0 + ( 166 ) )
0003ca e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 166 ) )
                 	__POINTW1FN _0x0,166
0003cb 93fa      	ST   -Y,R31
0003cc 93ea      	ST   -Y,R30
0003cd 2de8      	MOV  R30,R8
0003ce 940e 078a 	CALL SUBOPT_0xC
0003d0 940e 07dd 	CALL SUBOPT_0x19
                 ; 0000 01FE     lcd_clear();
                 ; 0000 01FF     lcd_puts(line);
                 ; 0000 0200 
                 ; 0000 0201     if (PINA .1 == 0)
0003d2 99c9      	SBIC 0x19,1
0003d3 c004      	RJMP _0x93
                 ; 0000 0202     {
                 ; 0000 0203       while (PINA .1 == 0)
                 _0x94:
0003d4 9bc9      	SBIS 0x19,1
                 ; 0000 0204         ;
0003d5 cffe      	RJMP _0x94
                 ; 0000 0205       reserved++;
0003d6 9483      	INC  R8
                 ; 0000 0206       capacity--;
0003d7 949a      	DEC  R9
                 ; 0000 0207     }
                 ; 0000 0208 
                 ; 0000 0209     if (reserved >= init_capacity)
                 _0x93:
0003d8 2da8      	MOV  R26,R8
0003d9 e0ea      	LDI  R30,LOW(10)
0003da e0b0      	LDI  R27,0
0003db fda7      	SBRC R26,7
0003dc efbf      	SER  R27
0003dd e0f0      	LDI  R31,0
0003de 17ae      	CP   R26,R30
0003df 07bf      	CPC  R27,R31
0003e0 f014      	BRLT _0x97
                 ; 0000 020A     {
                 ; 0000 020B       reserved = init_capacity - 1;
0003e1 e0e9      	LDI  R30,LOW(9)
0003e2 2e8e      	MOV  R8,R30
                 ; 0000 020C     }
                 ; 0000 020D 
                 ; 0000 020E     if (PINA .0 == 0)
                 _0x97:
0003e3 99c8      	SBIC 0x19,0
0003e4 c004      	RJMP _0x98
                 ; 0000 020F     {
                 ; 0000 0210       while (PINA .0 == 0)
                 _0x99:
0003e5 9bc8      	SBIS 0x19,0
                 ; 0000 0211         ;
0003e6 cffe      	RJMP _0x99
                 ; 0000 0212       reserved--;
0003e7 948a      	DEC  R8
                 ; 0000 0213       capacity++;
0003e8 9493      	INC  R9
                 ; 0000 0214     }
                 ; 0000 0215 
                 ; 0000 0216     if (reserved <= 0)
                 _0x98:
0003e9 e0e0      	LDI  R30,LOW(0)
0003ea 15e8      	CP   R30,R8
0003eb f00c      	BRLT _0x9C
                 ; 0000 0217     {
                 ; 0000 0218       reserved = 0;
0003ec 2488      	CLR  R8
                 ; 0000 0219     }
                 ; 0000 021A 
                 ; 0000 021B     if (PINA .4 == 0)
                 _0x9C:
0003ed 99cc      	SBIC 0x19,4
0003ee c004      	RJMP _0x9D
                 ; 0000 021C     { // Back
                 ; 0000 021D       while (PINA .4 == 0)
                 _0x9E:
0003ef 9bcc      	SBIS 0x19,4
                 ; 0000 021E         ;
0003f0 cffe      	RJMP _0x9E
                 ; 0000 021F       return 0;
0003f1 e0e0      	LDI  R30,LOW(0)
0003f2 c003      	RJMP _0x2080005
                 ; 0000 0220     }
                 ; 0000 0221     delay_ms(25);
                 _0x9D:
0003f3 940e 07c1 	CALL SUBOPT_0x14
                 ; 0000 0222   }
0003f5 cfd1      	RJMP _0x90
                 ; 0000 0223 }
                 _0x2080005:
0003f6 9661      	ADIW R28,17
0003f7 9508      	RET
                 ; .FEND
                 ;
                 ;//// data setting
                 ;char set_date(void)
                 ; 0000 0227 {
                 _set_date:
                 ; .FSTART _set_date
                 ; 0000 0228   char choice = 0;
                 ; 0000 0229   char line[17];
                 ; 0000 022A   while (1)
0003f8 9761      	SBIW R28,17
0003f9 931a      	ST   -Y,R17
                 ;	choice -> R17
                 ;	line -> Y+1
0003fa e010      	LDI  R17,0
                 _0xA1:
                 ; 0000 022B   {
                 ; 0000 022C     if (choice == 1)
0003fb 3011      	CPI  R17,1
0003fc f451      	BRNE _0xA4
                 ; 0000 022D     {
                 ; 0000 022E       sprintf(line, "Set month=%d  >", month);
0003fd 940e 0825 	CALL SUBOPT_0x23
                +
0003ff e2ee     +LDI R30 , LOW ( 2 * _0x0 + ( 178 ) )
000400 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 178 ) )
                 	__POINTW1FN _0x0,178
000401 93fa      	ST   -Y,R31
000402 93ea      	ST   -Y,R30
000403 940e 0798 	CALL SUBOPT_0xE
000405 940e 082a 	CALL SUBOPT_0x24
                 ; 0000 022F       lcd_clear();
                 ; 0000 0230       lcd_puts(line);
                 ; 0000 0231     }
                 ; 0000 0232 
                 ; 0000 0233     if (choice == 0)
                 _0xA4:
000407 3010      	CPI  R17,0
000408 f451      	BRNE _0xA5
                 ; 0000 0234     {
                 ; 0000 0235       sprintf(line, "Set day=%d  >", day);
000409 940e 0825 	CALL SUBOPT_0x23
                +
00040b e3ee     +LDI R30 , LOW ( 2 * _0x0 + ( 194 ) )
00040c e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 194 ) )
                 	__POINTW1FN _0x0,194
00040d 93fa      	ST   -Y,R31
00040e 93ea      	ST   -Y,R30
00040f 940e 07a1 	CALL SUBOPT_0xF
000411 940e 082a 	CALL SUBOPT_0x24
                 ; 0000 0236       lcd_clear();
                 ; 0000 0237       lcd_puts(line);
                 ; 0000 0238     }
                 ; 0000 0239 
                 ; 0000 023A     if (choice == 2)
                 _0xA5:
000413 3012      	CPI  R17,2
000414 f451      	BRNE _0xA6
                 ; 0000 023B     {
                 ; 0000 023C       sprintf(line, "Set year=%d  >", year);
000415 940e 0825 	CALL SUBOPT_0x23
                +
000417 e4ec     +LDI R30 , LOW ( 2 * _0x0 + ( 208 ) )
000418 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 208 ) )
                 	__POINTW1FN _0x0,208
000419 93fa      	ST   -Y,R31
00041a 93ea      	ST   -Y,R30
00041b 940e 078f 	CALL SUBOPT_0xD
00041d 940e 082a 	CALL SUBOPT_0x24
                 ; 0000 023D       lcd_clear();
                 ; 0000 023E       lcd_puts(line);
                 ; 0000 023F     }
                 ; 0000 0240 
                 ; 0000 0241     if (PINA .1 == 0 & choice == 1)
                 _0xA6:
00041f 940e 0834 	CALL SUBOPT_0x25
000421 940e 07d3 	CALL SUBOPT_0x17
000423 f061      	BREQ _0xA7
                 ; 0000 0242     { // UP     month
                 ; 0000 0243       while (PINA .1 == 0)
                 _0xA8:
000424 9bc9      	SBIS 0x19,1
                 ; 0000 0244         ;
000425 cffe      	RJMP _0xA8
                 ; 0000 0245       month++;
000426 e6a4      	LDI  R26,LOW(_month)
000427 e0b2      	LDI  R27,HIGH(_month)
000428 940e 07fa 	CALL SUBOPT_0x1C
                 ; 0000 0246       if (month > 12)
00042a 940e 0729 	CALL SUBOPT_0x1
00042c 971d      	SBIW R26,13
00042d f010      	BRLO _0xAB
                 ; 0000 0247         month = 1;
00042e 940e 0741 	CALL SUBOPT_0x4
                 ; 0000 0248     }
                 _0xAB:
                 ; 0000 0249 
                 ; 0000 024A     if (PINA .0 == 0 & choice == 1)
                 _0xA7:
000430 940e 083d 	CALL SUBOPT_0x26
000432 940e 07d3 	CALL SUBOPT_0x17
000434 f081      	BREQ _0xAC
                 ; 0000 024B     { // DOWN    month
                 ; 0000 024C       while (PINA .0 == 0)
                 _0xAD:
000435 9bc8      	SBIS 0x19,0
                 ; 0000 024D         ;
000436 cffe      	RJMP _0xAD
                 ; 0000 024E       month--;
000437 e6a4      	LDI  R26,LOW(_month)
000438 e0b2      	LDI  R27,HIGH(_month)
000439 940e 0800 	CALL SUBOPT_0x1D
                 ; 0000 024F       if (month < 1)
00043b 940e 0729 	CALL SUBOPT_0x1
00043d 9711      	SBIW R26,1
00043e f430      	BRSH _0xB0
                 ; 0000 0250         month = 12;
00043f e0ec      	LDI  R30,LOW(12)
000440 e0f0      	LDI  R31,HIGH(12)
000441 93e0 0264 	STS  _month,R30
000443 93f0 0265 	STS  _month+1,R31
                 ; 0000 0251     }
                 _0xB0:
                 ; 0000 0252 
                 ; 0000 0253     if (PINA .1 == 0 & choice == 0)
                 _0xAC:
000445 940e 0834 	CALL SUBOPT_0x25
000447 940e 07ce 	CALL SUBOPT_0x16
000449 f081      	BREQ _0xB1
                 ; 0000 0254     { // UP    day
                 ; 0000 0255       while (PINA .1 == 0)
                 _0xB2:
00044a 9bc9      	SBIS 0x19,1
                 ; 0000 0256         ;
00044b cffe      	RJMP _0xB2
                 ; 0000 0257       day++;
00044c e6a2      	LDI  R26,LOW(_day)
00044d e0b2      	LDI  R27,HIGH(_day)
00044e 940e 07fa 	CALL SUBOPT_0x1C
                 ; 0000 0258       day_index = day;
000450 940e 0846 	CALL SUBOPT_0x27
                 ; 0000 0259       if (day > 31)
000452 9790      	SBIW R26,32
000453 f030      	BRLO _0xB5
                 ; 0000 025A         day = 1;
000454 e0e1      	LDI  R30,LOW(1)
000455 e0f0      	LDI  R31,HIGH(1)
000456 93e0 0262 	STS  _day,R30
000458 93f0 0263 	STS  _day+1,R31
                 ; 0000 025B     }
                 _0xB5:
                 ; 0000 025C 
                 ; 0000 025D     if (PINA .0 == 0 & choice == 0)
                 _0xB1:
00045a 940e 083d 	CALL SUBOPT_0x26
00045c 940e 07ce 	CALL SUBOPT_0x16
00045e f081      	BREQ _0xB6
                 ; 0000 025E     { // DOWN    day
                 ; 0000 025F       while (PINA .0 == 0)
                 _0xB7:
00045f 9bc8      	SBIS 0x19,0
                 ; 0000 0260         ;
000460 cffe      	RJMP _0xB7
                 ; 0000 0261       day--;
000461 e6a2      	LDI  R26,LOW(_day)
000462 e0b2      	LDI  R27,HIGH(_day)
000463 940e 0800 	CALL SUBOPT_0x1D
                 ; 0000 0262       day_index = day;
000465 940e 0846 	CALL SUBOPT_0x27
                 ; 0000 0263       if (day < 1)
000467 9711      	SBIW R26,1
000468 f430      	BRSH _0xBA
                 ; 0000 0264         day = 31;
000469 e1ef      	LDI  R30,LOW(31)
00046a e0f0      	LDI  R31,HIGH(31)
00046b 93e0 0262 	STS  _day,R30
00046d 93f0 0263 	STS  _day+1,R31
                 ; 0000 0265     }
                 _0xBA:
                 ; 0000 0266 
                 ; 0000 0267     if (PINA .0 == 0 & choice == 2)
                 _0xB6:
00046f 940e 083d 	CALL SUBOPT_0x26
000471 940e 07d8 	CALL SUBOPT_0x18
000473 f099      	BREQ _0xBB
                 ; 0000 0268     { // DOWN    year
                 ; 0000 0269       while (PINA .0 == 0)
                 _0xBC:
000474 9bc8      	SBIS 0x19,0
                 ; 0000 026A         ;
000475 cffe      	RJMP _0xBC
                 ; 0000 026B       year--;
000476 940e 0748 	CALL SUBOPT_0x5
000478 9731      	SBIW R30,1
000479 93fe      	ST   -X,R31
00047a 93ee      	ST   -X,R30
                 ; 0000 026C       if (year < 1)
00047b 91a0 0266 	LDS  R26,_year
00047d 91b0 0267 	LDS  R27,_year+1
00047f 9711      	SBIW R26,1
000480 f430      	BRSH _0xBF
                 ; 0000 026D         year = 1300;
000481 e1e4      	LDI  R30,LOW(1300)
000482 e0f5      	LDI  R31,HIGH(1300)
000483 93e0 0266 	STS  _year,R30
000485 93f0 0267 	STS  _year+1,R31
                 ; 0000 026E     }
                 _0xBF:
                 ; 0000 026F 
                 ; 0000 0270     if (PINA .1 == 0 & choice == 2)
                 _0xBB:
000487 940e 0834 	CALL SUBOPT_0x25
000489 940e 07d8 	CALL SUBOPT_0x18
00048b f039      	BREQ _0xC0
                 ; 0000 0271     { // UP    year
                 ; 0000 0272       while (PINA .1 == 0)
                 _0xC1:
00048c 9bc9      	SBIS 0x19,1
                 ; 0000 0273         ;
00048d cffe      	RJMP _0xC1
                 ; 0000 0274       year++;
00048e 940e 0748 	CALL SUBOPT_0x5
000490 9631      	ADIW R30,1
000491 93fe      	ST   -X,R31
000492 93ee      	ST   -X,R30
                 ; 0000 0275       // if(year>1404)
                 ; 0000 0276       // year=0;
                 ; 0000 0277     }
                 ; 0000 0278 
                 ; 0000 0279     if (PINA .3 == 0)
                 _0xC0:
000493 99cb      	SBIC 0x19,3
000494 c006      	RJMP _0xC4
                 ; 0000 027A     { // NEXT
                 ; 0000 027B       while (PINA .3 == 0)
                 _0xC5:
000495 9bcb      	SBIS 0x19,3
                 ; 0000 027C         ;
000496 cffe      	RJMP _0xC5
                 ; 0000 027D       choice++;
000497 5f1f      	SUBI R17,-1
                 ; 0000 027E       if (choice >= 3)
000498 3013      	CPI  R17,3
000499 f008      	BRLO _0xC8
                 ; 0000 027F         choice = 0;
00049a e010      	LDI  R17,LOW(0)
                 ; 0000 0280     }
                 _0xC8:
                 ; 0000 0281 
                 ; 0000 0282     if (PINA .4 == 0)
                 _0xC4:
00049b 99cc      	SBIC 0x19,4
00049c c004      	RJMP _0xC9
                 ; 0000 0283     { // Back
                 ; 0000 0284       while (PINA .4 == 0)
                 _0xCA:
00049d 9bcc      	SBIS 0x19,4
                 ; 0000 0285         ;
00049e cffe      	RJMP _0xCA
                 ; 0000 0286       return 0;
00049f e0e0      	LDI  R30,LOW(0)
0004a0 c003      	RJMP _0x2080004
                 ; 0000 0287     }
                 ; 0000 0288 
                 ; 0000 0289     delay_ms(25);
                 _0xC9:
0004a1 940e 07c1 	CALL SUBOPT_0x14
                 ; 0000 028A   }
0004a3 cf57      	RJMP _0xA1
                 ; 0000 028B }
                 _0x2080004:
0004a4 8118      	LDD  R17,Y+0
0004a5 9662      	ADIW R28,18
0004a6 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G100:
                 ; .FSTART _put_buff_G100
0004a7 93ba      	ST   -Y,R27
0004a8 93aa      	ST   -Y,R26
0004a9 931a      	ST   -Y,R17
0004aa 930a      	ST   -Y,R16
0004ab 81aa      	LDD  R26,Y+2
0004ac 81bb      	LDD  R27,Y+2+1
0004ad 9612      	ADIW R26,2
0004ae 940e 08b9 	CALL __GETW1P
0004b0 9730      	SBIW R30,0
0004b1 f129      	BREQ _0x2000010
0004b2 81aa      	LDD  R26,Y+2
0004b3 81bb      	LDD  R27,Y+2+1
0004b4 9614      	ADIW R26,4
0004b5 940e 08b9 	CALL __GETW1P
0004b7 018f      	MOVW R16,R30
0004b8 9730      	SBIW R30,0
0004b9 f061      	BREQ _0x2000012
                +
0004ba 3002     +CPI R16 , LOW ( 2 )
0004bb e0e0     +LDI R30 , HIGH ( 2 )
0004bc 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
0004bd f080      	BRLO _0x2000013
0004be 01f8      	MOVW R30,R16
0004bf 9731      	SBIW R30,1
0004c0 018f      	MOVW R16,R30
                +
0004c1 81aa     +LDD R26 , Y + 2
0004c2 81bb     +LDD R27 , Y + 2 + 1
0004c3 9614     +ADIW R26 , 4
0004c4 93ed     +ST X + , R30
0004c5 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2000012:
0004c6 81aa      	LDD  R26,Y+2
0004c7 81bb      	LDD  R27,Y+2+1
0004c8 9612      	ADIW R26,2
0004c9 940e 07fa 	CALL SUBOPT_0x1C
0004cb 9731      	SBIW R30,1
0004cc 81ac      	LDD  R26,Y+4
0004cd 83a0      	STD  Z+0,R26
                 _0x2000013:
0004ce 81aa      	LDD  R26,Y+2
0004cf 81bb      	LDD  R27,Y+2+1
0004d0 940e 08b9 	CALL __GETW1P
0004d2 23ff      	TST  R31
0004d3 f012      	BRMI _0x2000014
0004d4 940e 07fa 	CALL SUBOPT_0x1C
                 _0x2000014:
0004d6 c006      	RJMP _0x2000015
                 _0x2000010:
0004d7 81aa      	LDD  R26,Y+2
0004d8 81bb      	LDD  R27,Y+2+1
0004d9 efef      	LDI  R30,LOW(65535)
0004da efff      	LDI  R31,HIGH(65535)
0004db 93ed      	ST   X+,R30
0004dc 93fc      	ST   X,R31
                 _0x2000015:
0004dd 8119      	LDD  R17,Y+1
0004de 8108      	LDD  R16,Y+0
0004df 9625      	ADIW R28,5
0004e0 9508      	RET
                 ; .FEND
                 __print_G100:
                 ; .FSTART __print_G100
0004e1 93ba      	ST   -Y,R27
0004e2 93aa      	ST   -Y,R26
0004e3 9726      	SBIW R28,6
0004e4 940e 08ef 	CALL __SAVELOCR6
0004e6 e010      	LDI  R17,0
0004e7 85ac      	LDD  R26,Y+12
0004e8 85bd      	LDD  R27,Y+12+1
0004e9 e0e0      	LDI  R30,LOW(0)
0004ea e0f0      	LDI  R31,HIGH(0)
0004eb 93ed      	ST   X+,R30
0004ec 93fc      	ST   X,R31
                 _0x2000016:
0004ed 89ea      	LDD  R30,Y+18
0004ee 89fb      	LDD  R31,Y+18+1
0004ef 9631      	ADIW R30,1
0004f0 8bea      	STD  Y+18,R30
0004f1 8bfb      	STD  Y+18+1,R31
0004f2 9731      	SBIW R30,1
0004f3 91e4      	LPM  R30,Z
0004f4 2f2e      	MOV  R18,R30
0004f5 30e0      	CPI  R30,0
0004f6 f409      	BRNE PC+2
0004f7 c115      	RJMP _0x2000018
0004f8 2fe1      	MOV  R30,R17
0004f9 30e0      	CPI  R30,0
0004fa f439      	BRNE _0x200001C
0004fb 3225      	CPI  R18,37
0004fc f411      	BRNE _0x200001D
0004fd e011      	LDI  R17,LOW(1)
0004fe c002      	RJMP _0x200001E
                 _0x200001D:
0004ff 940e 084d 	CALL SUBOPT_0x28
                 _0x200001E:
000501 c10a      	RJMP _0x200001B
                 _0x200001C:
000502 30e1      	CPI  R30,LOW(0x1)
000503 f4a9      	BRNE _0x200001F
000504 3225      	CPI  R18,37
000505 f419      	BRNE _0x2000020
000506 940e 084d 	CALL SUBOPT_0x28
000508 c102      	RJMP _0x20000CC
                 _0x2000020:
000509 e012      	LDI  R17,LOW(2)
00050a e040      	LDI  R20,LOW(0)
00050b e000      	LDI  R16,LOW(0)
00050c 322d      	CPI  R18,45
00050d f411      	BRNE _0x2000021
00050e e001      	LDI  R16,LOW(1)
00050f c0fc      	RJMP _0x200001B
                 _0x2000021:
000510 322b      	CPI  R18,43
000511 f411      	BRNE _0x2000022
000512 e24b      	LDI  R20,LOW(43)
000513 c0f8      	RJMP _0x200001B
                 _0x2000022:
000514 3220      	CPI  R18,32
000515 f411      	BRNE _0x2000023
000516 e240      	LDI  R20,LOW(32)
000517 c0f4      	RJMP _0x200001B
                 _0x2000023:
000518 c002      	RJMP _0x2000024
                 _0x200001F:
000519 30e2      	CPI  R30,LOW(0x2)
00051a f439      	BRNE _0x2000025
                 _0x2000024:
00051b e050      	LDI  R21,LOW(0)
00051c e013      	LDI  R17,LOW(3)
00051d 3320      	CPI  R18,48
00051e f411      	BRNE _0x2000026
00051f 6800      	ORI  R16,LOW(128)
000520 c0eb      	RJMP _0x200001B
                 _0x2000026:
000521 c003      	RJMP _0x2000027
                 _0x2000025:
000522 30e3      	CPI  R30,LOW(0x3)
000523 f009      	BREQ PC+2
000524 c0e7      	RJMP _0x200001B
                 _0x2000027:
000525 3320      	CPI  R18,48
000526 f010      	BRLO _0x200002A
000527 332a      	CPI  R18,58
000528 f008      	BRLO _0x200002B
                 _0x200002A:
000529 c007      	RJMP _0x2000029
                 _0x200002B:
00052a e0aa      	LDI  R26,LOW(10)
00052b 9f5a      	MUL  R21,R26
00052c 2d50      	MOV  R21,R0
00052d 2fe2      	MOV  R30,R18
00052e 53e0      	SUBI R30,LOW(48)
00052f 0f5e      	ADD  R21,R30
000530 c0db      	RJMP _0x200001B
                 _0x2000029:
000531 2fe2      	MOV  R30,R18
000532 36e3      	CPI  R30,LOW(0x63)
000533 f449      	BRNE _0x200002F
000534 940e 0854 	CALL SUBOPT_0x29
000536 89e8      	LDD  R30,Y+16
000537 89f9      	LDD  R31,Y+16+1
000538 81a4      	LDD  R26,Z+4
000539 93aa      	ST   -Y,R26
00053a 940e 085a 	CALL SUBOPT_0x2A
00053c c0ce      	RJMP _0x2000030
                 _0x200002F:
00053d 37e3      	CPI  R30,LOW(0x73)
00053e f441      	BRNE _0x2000032
00053f 940e 0854 	CALL SUBOPT_0x29
000541 940e 0860 	CALL SUBOPT_0x2B
000543 940e 070b 	CALL _strlen
000545 2f1e      	MOV  R17,R30
000546 c00a      	RJMP _0x2000033
                 _0x2000032:
000547 37e0      	CPI  R30,LOW(0x70)
000548 f461      	BRNE _0x2000035
000549 940e 0854 	CALL SUBOPT_0x29
00054b 940e 0860 	CALL SUBOPT_0x2B
00054d 940e 0717 	CALL _strlenf
00054f 2f1e      	MOV  R17,R30
000550 6008      	ORI  R16,LOW(8)
                 _0x2000033:
000551 6002      	ORI  R16,LOW(2)
000552 770f      	ANDI R16,LOW(127)
000553 e030      	LDI  R19,LOW(0)
000554 c034      	RJMP _0x2000036
                 _0x2000035:
000555 36e4      	CPI  R30,LOW(0x64)
000556 f011      	BREQ _0x2000039
000557 36e9      	CPI  R30,LOW(0x69)
000558 f411      	BRNE _0x200003A
                 _0x2000039:
000559 6004      	ORI  R16,LOW(4)
00055a c002      	RJMP _0x200003B
                 _0x200003A:
00055b 37e5      	CPI  R30,LOW(0x75)
00055c f431      	BRNE _0x200003C
                 _0x200003B:
00055d e5e4      	LDI  R30,LOW(_tbl10_G100*2)
00055e e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
00055f 83ee      	STD  Y+6,R30
000560 83ff      	STD  Y+6+1,R31
000561 e015      	LDI  R17,LOW(5)
000562 c00c      	RJMP _0x200003D
                 _0x200003C:
000563 35e8      	CPI  R30,LOW(0x58)
000564 f411      	BRNE _0x200003F
000565 6008      	ORI  R16,LOW(8)
000566 c003      	RJMP _0x2000040
                 _0x200003F:
000567 37e8      	CPI  R30,LOW(0x78)
000568 f009      	BREQ PC+2
000569 c0a1      	RJMP _0x2000071
                 _0x2000040:
00056a e5ee      	LDI  R30,LOW(_tbl16_G100*2)
00056b e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
00056c 83ee      	STD  Y+6,R30
00056d 83ff      	STD  Y+6+1,R31
00056e e014      	LDI  R17,LOW(4)
                 _0x200003D:
00056f ff02      	SBRS R16,2
000570 c014      	RJMP _0x2000042
000571 940e 0854 	CALL SUBOPT_0x29
000573 940e 086a 	CALL SUBOPT_0x2C
000575 85ab      	LDD  R26,Y+11
000576 23aa      	TST  R26
000577 f43a      	BRPL _0x2000043
000578 85ea      	LDD  R30,Y+10
000579 85fb      	LDD  R31,Y+10+1
00057a 940e 0895 	CALL __ANEGW1
00057c 87ea      	STD  Y+10,R30
00057d 87fb      	STD  Y+10+1,R31
00057e e24d      	LDI  R20,LOW(45)
                 _0x2000043:
00057f 3040      	CPI  R20,0
000580 f011      	BREQ _0x2000044
000581 5f1f      	SUBI R17,-LOW(1)
000582 c001      	RJMP _0x2000045
                 _0x2000044:
000583 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
000584 c004      	RJMP _0x2000046
                 _0x2000042:
000585 940e 0854 	CALL SUBOPT_0x29
000587 940e 086a 	CALL SUBOPT_0x2C
                 _0x2000046:
                 _0x2000036:
000589 fd00      	SBRC R16,0
00058a c011      	RJMP _0x2000047
                 _0x2000048:
00058b 1715      	CP   R17,R21
00058c f478      	BRSH _0x200004A
00058d ff07      	SBRS R16,7
00058e c008      	RJMP _0x200004B
00058f ff02      	SBRS R16,2
000590 c004      	RJMP _0x200004C
000591 7f0b      	ANDI R16,LOW(251)
000592 2f24      	MOV  R18,R20
000593 5011      	SUBI R17,LOW(1)
000594 c001      	RJMP _0x200004D
                 _0x200004C:
000595 e320      	LDI  R18,LOW(48)
                 _0x200004D:
000596 c001      	RJMP _0x200004E
                 _0x200004B:
000597 e220      	LDI  R18,LOW(32)
                 _0x200004E:
000598 940e 084d 	CALL SUBOPT_0x28
00059a 5051      	SUBI R21,LOW(1)
00059b cfef      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
00059c 2f31      	MOV  R19,R17
00059d ff01      	SBRS R16,1
00059e c017      	RJMP _0x200004F
                 _0x2000050:
00059f 3030      	CPI  R19,0
0005a0 f0a1      	BREQ _0x2000052
0005a1 ff03      	SBRS R16,3
0005a2 c006      	RJMP _0x2000053
0005a3 81ee      	LDD  R30,Y+6
0005a4 81ff      	LDD  R31,Y+6+1
0005a5 9125      	LPM  R18,Z+
0005a6 83ee      	STD  Y+6,R30
0005a7 83ff      	STD  Y+6+1,R31
0005a8 c005      	RJMP _0x2000054
                 _0x2000053:
0005a9 81ae      	LDD  R26,Y+6
0005aa 81bf      	LDD  R27,Y+6+1
0005ab 912d      	LD   R18,X+
0005ac 83ae      	STD  Y+6,R26
0005ad 83bf      	STD  Y+6+1,R27
                 _0x2000054:
0005ae 940e 084d 	CALL SUBOPT_0x28
0005b0 3050      	CPI  R21,0
0005b1 f009      	BREQ _0x2000055
0005b2 5051      	SUBI R21,LOW(1)
                 _0x2000055:
0005b3 5031      	SUBI R19,LOW(1)
0005b4 cfea      	RJMP _0x2000050
                 _0x2000052:
0005b5 c04b      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
0005b6 e320      	LDI  R18,LOW(48)
0005b7 81ee      	LDD  R30,Y+6
0005b8 81ff      	LDD  R31,Y+6+1
0005b9 940e 08bd 	CALL __GETW1PF
0005bb 87e8      	STD  Y+8,R30
0005bc 87f9      	STD  Y+8+1,R31
0005bd 81ee      	LDD  R30,Y+6
0005be 81ff      	LDD  R31,Y+6+1
0005bf 9632      	ADIW R30,2
0005c0 83ee      	STD  Y+6,R30
0005c1 83ff      	STD  Y+6+1,R31
                 _0x200005A:
0005c2 85e8      	LDD  R30,Y+8
0005c3 85f9      	LDD  R31,Y+8+1
0005c4 85aa      	LDD  R26,Y+10
0005c5 85bb      	LDD  R27,Y+10+1
0005c6 17ae      	CP   R26,R30
0005c7 07bf      	CPC  R27,R31
0005c8 f050      	BRLO _0x200005C
0005c9 5f2f      	SUBI R18,-LOW(1)
0005ca 85a8      	LDD  R26,Y+8
0005cb 85b9      	LDD  R27,Y+8+1
0005cc 85ea      	LDD  R30,Y+10
0005cd 85fb      	LDD  R31,Y+10+1
0005ce 1bea      	SUB  R30,R26
0005cf 0bfb      	SBC  R31,R27
0005d0 87ea      	STD  Y+10,R30
0005d1 87fb      	STD  Y+10+1,R31
0005d2 cfef      	RJMP _0x200005A
                 _0x200005C:
0005d3 332a      	CPI  R18,58
0005d4 f028      	BRLO _0x200005D
0005d5 ff03      	SBRS R16,3
0005d6 c002      	RJMP _0x200005E
0005d7 5f29      	SUBI R18,-LOW(7)
0005d8 c001      	RJMP _0x200005F
                 _0x200005E:
0005d9 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
0005da fd04      	SBRC R16,4
0005db c01a      	RJMP _0x2000061
0005dc 3321      	CPI  R18,49
0005dd f420      	BRSH _0x2000063
0005de 85a8      	LDD  R26,Y+8
0005df 85b9      	LDD  R27,Y+8+1
0005e0 9711      	SBIW R26,1
0005e1 f409      	BRNE _0x2000062
                 _0x2000063:
0005e2 c009      	RJMP _0x20000CD
                 _0x2000062:
0005e3 1753      	CP   R21,R19
0005e4 f010      	BRLO _0x2000067
0005e5 ff00      	SBRS R16,0
0005e6 c001      	RJMP _0x2000068
                 _0x2000067:
0005e7 c013      	RJMP _0x2000066
                 _0x2000068:
0005e8 e220      	LDI  R18,LOW(32)
0005e9 ff07      	SBRS R16,7
0005ea c00b      	RJMP _0x2000069
0005eb e320      	LDI  R18,LOW(48)
                 _0x20000CD:
0005ec 6100      	ORI  R16,LOW(16)
0005ed ff02      	SBRS R16,2
0005ee c007      	RJMP _0x200006A
0005ef 7f0b      	ANDI R16,LOW(251)
0005f0 934a      	ST   -Y,R20
0005f1 940e 085a 	CALL SUBOPT_0x2A
0005f3 3050      	CPI  R21,0
0005f4 f009      	BREQ _0x200006B
0005f5 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
0005f6 940e 084d 	CALL SUBOPT_0x28
0005f8 3050      	CPI  R21,0
0005f9 f009      	BREQ _0x200006C
0005fa 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
0005fb 5031      	SUBI R19,LOW(1)
0005fc 85a8      	LDD  R26,Y+8
0005fd 85b9      	LDD  R27,Y+8+1
0005fe 9712      	SBIW R26,2
0005ff f008      	BRLO _0x2000059
000600 cfb5      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
000601 ff00      	SBRS R16,0
000602 c008      	RJMP _0x200006D
                 _0x200006E:
000603 3050      	CPI  R21,0
000604 f031      	BREQ _0x2000070
000605 5051      	SUBI R21,LOW(1)
000606 e2e0      	LDI  R30,LOW(32)
000607 93ea      	ST   -Y,R30
000608 940e 085a 	CALL SUBOPT_0x2A
00060a cff8      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000CC:
00060b e010      	LDI  R17,LOW(0)
                 _0x200001B:
00060c cee0      	RJMP _0x2000016
                 _0x2000018:
00060d 85ac      	LDD  R26,Y+12
00060e 85bd      	LDD  R27,Y+12+1
00060f 940e 08b9 	CALL __GETW1P
000611 940e 08f6 	CALL __LOADLOCR6
000613 9664      	ADIW R28,20
000614 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
000615 92ff      	PUSH R15
000616 2ef8      	MOV  R15,R24
000617 9726      	SBIW R28,6
000618 940e 08f1 	CALL __SAVELOCR4
00061a 940e 0872 	CALL SUBOPT_0x2D
00061c 9730      	SBIW R30,0
00061d f419      	BRNE _0x2000072
00061e efef      	LDI  R30,LOW(65535)
00061f efff      	LDI  R31,HIGH(65535)
000620 c023      	RJMP _0x2080003
                 _0x2000072:
000621 01de      	MOVW R26,R28
000622 9616      	ADIW R26,6
000623 940e 0891 	CALL __ADDW2R15
000625 018d      	MOVW R16,R26
000626 940e 0872 	CALL SUBOPT_0x2D
000628 83ee      	STD  Y+6,R30
000629 83ff      	STD  Y+6+1,R31
00062a e0e0      	LDI  R30,LOW(0)
00062b 87e8      	STD  Y+8,R30
00062c 87e9      	STD  Y+8+1,R30
00062d 01de      	MOVW R26,R28
00062e 961a      	ADIW R26,10
00062f 940e 0891 	CALL __ADDW2R15
000631 940e 08b9 	CALL __GETW1P
000633 93fa      	ST   -Y,R31
000634 93ea      	ST   -Y,R30
000635 931a      	ST   -Y,R17
000636 930a      	ST   -Y,R16
000637 eae7      	LDI  R30,LOW(_put_buff_G100)
000638 e0f4      	LDI  R31,HIGH(_put_buff_G100)
000639 93fa      	ST   -Y,R31
00063a 93ea      	ST   -Y,R30
00063b 01de      	MOVW R26,R28
00063c 961a      	ADIW R26,10
00063d dea3      	RCALL __print_G100
00063e 019f      	MOVW R18,R30
00063f 81ae      	LDD  R26,Y+6
000640 81bf      	LDD  R27,Y+6+1
000641 e0e0      	LDI  R30,LOW(0)
000642 93ec      	ST   X,R30
000643 01f9      	MOVW R30,R18
                 _0x2080003:
000644 940e 08f8 	CALL __LOADLOCR4
000646 962a      	ADIW R28,10
000647 90ff      	POP  R15
000648 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G101:
                 ; .FSTART __lcd_write_nibble_G101
000649 93aa      	ST   -Y,R26
00064a 81e8      	LD   R30,Y
00064b 71e0      	ANDI R30,LOW(0x10)
00064c f011      	BREQ _0x2020004
00064d 9ac3      	SBI  0x18,3
00064e c001      	RJMP _0x2020005
                 _0x2020004:
00064f 98c3      	CBI  0x18,3
                 _0x2020005:
000650 81e8      	LD   R30,Y
000651 72e0      	ANDI R30,LOW(0x20)
000652 f011      	BREQ _0x2020006
000653 9ac4      	SBI  0x18,4
000654 c001      	RJMP _0x2020007
                 _0x2020006:
000655 98c4      	CBI  0x18,4
                 _0x2020007:
000656 81e8      	LD   R30,Y
000657 74e0      	ANDI R30,LOW(0x40)
000658 f011      	BREQ _0x2020008
000659 9ac5      	SBI  0x18,5
00065a c001      	RJMP _0x2020009
                 _0x2020008:
00065b 98c5      	CBI  0x18,5
                 _0x2020009:
00065c 81e8      	LD   R30,Y
00065d 78e0      	ANDI R30,LOW(0x80)
00065e f011      	BREQ _0x202000A
00065f 9ac6      	SBI  0x18,6
000660 c001      	RJMP _0x202000B
                 _0x202000A:
000661 98c6      	CBI  0x18,6
                 _0x202000B:
                +
000662 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000663 958a     +DEC R24
000664 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000665 9ac2      	SBI  0x18,2
                +
000666 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000667 958a     +DEC R24
000668 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000669 98c2      	CBI  0x18,2
                +
00066a e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00066b 958a     +DEC R24
00066c f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00066d c09b      	RJMP _0x2080001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
00066e 93aa      	ST   -Y,R26
00066f 81a8      	LD   R26,Y
000670 dfd8      	RCALL __lcd_write_nibble_G101
000671 81e8          ld    r30,y
000672 95e2          swap  r30
000673 83e8          st    y,r30
000674 81a8      	LD   R26,Y
000675 dfd3      	RCALL __lcd_write_nibble_G101
                +
000676 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
000677 958a     +DEC R24
000678 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
000679 c08f      	RJMP _0x2080001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
00067a 93aa      	ST   -Y,R26
00067b 81e8      	LD   R30,Y
00067c e0f0      	LDI  R31,0
00067d 59e8      	SUBI R30,LOW(-__base_y_G101)
00067e 4ffd      	SBCI R31,HIGH(-__base_y_G101)
00067f 81e0      	LD   R30,Z
000680 81a9      	LDD  R26,Y+1
000681 0fae      	ADD  R26,R30
000682 dfeb      	RCALL __lcd_write_data
000683 81e9      	LDD  R30,Y+1
000684 93e0 026c 	STS  __lcd_x,R30
000686 81e8      	LD   R30,Y
000687 93e0 026d 	STS  __lcd_y,R30
000689 9622      	ADIW R28,2
00068a 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
00068b e0a2      	LDI  R26,LOW(2)
00068c 940e 0879 	CALL SUBOPT_0x2E
00068e e0ac      	LDI  R26,LOW(12)
00068f dfde      	RCALL __lcd_write_data
000690 e0a1      	LDI  R26,LOW(1)
000691 940e 0879 	CALL SUBOPT_0x2E
000693 e0e0      	LDI  R30,LOW(0)
000694 93e0 026d 	STS  __lcd_y,R30
000696 93e0 026c 	STS  __lcd_x,R30
000698 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000699 93aa      	ST   -Y,R26
00069a 81a8      	LD   R26,Y
00069b 30aa      	CPI  R26,LOW(0xA)
00069c f031      	BREQ _0x2020011
00069d 91e0 026e 	LDS  R30,__lcd_maxx
00069f 91a0 026c 	LDS  R26,__lcd_x
0006a1 17ae      	CP   R26,R30
0006a2 f060      	BRLO _0x2020010
                 _0x2020011:
0006a3 e0e0      	LDI  R30,LOW(0)
0006a4 93ea      	ST   -Y,R30
0006a5 91a0 026d 	LDS  R26,__lcd_y
0006a7 5faf      	SUBI R26,-LOW(1)
0006a8 93a0 026d 	STS  __lcd_y,R26
0006aa dfcf      	RCALL _lcd_gotoxy
0006ab 81a8      	LD   R26,Y
0006ac 30aa      	CPI  R26,LOW(0xA)
0006ad f409      	BRNE _0x2020013
0006ae c05a      	RJMP _0x2080001
                 _0x2020013:
                 _0x2020010:
0006af 91e0 026c 	LDS  R30,__lcd_x
0006b1 5fef      	SUBI R30,-LOW(1)
0006b2 93e0 026c 	STS  __lcd_x,R30
0006b4 9ac0      	SBI  0x18,0
0006b5 81a8      	LD   R26,Y
0006b6 dfb7      	RCALL __lcd_write_data
0006b7 98c0      	CBI  0x18,0
0006b8 c050      	RJMP _0x2080001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
0006b9 93ba      	ST   -Y,R27
0006ba 93aa      	ST   -Y,R26
0006bb 931a      	ST   -Y,R17
                 _0x2020014:
0006bc 81a9      	LDD  R26,Y+1
0006bd 81ba      	LDD  R27,Y+1+1
0006be 91ed      	LD   R30,X+
0006bf 83a9      	STD  Y+1,R26
0006c0 83ba      	STD  Y+1+1,R27
0006c1 2f1e      	MOV  R17,R30
0006c2 30e0      	CPI  R30,0
0006c3 f019      	BREQ _0x2020016
0006c4 2fa1      	MOV  R26,R17
0006c5 dfd3      	RCALL _lcd_putchar
0006c6 cff5      	RJMP _0x2020014
                 _0x2020016:
0006c7 c010      	RJMP _0x2080002
                 ; .FEND
                 _lcd_putsf:
                 ; .FSTART _lcd_putsf
0006c8 93ba      	ST   -Y,R27
0006c9 93aa      	ST   -Y,R26
0006ca 931a      	ST   -Y,R17
                 _0x2020017:
0006cb 81e9      	LDD  R30,Y+1
0006cc 81fa      	LDD  R31,Y+1+1
0006cd 9631      	ADIW R30,1
0006ce 83e9      	STD  Y+1,R30
0006cf 83fa      	STD  Y+1+1,R31
0006d0 9731      	SBIW R30,1
0006d1 91e4      	LPM  R30,Z
0006d2 2f1e      	MOV  R17,R30
0006d3 30e0      	CPI  R30,0
0006d4 f019      	BREQ _0x2020019
0006d5 2fa1      	MOV  R26,R17
0006d6 dfc2      	RCALL _lcd_putchar
0006d7 cff3      	RJMP _0x2020017
                 _0x2020019:
                 _0x2080002:
0006d8 8118      	LDD  R17,Y+0
0006d9 9623      	ADIW R28,3
0006da 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
0006db 93aa      	ST   -Y,R26
0006dc 9abb      	SBI  0x17,3
0006dd 9abc      	SBI  0x17,4
0006de 9abd      	SBI  0x17,5
0006df 9abe      	SBI  0x17,6
0006e0 9aba      	SBI  0x17,2
0006e1 9ab8      	SBI  0x17,0
0006e2 9ab9      	SBI  0x17,1
0006e3 98c2      	CBI  0x18,2
0006e4 98c0      	CBI  0x18,0
0006e5 98c1      	CBI  0x18,1
0006e6 81e8      	LD   R30,Y
0006e7 93e0 026e 	STS  __lcd_maxx,R30
0006e9 58e0      	SUBI R30,-LOW(128)
                +
0006ea 93e0 026a+STS __base_y_G101 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G101,2
0006ec 81e8      	LD   R30,Y
0006ed 54e0      	SUBI R30,-LOW(192)
                +
0006ee 93e0 026b+STS __base_y_G101 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G101,3
0006f0 e1a4      	LDI  R26,LOW(20)
0006f1 e0b0      	LDI  R27,0
0006f2 940e 0887 	CALL _delay_ms
0006f4 940e 087f 	CALL SUBOPT_0x2F
0006f6 940e 087f 	CALL SUBOPT_0x2F
0006f8 940e 087f 	CALL SUBOPT_0x2F
0006fa e2a0      	LDI  R26,LOW(32)
0006fb df4d      	RCALL __lcd_write_nibble_G101
                +
0006fc ec88     +LDI R24 , LOW ( 200 )
0006fd e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0006fe 9701     +SBIW R24 , 1
0006ff f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000700 e2a8      	LDI  R26,LOW(40)
000701 df6c      	RCALL __lcd_write_data
000702 e0a4      	LDI  R26,LOW(4)
000703 df6a      	RCALL __lcd_write_data
000704 e8a5      	LDI  R26,LOW(133)
000705 df68      	RCALL __lcd_write_data
000706 e0a6      	LDI  R26,LOW(6)
000707 df66      	RCALL __lcd_write_data
000708 df82      	RCALL _lcd_clear
                 _0x2080001:
000709 9621      	ADIW R28,1
00070a 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
00070b 93ba      	ST   -Y,R27
00070c 93aa      	ST   -Y,R26
00070d 91a9          ld   r26,y+
00070e 91b9          ld   r27,y+
00070f 27ee          clr  r30
000710 27ff          clr  r31
                 strlen0:
000711 916d          ld   r22,x+
000712 2366          tst  r22
000713 f011          breq strlen1
000714 9631          adiw r30,1
000715 cffb          rjmp strlen0
                 strlen1:
000716 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
000717 93ba      	ST   -Y,R27
000718 93aa      	ST   -Y,R26
000719 27aa          clr  r26
00071a 27bb          clr  r27
00071b 91e9          ld   r30,y+
00071c 91f9          ld   r31,y+
                 strlenf0:
00071d 9005      	lpm  r0,z+
00071e 2000          tst  r0
00071f f011          breq strlenf1
000720 9611          adiw r26,1
000721 cffb          rjmp strlenf0
                 strlenf1:
000722 01fd          movw r30,r26
000723 9508          ret
                 ; .FEND
                 
                 	.ESEG
                 _enter_array:
000000 00
000001 00
000002 00
000003 00        	.DB  0x0,0x0,0x0,0x0
000004 00
000005 00
000006 00
000007 00        	.DB  0x0,0x0,0x0,0x0
000008 00
000009 00
00000a 00
00000b 00        	.DB  0x0,0x0,0x0,0x0
00000c 00
00000d 00
00000e 00
00000f 00        	.DB  0x0,0x0,0x0,0x0
000010 00
000011 00
000012 00
000013 00        	.DB  0x0,0x0,0x0,0x0
000014 00
000015 00
000016 00
000017 00        	.DB  0x0,0x0,0x0,0x0
000018 00
000019 00
00001a 00
00001b 00        	.DB  0x0,0x0,0x0,0x0
00001c 00
00001d 00
00001e 00
00001f 00        	.DB  0x0,0x0,0x0,0x0
000020 00
000021 00
000022 00
000023 00        	.DB  0x0,0x0,0x0,0x0
000024 00
000025 00
000026 00
000027 00        	.DB  0x0,0x0,0x0,0x0
000028 00
000029 00
00002a 00
00002b 00        	.DB  0x0,0x0,0x0,0x0
00002c 00
00002d 00
00002e 00
00002f 00        	.DB  0x0,0x0,0x0,0x0
000030 00
000031 00
000032 00
000033 00        	.DB  0x0,0x0,0x0,0x0
000034 00
000035 00
000036 00
000037 00        	.DB  0x0,0x0,0x0,0x0
000038 00
000039 00
00003a 00
00003b 00        	.DB  0x0,0x0,0x0,0x0
00003c 00
00003d 00        	.DB  0x0,0x0
                 _exit_array:
00003e 00
00003f 00
000040 00
000041 00        	.DB  0x0,0x0,0x0,0x0
000042 00
000043 00
000044 00
000045 00        	.DB  0x0,0x0,0x0,0x0
000046 00
000047 00
000048 00
000049 00        	.DB  0x0,0x0,0x0,0x0
00004a 00
00004b 00
00004c 00
00004d 00        	.DB  0x0,0x0,0x0,0x0
00004e 00
00004f 00
000050 00
000051 00        	.DB  0x0,0x0,0x0,0x0
000052 00
000053 00
000054 00
000055 00        	.DB  0x0,0x0,0x0,0x0
000056 00
000057 00
000058 00
000059 00        	.DB  0x0,0x0,0x0,0x0
00005a 00
00005b 00
00005c 00
00005d 00        	.DB  0x0,0x0,0x0,0x0
00005e 00
00005f 00
000060 00
000061 00        	.DB  0x0,0x0,0x0,0x0
000062 00
000063 00
000064 00
000065 00        	.DB  0x0,0x0,0x0,0x0
000066 00
000067 00
000068 00
000069 00        	.DB  0x0,0x0,0x0,0x0
00006a 00
00006b 00
00006c 00
00006d 00        	.DB  0x0,0x0,0x0,0x0
00006e 00
00006f 00
000070 00
000071 00        	.DB  0x0,0x0,0x0,0x0
000072 00
000073 00
000074 00
000075 00        	.DB  0x0,0x0,0x0,0x0
000076 00
000077 00
000078 00
000079 00        	.DB  0x0,0x0,0x0,0x0
00007a 00
00007b 00        	.DB  0x0,0x0
                 _day_index:
00007c 00        	.DB  0x0
                 
                 	.DSEG
                 _hour:
000260           	.BYTE 0x2
                 _day:
000262           	.BYTE 0x2
                 _month:
000264           	.BYTE 0x2
                 _year:
000266           	.BYTE 0x2
                 __base_y_G101:
000268           	.BYTE 0x4
                 __lcd_x:
00026c           	.BYTE 0x1
                 __lcd_y:
00026d           	.BYTE 0x1
                 __lcd_maxx:
00026e           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
000724 91a0 0260 	LDS  R26,_hour
000726 91b0 0261 	LDS  R27,_hour+1
000728 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1:
000729 91a0 0264 	LDS  R26,_month
00072b 91b0 0265 	LDS  R27,_month+1
00072d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x2:
00072e 91a0 0262 	LDS  R26,_day
000730 91b0 0263 	LDS  R27,_day+1
000732 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:19 WORDS
                 SUBOPT_0x3:
000733 e0e1      	LDI  R30,LOW(1)
000734 e0f0      	LDI  R31,HIGH(1)
000735 93e0 0262 	STS  _day,R30
000737 93f0 0263 	STS  _day+1,R31
000739 e6a4      	LDI  R26,LOW(_month)
00073a e0b2      	LDI  R27,HIGH(_month)
00073b 91ed      	LD   R30,X+
00073c 91fd      	LD   R31,X+
00073d 9631      	ADIW R30,1
00073e 93fe      	ST   -X,R31
00073f 93ee      	ST   -X,R30
000740 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
000741 e0e1      	LDI  R30,LOW(1)
000742 e0f0      	LDI  R31,HIGH(1)
000743 93e0 0264 	STS  _month,R30
000745 93f0 0265 	STS  _month+1,R31
000747 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
000748 e6a6      	LDI  R26,LOW(_year)
000749 e0b2      	LDI  R27,HIGH(_year)
00074a 91ed      	LD   R30,X+
00074b 91fd      	LD   R31,X+
00074c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x6:
00074d 920a      	ST   -Y,R0
00074e 921a      	ST   -Y,R1
00074f 92fa      	ST   -Y,R15
000750 936a      	ST   -Y,R22
000751 937a      	ST   -Y,R23
000752 938a      	ST   -Y,R24
000753 939a      	ST   -Y,R25
000754 93aa      	ST   -Y,R26
000755 93ba      	ST   -Y,R27
000756 93ea      	ST   -Y,R30
000757 93fa      	ST   -Y,R31
000758 b7ef      	IN   R30,SREG
000759 93ea      	ST   -Y,R30
00075a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
00075b 940e 06c8 	CALL _lcd_putsf
00075d efa4      	LDI  R26,LOW(500)
00075e e0b1      	LDI  R27,HIGH(500)
00075f 940c 0887 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x8:
000761 2da9      	MOV  R26,R9
000762 e0b0      	LDI  R27,0
000763 fda7      	SBRC R26,7
000764 efbf      	SER  R27
000765 2de8      	MOV  R30,R8
000766 e0f0      	LDI  R31,0
000767 fde7      	SBRC R30,7
000768 efff      	SER  R31
000769 0fae      	ADD  R26,R30
00076a 1fbf      	ADC  R27,R31
00076b 971a      	SBIW R26,10
00076c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x9:
00076d e0e0      	LDI  R30,LOW(0)
00076e 93ea      	ST   -Y,R30
00076f e0a1      	LDI  R26,LOW(1)
000770 940c 067a 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:14 WORDS
                 SUBOPT_0xA:
000772 dfb1      	RCALL SUBOPT_0x0
000773 e0e0      	LDI  R30,LOW(0)
000774 e0f0      	LDI  R31,HIGH(0)
000775 940e 08b3 	CALL __EQW12
000777 2e0e      	MOV  R0,R30
000778 01d6      	MOVW R26,R12
000779 e0e0      	LDI  R30,LOW(0)
00077a e0f0      	LDI  R31,HIGH(0)
00077b 940e 08b3 	CALL __EQW12
00077d 220e      	AND  R0,R30
00077e 01d5      	MOVW R26,R10
00077f e0e0      	LDI  R30,LOW(0)
000780 e0f0      	LDI  R31,HIGH(0)
000781 940e 08b3 	CALL __EQW12
000783 21e0      	AND  R30,R0
000784 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0xB:
000785 e7ac      	LDI  R26,LOW(_day_index)
000786 e0b0      	LDI  R27,HIGH(_day_index)
000787 940e 08ca 	CALL __EEPROMRDB
000789 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xC:
00078a 940e 0899 	CALL __CBD1
00078c 940e 08c1 	CALL __PUTPARD1
00078e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xD:
00078f 91e0 0266 	LDS  R30,_year
000791 91f0 0267 	LDS  R31,_year+1
000793 2766      	CLR  R22
000794 2777      	CLR  R23
000795 940e 08c1 	CALL __PUTPARD1
000797 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xE:
000798 91e0 0264 	LDS  R30,_month
00079a 91f0 0265 	LDS  R31,_month+1
00079c 2766      	CLR  R22
00079d 2777      	CLR  R23
00079e 940e 08c1 	CALL __PUTPARD1
0007a0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xF:
0007a1 91e0 0262 	LDS  R30,_day
0007a3 91f0 0263 	LDS  R31,_day+1
0007a5 2766      	CLR  R22
0007a6 2777      	CLR  R23
0007a7 940e 08c1 	CALL __PUTPARD1
0007a9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x10:
0007aa 01fe      	MOVW R30,R28
0007ab 93fa      	ST   -Y,R31
0007ac 93ea      	ST   -Y,R30
0007ad 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x11:
0007ae 93fa      	ST   -Y,R31
0007af 93ea      	ST   -Y,R30
0007b0 91e0 0260 	LDS  R30,_hour
0007b2 91f0 0261 	LDS  R31,_hour+1
0007b4 2766      	CLR  R22
0007b5 2777      	CLR  R23
0007b6 940e 08c1 	CALL __PUTPARD1
0007b8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x12:
0007b9 2766      	CLR  R22
0007ba 2777      	CLR  R23
0007bb 940e 08c1 	CALL __PUTPARD1
0007bd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x13:
0007be 01de      	MOVW R26,R28
0007bf 940c 06b9 	JMP  _lcd_puts
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x14:
0007c1 e1a9      	LDI  R26,LOW(25)
0007c2 e0b0      	LDI  R27,0
0007c3 940c 0887 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x15:
0007c5 e0a0      	LDI  R26,0
0007c6 99ca      	SBIC 0x19,2
0007c7 e0a1      	LDI  R26,1
0007c8 e0e0      	LDI  R30,LOW(0)
0007c9 940e 089f 	CALL __EQB12
0007cb 2e0e      	MOV  R0,R30
0007cc 2fa1      	MOV  R26,R17
0007cd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x16:
0007ce e0e0      	LDI  R30,LOW(0)
0007cf 940e 089f 	CALL __EQB12
0007d1 21e0      	AND  R30,R0
0007d2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x17:
0007d3 e0e1      	LDI  R30,LOW(1)
0007d4 940e 089f 	CALL __EQB12
0007d6 21e0      	AND  R30,R0
0007d7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x18:
0007d8 e0e2      	LDI  R30,LOW(2)
0007d9 940e 089f 	CALL __EQB12
0007db 21e0      	AND  R30,R0
0007dc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x19:
0007dd e084      	LDI  R24,4
0007de 940e 0615 	CALL _sprintf
0007e0 9628      	ADIW R28,8
0007e1 940e 068b 	CALL _lcd_clear
0007e3 cfda      	RJMP SUBOPT_0x13
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1A:
0007e4 e0a0      	LDI  R26,0
0007e5 99c9      	SBIC 0x19,1
0007e6 e0a1      	LDI  R26,1
0007e7 e0e0      	LDI  R30,LOW(0)
0007e8 940e 089f 	CALL __EQB12
0007ea 2e0e      	MOV  R0,R30
0007eb e0a0      	LDI  R26,0
0007ec fcf0      	SBRC R15,0
0007ed e0a1      	LDI  R26,1
0007ee 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1B:
0007ef e0a0      	LDI  R26,0
0007f0 99c8      	SBIC 0x19,0
0007f1 e0a1      	LDI  R26,1
0007f2 e0e0      	LDI  R30,LOW(0)
0007f3 940e 089f 	CALL __EQB12
0007f5 2e0e      	MOV  R0,R30
0007f6 e0a0      	LDI  R26,0
0007f7 fcf0      	SBRC R15,0
0007f8 e0a1      	LDI  R26,1
0007f9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x1C:
0007fa 91ed      	LD   R30,X+
0007fb 91fd      	LD   R31,X+
0007fc 9631      	ADIW R30,1
0007fd 93fe      	ST   -X,R31
0007fe 93ee      	ST   -X,R30
0007ff 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1D:
000800 91ed      	LD   R30,X+
000801 91fd      	LD   R31,X+
000802 9731      	SBIW R30,1
000803 93fe      	ST   -X,R31
000804 93ee      	ST   -X,R30
000805 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1E:
000806 2e0e      	MOV  R0,R30
000807 e0a0      	LDI  R26,0
000808 fcf0      	SBRC R15,0
000809 e0a1      	LDI  R26,1
00080a cfc3      	RJMP SUBOPT_0x16
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x1F:
00080b 940e 08ae 	CALL __GTB12U
00080d 220e      	AND  R0,R30
00080e e0a0      	LDI  R26,0
00080f fcf0      	SBRC R15,0
000810 e0a1      	LDI  R26,1
000811 cfc1      	RJMP SUBOPT_0x17
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x20:
000812 e031      	LDI  R19,LOW(1)
000813 5f0f      	SUBI R16,-1
000814 94e8      	CLT
000815 f8f0      	BLD  R15,0
000816 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x21:
000817 27ff      	CLR  R31
000818 2766      	CLR  R22
000819 2777      	CLR  R23
00081a 940e 08c1 	CALL __PUTPARD1
00081c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x22:
00081d e0f0      	LDI  R31,0
00081e 0fee      	LSL  R30
00081f 1fff      	ROL  R31
000820 0fae      	ADD  R26,R30
000821 1fbf      	ADC  R27,R31
000822 940e 08c6 	CALL __EEPROMRDW
000824 cf94      	RJMP SUBOPT_0x12
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x23:
000825 01fe      	MOVW R30,R28
000826 9631      	ADIW R30,1
000827 93fa      	ST   -Y,R31
000828 93ea      	ST   -Y,R30
000829 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x24:
00082a e084      	LDI  R24,4
00082b 940e 0615 	CALL _sprintf
00082d 9628      	ADIW R28,8
00082e 940e 068b 	CALL _lcd_clear
000830 01de      	MOVW R26,R28
000831 9611      	ADIW R26,1
000832 940c 06b9 	JMP  _lcd_puts
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x25:
000834 e0a0      	LDI  R26,0
000835 99c9      	SBIC 0x19,1
000836 e0a1      	LDI  R26,1
000837 e0e0      	LDI  R30,LOW(0)
000838 940e 089f 	CALL __EQB12
00083a 2e0e      	MOV  R0,R30
00083b 2fa1      	MOV  R26,R17
00083c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x26:
00083d e0a0      	LDI  R26,0
00083e 99c8      	SBIC 0x19,0
00083f e0a1      	LDI  R26,1
000840 e0e0      	LDI  R30,LOW(0)
000841 940e 089f 	CALL __EQB12
000843 2e0e      	MOV  R0,R30
000844 2fa1      	MOV  R26,R17
000845 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x27:
000846 91e0 0262 	LDS  R30,_day
000848 e7ac      	LDI  R26,LOW(_day_index)
000849 e0b0      	LDI  R27,HIGH(_day_index)
00084a 940e 08de 	CALL __EEPROMWRB
00084c cee1      	RJMP SUBOPT_0x2
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x28:
00084d 932a      	ST   -Y,R18
00084e 85ad      	LDD  R26,Y+13
00084f 85be      	LDD  R27,Y+13+1
000850 85ef      	LDD  R30,Y+15
000851 89f8      	LDD  R31,Y+15+1
000852 9509      	ICALL
000853 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x29:
000854 89e8      	LDD  R30,Y+16
000855 89f9      	LDD  R31,Y+16+1
000856 9734      	SBIW R30,4
000857 8be8      	STD  Y+16,R30
000858 8bf9      	STD  Y+16+1,R31
000859 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2A:
00085a 85ad      	LDD  R26,Y+13
00085b 85be      	LDD  R27,Y+13+1
00085c 85ef      	LDD  R30,Y+15
00085d 89f8      	LDD  R31,Y+15+1
00085e 9509      	ICALL
00085f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x2B:
000860 89a8      	LDD  R26,Y+16
000861 89b9      	LDD  R27,Y+16+1
000862 9614      	ADIW R26,4
000863 940e 08b9 	CALL __GETW1P
000865 83ee      	STD  Y+6,R30
000866 83ff      	STD  Y+6+1,R31
000867 81ae      	LDD  R26,Y+6
000868 81bf      	LDD  R27,Y+6+1
000869 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x2C:
00086a 89a8      	LDD  R26,Y+16
00086b 89b9      	LDD  R27,Y+16+1
00086c 9614      	ADIW R26,4
00086d 940e 08b9 	CALL __GETW1P
00086f 87ea      	STD  Y+10,R30
000870 87fb      	STD  Y+10+1,R31
000871 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2D:
000872 01de      	MOVW R26,R28
000873 961c      	ADIW R26,12
000874 940e 0891 	CALL __ADDW2R15
000876 940e 08b9 	CALL __GETW1P
000878 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2E:
000879 940e 066e 	CALL __lcd_write_data
00087b e0a3      	LDI  R26,LOW(3)
00087c e0b0      	LDI  R27,0
00087d 940c 0887 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x2F:
00087f e3a0      	LDI  R26,LOW(48)
000880 940e 0649 	CALL __lcd_write_nibble_G101
                +
000882 ec88     +LDI R24 , LOW ( 200 )
000883 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000884 9701     +SBIW R24 , 1
000885 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000886 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000887 9610      	adiw r26,0
000888 f039      	breq __delay_ms1
                 __delay_ms0:
000889 95a8      	wdr
                +
00088a ed80     +LDI R24 , LOW ( 0x7D0 )
00088b e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
00088c 9701     +SBIW R24 , 1
00088d f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
00088e 9711      	sbiw r26,1
00088f f7c9      	brne __delay_ms0
                 __delay_ms1:
000890 9508      	ret
                 
                 __ADDW2R15:
000891 2400      	CLR  R0
000892 0daf      	ADD  R26,R15
000893 1db0      	ADC  R27,R0
000894 9508      	RET
                 
                 __ANEGW1:
000895 95f1      	NEG  R31
000896 95e1      	NEG  R30
000897 40f0      	SBCI R31,0
000898 9508      	RET
                 
                 __CBD1:
000899 2ffe      	MOV  R31,R30
00089a 0fff      	ADD  R31,R31
00089b 0bff      	SBC  R31,R31
00089c 2f6f      	MOV  R22,R31
00089d 2f7f      	MOV  R23,R31
00089e 9508      	RET
                 
                 __EQB12:
00089f 17ea      	CP   R30,R26
0008a0 e0e1      	LDI  R30,1
0008a1 f009      	BREQ __EQB12T
0008a2 27ee      	CLR  R30
                 __EQB12T:
0008a3 9508      	RET
                 
                 __LEB12U:
0008a4 17ea      	CP   R30,R26
0008a5 e0e1      	LDI  R30,1
0008a6 f408      	BRSH __LEB12U1
0008a7 27ee      	CLR  R30
                 __LEB12U1:
0008a8 9508      	RET
                 
                 __LTB12U:
0008a9 17ae      	CP   R26,R30
0008aa e0e1      	LDI  R30,1
0008ab f008      	BRLO __LTB12U1
0008ac 27ee      	CLR  R30
                 __LTB12U1:
0008ad 9508      	RET
                 
                 __GTB12U:
0008ae 17ea      	CP   R30,R26
0008af e0e1      	LDI  R30,1
0008b0 f008      	BRLO __GTB12U1
0008b1 27ee      	CLR  R30
                 __GTB12U1:
0008b2 9508      	RET
                 
                 __EQW12:
0008b3 17ea      	CP   R30,R26
0008b4 07fb      	CPC  R31,R27
0008b5 e0e1      	LDI  R30,1
0008b6 f009      	BREQ __EQW12T
0008b7 27ee      	CLR  R30
                 __EQW12T:
0008b8 9508      	RET
                 
                 __GETW1P:
0008b9 91ed      	LD   R30,X+
0008ba 91fc      	LD   R31,X
0008bb 9711      	SBIW R26,1
0008bc 9508      	RET
                 
                 __GETW1PF:
0008bd 9005      	LPM  R0,Z+
0008be 91f4      	LPM  R31,Z
0008bf 2de0      	MOV  R30,R0
0008c0 9508      	RET
                 
                 __PUTPARD1:
0008c1 937a      	ST   -Y,R23
0008c2 936a      	ST   -Y,R22
0008c3 93fa      	ST   -Y,R31
0008c4 93ea      	ST   -Y,R30
0008c5 9508      	RET
                 
                 __EEPROMRDW:
0008c6 9611      	ADIW R26,1
0008c7 d002      	RCALL __EEPROMRDB
0008c8 2ffe      	MOV  R31,R30
0008c9 9711      	SBIW R26,1
                 
                 __EEPROMRDB:
0008ca 99e1      	SBIC EECR,EEWE
0008cb cffe      	RJMP __EEPROMRDB
0008cc 93ff      	PUSH R31
0008cd b7ff      	IN   R31,SREG
0008ce 94f8      	CLI
0008cf bbae      	OUT  EEARL,R26
0008d0 bbbf      	OUT  EEARH,R27
0008d1 9ae0      	SBI  EECR,EERE
0008d2 b3ed      	IN   R30,EEDR
0008d3 bfff      	OUT  SREG,R31
0008d4 91ff      	POP  R31
0008d5 9508      	RET
                 
                 __EEPROMWRW:
0008d6 d007      	RCALL __EEPROMWRB
0008d7 9611      	ADIW R26,1
0008d8 93ef      	PUSH R30
0008d9 2fef      	MOV  R30,R31
0008da d003      	RCALL __EEPROMWRB
0008db 91ef      	POP  R30
0008dc 9711      	SBIW R26,1
0008dd 9508      	RET
                 
                 __EEPROMWRB:
0008de 9be1      	SBIS EECR,EEWE
0008df c002      	RJMP __EEPROMWRB1
0008e0 95a8      	WDR
0008e1 cffc      	RJMP __EEPROMWRB
                 __EEPROMWRB1:
0008e2 b79f      	IN   R25,SREG
0008e3 94f8      	CLI
0008e4 bbae      	OUT  EEARL,R26
0008e5 bbbf      	OUT  EEARH,R27
0008e6 9ae0      	SBI  EECR,EERE
0008e7 b38d      	IN   R24,EEDR
0008e8 17e8      	CP   R30,R24
0008e9 f019      	BREQ __EEPROMWRB0
0008ea bbed      	OUT  EEDR,R30
0008eb 9ae2      	SBI  EECR,EEMWE
0008ec 9ae1      	SBI  EECR,EEWE
                 __EEPROMWRB0:
0008ed bf9f      	OUT  SREG,R25
0008ee 9508      	RET
                 
                 __SAVELOCR6:
0008ef 935a      	ST   -Y,R21
                 __SAVELOCR5:
0008f0 934a      	ST   -Y,R20
                 __SAVELOCR4:
0008f1 933a      	ST   -Y,R19
                 __SAVELOCR3:
0008f2 932a      	ST   -Y,R18
                 __SAVELOCR2:
0008f3 931a      	ST   -Y,R17
0008f4 930a      	ST   -Y,R16
0008f5 9508      	RET
                 
                 __LOADLOCR6:
0008f6 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0008f7 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0008f8 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0008f9 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0008fa 8119      	LDD  R17,Y+1
0008fb 8108      	LD   R16,Y
0008fc 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32A register use summary:
r0 :  33 r1 :   3 r2 :   6 r3 :   0 r4 :   3 r5 :   0 r6 :   3 r7 :   0 
r8 :  12 r9 :  13 r10:   6 r11:   2 r12:  14 r13:   5 r14:   0 r15:  24 
r16:  58 r17:  51 r18:  29 r19:  26 r20:   9 r21:  17 r22:  14 r23:  10 
r24:  32 r25:   9 r26: 212 r27:  84 r28:  38 r29:   1 r30: 399 r31: 150 
x  :  39 y  : 237 z  :  16 
Registers used: 31 out of 35 (88.6%)

ATmega32A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   5 add   :   8 
adiw  :  52 and   :   7 andi  :   8 asr   :   0 bclr  :   0 bld   :   8 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  47 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  24 
brlt  :   6 brmi  :   1 brne  :  47 brpl  :   1 brsh  :   9 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  : 234 
cbi   :   9 cbr   :   0 clc   :   0 clh   :   0 cli   :   3 cln   :   0 
clr   :  36 cls   :   0 clt   :   6 clv   :   0 clz   :   0 com   :   0 
cp    :  17 cpc   :   7 cpi   :  53 cpse  :   0 dec   :   8 des   :   0 
eor   :   1 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   7 inc   :   3 jmp   :  28 ld    :  53 ldd   :  78 ldi   : 271 
lds   :  25 lpm   :  16 lsl   :   3 lsr   :   0 mov   :  61 movw  :  43 
mul   :   1 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   1 
ori   :   7 out   :  26 pop   :   5 push  :   5 rcall :  24 ret   :  68 
reti  :   2 rjmp  : 142 rol   :   3 ror   :   0 sbc   :   2 sbci  :   2 
sbi   :  17 sbic  :  19 sbis  :  28 sbiw  :  47 sbr   :   0 sbrc  :  11 
sbrs  :  13 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   3 
ses   :   0 set   :   6 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    : 115 std   :  33 sts   :  27 sub   :   4 subi  :  27 swap  :   1 
tst   :   4 wdr   :   2 
Instructions used: 66 out of 116 (56.9%)

ATmega32A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0011fa   4292    310   4602   32768  14.0%
[.dseg] 0x000060 0x00026f      0     15     15    2048   0.7%
[.eseg] 0x000000 0x00007d      0    125    125    1024  12.2%

Assembly complete, 0 errors, 15 warnings
