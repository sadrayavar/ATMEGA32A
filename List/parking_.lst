
AVRASM ver. 2.1.30  D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm Thu Feb 08 19:28:10 2024

D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1087): warning: Register r4 already defined by the .DEF directive
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1088): warning: Register r5 already defined by the .DEF directive
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1089): warning: Register r6 already defined by the .DEF directive
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1090): warning: Register r7 already defined by the .DEF directive
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1091): warning: Register r9 already defined by the .DEF directive
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1092): warning: Register r8 already defined by the .DEF directive
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1093): warning: Register r10 already defined by the .DEF directive
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1094): warning: Register r11 already defined by the .DEF directive
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1095): warning: Register r12 already defined by the .DEF directive
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1096): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Release
                 ;Chip type              : ATmega32A
                 ;Program type           : Application
                 ;Clock frequency        : 8/000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32A
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _number_of_enters=R4
                 	.DEF _number_of_enters_msb=R5
                 	.DEF _number_of_exits=R6
                 	.DEF _number_of_exits_msb=R7
                 	.DEF _capacity=R9
                 	.DEF _reserved=R8
                 	.DEF _second=R10
                 	.DEF _second_msb=R11
                 	.DEF _minute=R12
                 	.DEF _minute_msb=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 00c0 	JMP  __RESET
000002 940c 014a 	JMP  _ext_int0_isr
000004 940c 016d 	JMP  _ext_int1_isr
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 00ef 	JMP  _timer2_ovf_isr
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
000033 0002      	.DW  0x0002
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000034 0000
000035 0000      	.DB  0x0,0x0,0x0,0x0
000036 0a00
000037 0032      	.DB  0x0,0xA,0x32,0x0
000038 003b      	.DB  0x3B,0x0
                 
                 _0x3:
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1144): warning: .cseg .db misalignment - padding zero byte
000039 000a      	.DB  0xA
                 _0x4:
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1146): warning: .cseg .db misalignment - padding zero byte
00003a 0017      	.DB  0x17
                 _0x5:
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1148): warning: .cseg .db misalignment - padding zero byte
00003b 001d      	.DB  0x1D
                 _0x6:
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1150): warning: .cseg .db misalignment - padding zero byte
00003c 000c      	.DB  0xC
                 _0x7:
00003d 057a      	.DB  0x7A,0x5
                 _0x0:
00003e 6d45
00003f 7470
000040 0079
000041 7546      	.DB  0x45,0x6D,0x70,0x74,0x79,0x0,0x46,0x75
000042 6c6c
000043 7300
000044 7661
000045 6e69      	.DB  0x6C,0x6C,0x0,0x73,0x61,0x76,0x69,0x6E
000046 2067
000047 6164
000048 6174
000049 4300      	.DB  0x67,0x20,0x64,0x61,0x74,0x61,0x0,0x43
00004a 253d
00004b 2064
00004c 6425
00004d 252f      	.DB  0x3D,0x25,0x64,0x20,0x25,0x64,0x2F,0x25
00004e 2f64
00004f 6425
000050 2500
000051 3a64      	.DB  0x64,0x2F,0x25,0x64,0x0,0x25,0x64,0x3A
000052 6425
000053 253a
000054 2064
000055 5220      	.DB  0x25,0x64,0x3A,0x25,0x64,0x20,0x20,0x52
000056 253d
000057 2064
000058 5400
000059 6d69      	.DB  0x3D,0x25,0x64,0x20,0x0,0x54,0x69,0x6D
00005a 2065
00005b 6553
00005c 7474
00005d 6e69      	.DB  0x65,0x20,0x53,0x65,0x74,0x74,0x69,0x6E
00005e 2067
00005f 3e3e
000060 4900
000061 264e      	.DB  0x67,0x20,0x3E,0x3E,0x0,0x49,0x4E,0x26
000062 554f
000063 2054
000064 6553
000065 7261      	.DB  0x4F,0x55,0x54,0x20,0x53,0x65,0x61,0x72
000066 6863
000067 3e20
000068 003e
000069 6552      	.DB  0x63,0x68,0x20,0x3E,0x3E,0x0,0x52,0x65
00006a 6573
00006b 7672
00006c 5f65
00006d 6150      	.DB  0x73,0x65,0x72,0x76,0x65,0x5F,0x50,0x61
00006e 6b72
00006f 3e20
000070 003e
000071 6553      	.DB  0x72,0x6B,0x20,0x3E,0x3E,0x0,0x53,0x65
000072 2074
000073 6164
000074 6574
000075 3e20      	.DB  0x74,0x20,0x64,0x61,0x74,0x65,0x20,0x3E
000076 003e
000077 6553
000078 2074
000079 696d      	.DB  0x3E,0x0,0x53,0x65,0x74,0x20,0x6D,0x69
00007a 3d6e
00007b 6425
00007c 2020
00007d 003e      	.DB  0x6E,0x3D,0x25,0x64,0x20,0x20,0x3E,0x0
00007e 6553
00007f 2074
000080 6f68
000081 7275      	.DB  0x53,0x65,0x74,0x20,0x68,0x6F,0x75,0x72
000082 253d
000083 2064
000084 3e20
000085 6900      	.DB  0x3D,0x25,0x64,0x20,0x20,0x3E,0x0,0x69
000086 3d6e
000087 6425
000088 6f20
000089 7475      	.DB  0x6E,0x3D,0x25,0x64,0x20,0x6F,0x75,0x74
00008a 253d
00008b 0064
00008c 6552
00008d 6573      	.DB  0x3D,0x25,0x64,0x0,0x52,0x65,0x73,0x65
00008e 7672
00008f 6465
000090 253d
000091 0064      	.DB  0x72,0x76,0x65,0x64,0x3D,0x25,0x64,0x0
000092 6553
000093 2074
000094 6f6d
000095 746e      	.DB  0x53,0x65,0x74,0x20,0x6D,0x6F,0x6E,0x74
000096 3d68
000097 6425
000098 2020
000099 003e      	.DB  0x68,0x3D,0x25,0x64,0x20,0x20,0x3E,0x0
00009a 6553
00009b 2074
00009c 6164
00009d 3d79      	.DB  0x53,0x65,0x74,0x20,0x64,0x61,0x79,0x3D
00009e 6425
00009f 2020
0000a0 003e
0000a1 6553      	.DB  0x25,0x64,0x20,0x20,0x3E,0x0,0x53,0x65
0000a2 2074
0000a3 6579
0000a4 7261
0000a5 253d      	.DB  0x74,0x20,0x79,0x65,0x61,0x72,0x3D,0x25
0000a6 2064
0000a7 3e20
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1180): warning: .cseg .db misalignment - padding zero byte
0000a8 0000      	.DB  0x64,0x20,0x20,0x3E,0x0
                 _0x2020003:
0000a9 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
0000aa 0001      	.DW  0x01
0000ab 0002      	.DW  0x02
0000ac 0066      	.DW  __REG_BIT_VARS*2
                 
0000ad 000a      	.DW  0x0A
0000ae 0004      	.DW  0x04
0000af 0068      	.DW  __REG_VARS*2
                 
0000b0 0001      	.DW  0x01
0000b1 0260      	.DW  _hour
0000b2 0074      	.DW  _0x4*2
                 
0000b3 0001      	.DW  0x01
0000b4 0262      	.DW  _day
0000b5 0076      	.DW  _0x5*2
                 
0000b6 0001      	.DW  0x01
0000b7 0264      	.DW  _month
0000b8 0078      	.DW  _0x6*2
                 
0000b9 0002      	.DW  0x02
0000ba 0266      	.DW  _year
0000bb 007a      	.DW  _0x7*2
                 
0000bc 0002      	.DW  0x02
0000bd 0268      	.DW  __base_y_G101
0000be 0152      	.DW  _0x2020003*2
                 
                 _0xFFFFFFFF:
0000bf 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
0000c0 94f8      	CLI
0000c1 27ee      	CLR  R30
0000c2 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
0000c3 e0f1      	LDI  R31,1
0000c4 bff5      	OUT  MCUCR,R31
0000c5 bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
0000c6 e1f8      	LDI  R31,0x18
0000c7 bdf1      	OUT  WDTCR,R31
0000c8 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
0000c9 e08d      	LDI  R24,(14-2)+1
0000ca e0a2      	LDI  R26,2
0000cb 27bb      	CLR  R27
                 __CLEAR_REG:
0000cc 93ed      	ST   X+,R30
0000cd 958a      	DEC  R24
0000ce f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0000cf e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
0000d0 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
0000d1 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
0000d2 93ed      	ST   X+,R30
0000d3 9701      	SBIW R24,1
0000d4 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0000d5 e5e4      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0000d6 e0f1      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0000d7 9185      	LPM  R24,Z+
0000d8 9195      	LPM  R25,Z+
0000d9 9700      	SBIW R24,0
0000da f061      	BREQ __GLOBAL_INI_END
0000db 91a5      	LPM  R26,Z+
0000dc 91b5      	LPM  R27,Z+
0000dd 9005      	LPM  R0,Z+
0000de 9015      	LPM  R1,Z+
0000df 01bf      	MOVW R22,R30
0000e0 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0000e1 9005      	LPM  R0,Z+
0000e2 920d      	ST   X+,R0
0000e3 9701      	SBIW R24,1
0000e4 f7e1      	BRNE __GLOBAL_INI_LOOP
0000e5 01fb      	MOVW R30,R22
0000e6 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0000e7 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0000e8 bfed      	OUT  SPL,R30
0000e9 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000ea bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000eb e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000ec e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000ed 940c 019d 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <mega32a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h> // delay_ms functions
                 ;#include <stdio.h> // sprintf function
                 ;#include <alcd.h>  // lcd related functions
                 ;#define xtal 8000000
                 ;
                 ;// prototyping functions
                 ;char menu(void);
                 ;char in_out_search(void);
                 ;char set_time(void);
                 ;char reserve_park(void);
                 ;char set_date(void);
                 ;
                 ;// parking related variables
                 ;unsigned int number_of_enters = 0, number_of_exits = 0;
                 ;eeprom unsigned int enter_array[32] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  ...
                 ;eeprom unsigned int exit_array[32] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ...
                 ;eeprom char day_index = -1;
                 ;unsigned char const init_capacity = 10;
                 
                 	.DSEG
                 ;signed char capacity = init_capacity, reserved = 0;
                 ;bit is_full = 0, is_empty = 1;
                 ;
                 ;// date related variables
                 ;unsigned int second = 50, minute = 59, hour = 23, day = 29, month = 12, year = 1402;
                 ;
                 ;// define timer interrupt: clock and date logic
                 ;interrupt[TIM2_OVF] void timer2_ovf_isr(void)
                 ; 0000 001C {
                 
                 	.CSEG
                 _timer2_ovf_isr:
                 ; .FSTART _timer2_ovf_isr
0000ef 93aa      	ST   -Y,R26
0000f0 93ba      	ST   -Y,R27
0000f1 93ea      	ST   -Y,R30
0000f2 93fa      	ST   -Y,R31
0000f3 b7ef      	IN   R30,SREG
0000f4 93ea      	ST   -Y,R30
                 ; 0000 001D 
                 ; 0000 001E   // logic of second, minute, hour
                 ; 0000 001F   if (second == 59)
0000f5 e3eb      	LDI  R30,LOW(59)
0000f6 e0f0      	LDI  R31,HIGH(59)
0000f7 15ea      	CP   R30,R10
0000f8 05fb      	CPC  R31,R11
0000f9 f4f9      	BRNE _0x8
                 ; 0000 0020   {
                 ; 0000 0021     second = 0;
0000fa 24aa      	CLR  R10
0000fb 24bb      	CLR  R11
                 ; 0000 0022     if (minute == 59)
0000fc 15ec      	CP   R30,R12
0000fd 05fd      	CPC  R31,R13
0000fe f4b1      	BRNE _0x9
                 ; 0000 0023     {
                 ; 0000 0024       minute = 0;
0000ff 24cc      	CLR  R12
000100 24dd      	CLR  R13
                 ; 0000 0025       if (hour == 23)
000101 940e 0723 	CALL SUBOPT_0x0
000103 9757      	SBIW R26,23
000104 f441      	BRNE _0xA
                 ; 0000 0026       {
                 ; 0000 0027         hour = 0;
000105 e0e0      	LDI  R30,LOW(0)
000106 93e0 0260 	STS  _hour,R30
000108 93e0 0261 	STS  _hour+1,R30
                 ; 0000 0028         day++;
00010a e6a2      	LDI  R26,LOW(_day)
00010b e0b2      	LDI  R27,HIGH(_day)
00010c c002      	RJMP _0xD5
                 ; 0000 0029       }
                 ; 0000 002A       else
                 _0xA:
                 ; 0000 002B         hour++;
00010d e6a0      	LDI  R26,LOW(_hour)
00010e e0b2      	LDI  R27,HIGH(_hour)
                 _0xD5:
00010f 91ed      	LD   R30,X+
000110 91fd      	LD   R31,X+
000111 9631      	ADIW R30,1
000112 93fe      	ST   -X,R31
000113 93ee      	ST   -X,R30
                 ; 0000 002C     }
                 ; 0000 002D     else
000114 c003      	RJMP _0xC
                 _0x9:
                 ; 0000 002E       minute++;
000115 01f6      	MOVW R30,R12
000116 9631      	ADIW R30,1
000117 016f      	MOVW R12,R30
                 ; 0000 002F   }
                 _0xC:
                 ; 0000 0030   else
000118 c003      	RJMP _0xD
                 _0x8:
                 ; 0000 0031     second++;
000119 01f5      	MOVW R30,R10
00011a 9631      	ADIW R30,1
00011b 015f      	MOVW R10,R30
                 ; 0000 0032 
                 ; 0000 0033   // logic of day, month
                 ; 0000 0034   if (month <= 6)
                 _0xD:
00011c 940e 0728 	CALL SUBOPT_0x1
00011e 9717      	SBIW R26,7
00011f f438      	BRSH _0xE
                 ; 0000 0035   {
                 ; 0000 0036     if (day > 31)
000120 940e 072d 	CALL SUBOPT_0x2
000122 9790      	SBIW R26,32
000123 f010      	BRLO _0xF
                 ; 0000 0037     {
                 ; 0000 0038       day = 1;
000124 940e 0732 	CALL SUBOPT_0x3
                 ; 0000 0039       month++;
                 ; 0000 003A     }
                 ; 0000 003B   }
                 _0xF:
                 ; 0000 003C   else
000126 c011      	RJMP _0x10
                 _0xE:
                 ; 0000 003D   {
                 ; 0000 003E     if (month == 12)
000127 940e 0728 	CALL SUBOPT_0x1
000129 971c      	SBIW R26,12
00012a f439      	BRNE _0x11
                 ; 0000 003F     {
                 ; 0000 0040       if (day > 29)
00012b 940e 072d 	CALL SUBOPT_0x2
00012d 975e      	SBIW R26,30
00012e f010      	BRLO _0x12
                 ; 0000 0041       {
                 ; 0000 0042         day = 1;
00012f 940e 0732 	CALL SUBOPT_0x3
                 ; 0000 0043         month++;
                 ; 0000 0044       }
                 ; 0000 0045     }
                 _0x12:
                 ; 0000 0046     else
000131 c006      	RJMP _0x13
                 _0x11:
                 ; 0000 0047     {
                 ; 0000 0048       if (day > 30)
000132 940e 072d 	CALL SUBOPT_0x2
000134 975f      	SBIW R26,31
000135 f010      	BRLO _0x14
                 ; 0000 0049       {
                 ; 0000 004A         day = 1;
000136 940e 0732 	CALL SUBOPT_0x3
                 ; 0000 004B         month++;
                 ; 0000 004C       }
                 ; 0000 004D     }
                 _0x14:
                 _0x13:
                 ; 0000 004E   }
                 _0x10:
                 ; 0000 004F 
                 ; 0000 0050   // logic of year
                 ; 0000 0051   if (month > 12)
000138 940e 0728 	CALL SUBOPT_0x1
00013a 971d      	SBIW R26,13
00013b f038      	BRLO _0x15
                 ; 0000 0052   {
                 ; 0000 0053     month = 1;
00013c 940e 0740 	CALL SUBOPT_0x4
                 ; 0000 0054     year++;
00013e 940e 0747 	CALL SUBOPT_0x5
000140 9631      	ADIW R30,1
000141 93fe      	ST   -X,R31
000142 93ee      	ST   -X,R30
                 ; 0000 0055   }
                 ; 0000 0056 }
                 _0x15:
000143 91e9      	LD   R30,Y+
000144 bfef      	OUT  SREG,R30
000145 91f9      	LD   R31,Y+
000146 91e9      	LD   R30,Y+
000147 91b9      	LD   R27,Y+
000148 91a9      	LD   R26,Y+
000149 9518      	RETI
                 ; .FEND
                 ;
                 ;// define interrupt 0: for exiting cars
                 ;interrupt[EXT_INT0] void ext_int0_isr(void)
                 ; 0000 005A {
                 _ext_int0_isr:
                 ; .FSTART _ext_int0_isr
00014a 940e 074c 	CALL SUBOPT_0x6
                 ; 0000 005B   if (is_empty == 1)
00014c fe21      	SBRS R2,1
00014d c007      	RJMP _0x16
                 ; 0000 005C   {
                 ; 0000 005D     lcd_clear();
00014e 940e 068a 	CALL _lcd_clear
                 ; 0000 005E     lcd_putsf("Empty");
                +
000150 e7ac     +LDI R26 , LOW ( 2 * _0x0 + ( 0 ) )
000151 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW2FN _0x0,0
000152 940e 075a 	CALL SUBOPT_0x7
                 ; 0000 005F     delay_ms(500);
                 ; 0000 0060   }
                 ; 0000 0061   else
000154 c017      	RJMP _0x17
                 _0x16:
                 ; 0000 0062   {
                 ; 0000 0063 
                 ; 0000 0064     capacity++;
000155 9493      	INC  R9
                 ; 0000 0065     number_of_exits++;
000156 01f3      	MOVW R30,R6
000157 9631      	ADIW R30,1
000158 013f      	MOVW R6,R30
000159 9731      	SBIW R30,1
                 ; 0000 0066 
                 ; 0000 0067     // check if the parking is empty
                 ; 0000 0068     if ((capacity + reserved) >= init_capacity)
00015a 940e 0760 	CALL SUBOPT_0x8
00015c f02c      	BRLT _0x18
                 ; 0000 0069     {
                 ; 0000 006A       capacity = init_capacity - reserved;
00015d e0ea      	LDI  R30,LOW(10)
00015e 19e8      	SUB  R30,R8
00015f 2e9e      	MOV  R9,R30
                 ; 0000 006B       is_empty = 1;
000160 9468      	SET
000161 c001      	RJMP _0xD6
                 ; 0000 006C     }
                 ; 0000 006D     else
                 _0x18:
                 ; 0000 006E     {
                 ; 0000 006F       is_empty = 0;
000162 94e8      	CLT
                 _0xD6:
000163 f821      	BLD  R2,1
                 ; 0000 0070     }
                 ; 0000 0071 
                 ; 0000 0072     // checking if the parking is full
                 ; 0000 0073     if (capacity <= 0)
000164 e0e0      	LDI  R30,LOW(0)
000165 15e9      	CP   R30,R9
000166 f01c      	BRLT _0x1A
                 ; 0000 0074     {
                 ; 0000 0075       capacity = 0;
000167 2499      	CLR  R9
                 ; 0000 0076       is_full = 1;
000168 9468      	SET
000169 c001      	RJMP _0xD7
                 ; 0000 0077     }
                 ; 0000 0078     else
                 _0x1A:
                 ; 0000 0079     {
                 ; 0000 007A       is_full = 0;
00016a 94e8      	CLT
                 _0xD7:
00016b f820      	BLD  R2,0
                 ; 0000 007B     }
                 ; 0000 007C   }
                 _0x17:
                 ; 0000 007D }
00016c c022      	RJMP _0xDB
                 ; .FEND
                 ;
                 ;// define interrupt 1: for entering cars
                 ;interrupt[EXT_INT1] void ext_int1_isr(void)
                 ; 0000 0081 {
                 _ext_int1_isr:
                 ; .FSTART _ext_int1_isr
00016d 940e 074c 	CALL SUBOPT_0x6
                 ; 0000 0082   if (is_full == 1)
00016f fe20      	SBRS R2,0
000170 c007      	RJMP _0x1C
                 ; 0000 0083   {
                 ; 0000 0084     lcd_clear();
000171 940e 068a 	CALL _lcd_clear
                 ; 0000 0085     lcd_putsf("Full");
                +
000173 e8a2     +LDI R26 , LOW ( 2 * _0x0 + ( 6 ) )
000174 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 6 ) )
                 	__POINTW2FN _0x0,6
000175 940e 075a 	CALL SUBOPT_0x7
                 ; 0000 0086     delay_ms(500);
                 ; 0000 0087   }
                 ; 0000 0088   else
000177 c017      	RJMP _0x1D
                 _0x1C:
                 ; 0000 0089   {
                 ; 0000 008A 
                 ; 0000 008B     capacity--;
000178 949a      	DEC  R9
                 ; 0000 008C     number_of_enters++;
000179 01f2      	MOVW R30,R4
00017a 9631      	ADIW R30,1
00017b 012f      	MOVW R4,R30
00017c 9731      	SBIW R30,1
                 ; 0000 008D 
                 ; 0000 008E     // checking if the parking is full
                 ; 0000 008F     if ((capacity) <= 0)
00017d e0e0      	LDI  R30,LOW(0)
00017e 15e9      	CP   R30,R9
00017f f01c      	BRLT _0x1E
                 ; 0000 0090     {
                 ; 0000 0091       capacity = 0;
000180 2499      	CLR  R9
                 ; 0000 0092       is_full = 1;
000181 9468      	SET
000182 c001      	RJMP _0xD8
                 ; 0000 0093     }
                 ; 0000 0094     else
                 _0x1E:
                 ; 0000 0095     {
                 ; 0000 0096       is_full = 0;
000183 94e8      	CLT
                 _0xD8:
000184 f820      	BLD  R2,0
                 ; 0000 0097     }
                 ; 0000 0098 
                 ; 0000 0099     // check if the parking is empty
                 ; 0000 009A     if ((capacity + reserved) >= init_capacity)
000185 940e 0760 	CALL SUBOPT_0x8
000187 f02c      	BRLT _0x20
                 ; 0000 009B     {
                 ; 0000 009C       capacity = init_capacity - reserved;
000188 e0ea      	LDI  R30,LOW(10)
000189 19e8      	SUB  R30,R8
00018a 2e9e      	MOV  R9,R30
                 ; 0000 009D       is_empty = 1;
00018b 9468      	SET
00018c c001      	RJMP _0xD9
                 ; 0000 009E     }
                 ; 0000 009F     else
                 _0x20:
                 ; 0000 00A0     {
                 ; 0000 00A1       is_empty = 0;
00018d 94e8      	CLT
                 _0xD9:
00018e f821      	BLD  R2,1
                 ; 0000 00A2     }
                 ; 0000 00A3   }
                 _0x1D:
                 ; 0000 00A4 }
                 _0xDB:
00018f 91e9      	LD   R30,Y+
000190 bfef      	OUT  SREG,R30
000191 91f9      	LD   R31,Y+
000192 91e9      	LD   R30,Y+
000193 91b9      	LD   R27,Y+
000194 91a9      	LD   R26,Y+
000195 9199      	LD   R25,Y+
000196 9189      	LD   R24,Y+
000197 9179      	LD   R23,Y+
000198 9169      	LD   R22,Y+
000199 90f9      	LD   R15,Y+
00019a 9019      	LD   R1,Y+
00019b 9009      	LD   R0,Y+
00019c 9518      	RETI
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 00A7 {
                 _main:
                 ; .FSTART _main
                 ; 0000 00A8   char line[17], line2[17];
                 ; 0000 00A9 
                 ; 0000 00AA   GICR |= 0xC0;
00019d 97a2      	SBIW R28,34
                 ;	line -> Y+17
                 ;	line2 -> Y+0
00019e b7eb      	IN   R30,0x3B
00019f 6ce0      	ORI  R30,LOW(0xC0)
0001a0 bfeb      	OUT  0x3B,R30
                 ; 0000 00AB   MCUCR = 0x0B;
0001a1 e0eb      	LDI  R30,LOW(11)
0001a2 bfe5      	OUT  0x35,R30
                 ; 0000 00AC   MCUCSR = 0x00;
0001a3 e0e0      	LDI  R30,LOW(0)
0001a4 bfe4      	OUT  0x34,R30
                 ; 0000 00AD   GIFR = 0xC0;
0001a5 ece0      	LDI  R30,LOW(192)
0001a6 bfea      	OUT  0x3A,R30
                 ; 0000 00AE 
                 ; 0000 00AF   // initilize lcd
                 ; 0000 00B0   lcd_init(16);
0001a7 e1a0      	LDI  R26,LOW(16)
0001a8 940e 06da 	CALL _lcd_init
                 ; 0000 00B1   lcd_clear();
0001aa 940e 068a 	CALL _lcd_clear
                 ; 0000 00B2   lcd_gotoxy(0, 1);
0001ac 940e 076c 	CALL SUBOPT_0x9
                 ; 0000 00B3   delay_ms(300);
0001ae e2ac      	LDI  R26,LOW(300)
0001af e0b1      	LDI  R27,HIGH(300)
0001b0 940e 0891 	CALL _delay_ms
                 ; 0000 00B4 
                 ; 0000 00B5   ASSR = 0x08; // timer2
0001b2 e0e8      	LDI  R30,LOW(8)
0001b3 bde2      	OUT  0x22,R30
                 ; 0000 00B6   TCCR2 = 0x05;
0001b4 e0e5      	LDI  R30,LOW(5)
0001b5 bde5      	OUT  0x25,R30
                 ; 0000 00B7   TCNT2 = 0x00;
0001b6 e0e0      	LDI  R30,LOW(0)
0001b7 bde4      	OUT  0x24,R30
                 ; 0000 00B8   OCR2 = 0x00;
0001b8 bde3      	OUT  0x23,R30
                 ; 0000 00B9   TIMSK = 0x40;
0001b9 e4e0      	LDI  R30,LOW(64)
0001ba bfe9      	OUT  0x39,R30
                 ; 0000 00BA 
                 ; 0000 00BB   PORTA = 0b00011111;
0001bb e1ef      	LDI  R30,LOW(31)
0001bc bbeb      	OUT  0x1B,R30
                 ; 0000 00BC 
                 ; 0000 00BD   // day = day_index; // day_index in epprom
                 ; 0000 00BE 
                 ; 0000 00BF #asm("sei")
0001bd 9478      	sei
                 ; 0000 00C0   capacity = capacity - reserved;
0001be 1898      	SUB  R9,R8
                 ; 0000 00C1 
                 ; 0000 00C2   while (1)
                 _0x22:
                 ; 0000 00C3   {
                 ; 0000 00C4 
                 ; 0000 00C5     if (PINA .2 == 0)
0001bf 99ca      	SBIC 0x19,2
0001c0 c003      	RJMP _0x25
                 ; 0000 00C6     {
                 ; 0000 00C7       while (PINA .2 == 0)
                 _0x26:
0001c1 9bca      	SBIS 0x19,2
                 ; 0000 00C8         ;
0001c2 cffe      	RJMP _0x26
                 ; 0000 00C9       menu();
0001c3 d07b      	RCALL _menu
                 ; 0000 00CA     }
                 ; 0000 00CB 
                 ; 0000 00CC     // save the enter and exits at the end of the day
                 ; 0000 00CD     if (hour == 0 & minute == 0 & second == 0)
                 _0x25:
0001c4 940e 0771 	CALL SUBOPT_0xA
0001c6 f409      	BRNE PC+2
0001c7 c041      	RJMP _0x29
                 ; 0000 00CE     {
                 ; 0000 00CF       if (day_index >= 31) // shift the data if array is full
0001c8 940e 0784 	CALL SUBOPT_0xB
0001ca 31ef      	CPI  R30,LOW(0x1F)
0001cb f0e0      	BRLO _0x2A
                 ; 0000 00D0       {
                 ; 0000 00D1         char i = 0;
                 ; 0000 00D2         while (i < 31)
0001cc 9721      	SBIW R28,1
0001cd e0e0      	LDI  R30,LOW(0)
0001ce 83e8      	ST   Y,R30
                 ;	line -> Y+18
                 ;	line2 -> Y+1
                 ;	i -> Y+0
                 _0x2B:
0001cf 81a8      	LD   R26,Y
0001d0 31af      	CPI  R26,LOW(0x1F)
0001d1 f4a0      	BRSH _0x2D
                 ; 0000 00D3         {
                 ; 0000 00D4           enter_array[i] = enter_array[i + 1];
0001d2 81e8      	LD   R30,Y
0001d3 940e 0789 	CALL SUBOPT_0xC
0001d5 940e 078f 	CALL SUBOPT_0xD
                +
0001d7 5fae     +SUBI R26 , LOW ( - _enter_array - ( 2 ) )
0001d8 4fbf     +SBCI R27 , HIGH ( - _enter_array - ( 2 ) )
                 	__ADDW2MN _enter_array,2
0001d9 940e 0797 	CALL SUBOPT_0xE
                 ; 0000 00D5           exit_array[i] = exit_array[i + 1];
0001db 940e 079e 	CALL SUBOPT_0xF
0001dd 940e 078f 	CALL SUBOPT_0xD
                +
0001df 5bae     +SUBI R26 , LOW ( - _exit_array - ( 2 ) )
0001e0 4fbf     +SBCI R27 , HIGH ( - _exit_array - ( 2 ) )
                 	__ADDW2MN _exit_array,2
0001e1 940e 0797 	CALL SUBOPT_0xE
                 ; 0000 00D6           i++;
0001e3 5fef      	SUBI R30,-LOW(1)
0001e4 83e8      	ST   Y,R30
                 ; 0000 00D7         }
0001e5 cfe9      	RJMP _0x2B
                 _0x2D:
                 ; 0000 00D8       }
0001e6 9621      	ADIW R28,1
                 ; 0000 00D9       else // increment array index
0001e7 c005      	RJMP _0x2E
                 _0x2A:
                 ; 0000 00DA         day_index++;
0001e8 940e 0784 	CALL SUBOPT_0xB
0001ea 5fef      	SUBI R30,-LOW(1)
0001eb 940e 08de 	CALL __EEPROMWRB
                 ; 0000 00DB 
                 ; 0000 00DC       // save the data
                 ; 0000 00DD       enter_array[day_index] = number_of_enters;
                 _0x2E:
0001ed 940e 0784 	CALL SUBOPT_0xB
0001ef 940e 0789 	CALL SUBOPT_0xC
0001f1 0fae      	ADD  R26,R30
0001f2 1fbf      	ADC  R27,R31
0001f3 01f2      	MOVW R30,R4
0001f4 940e 08d6 	CALL __EEPROMWRW
                 ; 0000 00DE       exit_array[day_index] = number_of_exits;
0001f6 940e 0784 	CALL SUBOPT_0xB
0001f8 940e 079e 	CALL SUBOPT_0xF
0001fa 0fae      	ADD  R26,R30
0001fb 1fbf      	ADC  R27,R31
0001fc 01f3      	MOVW R30,R6
0001fd 940e 08d6 	CALL __EEPROMWRW
                 ; 0000 00DF 
                 ; 0000 00E0       while (hour == 0 & minute == 0 & second == 0)
                 _0x2F:
0001ff 940e 0771 	CALL SUBOPT_0xA
000201 f039      	BREQ _0x31
                 ; 0000 00E1       {
                 ; 0000 00E2         lcd_clear();
000202 940e 068a 	CALL _lcd_clear
                 ; 0000 00E3         lcd_putsf("saving data");
                +
000204 e8a7     +LDI R26 , LOW ( 2 * _0x0 + ( 11 ) )
000205 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 11 ) )
                 	__POINTW2FN _0x0,11
000206 940e 06c7 	CALL _lcd_putsf
                 ; 0000 00E4       }
000208 cff6      	RJMP _0x2F
                 _0x31:
                 ; 0000 00E5     }
                 ; 0000 00E6 
                 ; 0000 00E7     sprintf(line, "C=%d %d/%d/%d", capacity, year, month, day);
                 _0x29:
000209 01fe      	MOVW R30,R28
00020a 9671      	ADIW R30,17
00020b 93fa      	ST   -Y,R31
00020c 93ea      	ST   -Y,R30
                +
00020d e9e3     +LDI R30 , LOW ( 2 * _0x0 + ( 23 ) )
00020e e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 23 ) )
                 	__POINTW1FN _0x0,23
00020f 93fa      	ST   -Y,R31
000210 93ea      	ST   -Y,R30
000211 2de9      	MOV  R30,R9
000212 940e 07a4 	CALL SUBOPT_0x10
000214 940e 07a9 	CALL SUBOPT_0x11
000216 940e 07b2 	CALL SUBOPT_0x12
000218 940e 07bb 	CALL SUBOPT_0x13
00021a e180      	LDI  R24,16
00021b 940e 0614 	CALL _sprintf
00021d 9664      	ADIW R28,20
                 ; 0000 00E8     sprintf(line2, "%d:%d:%d  R=%d ", hour, minute, second, reserved);
00021e 940e 07c4 	CALL SUBOPT_0x14
                +
000220 eae1     +LDI R30 , LOW ( 2 * _0x0 + ( 37 ) )
000221 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 37 ) )
                 	__POINTW1FN _0x0,37
000222 940e 07c8 	CALL SUBOPT_0x15
000224 01f6      	MOVW R30,R12
000225 940e 07d3 	CALL SUBOPT_0x16
000227 01f5      	MOVW R30,R10
000228 940e 07d3 	CALL SUBOPT_0x16
00022a 2de8      	MOV  R30,R8
00022b 940e 07a4 	CALL SUBOPT_0x10
00022d e180      	LDI  R24,16
00022e 940e 0614 	CALL _sprintf
000230 9664      	ADIW R28,20
                 ; 0000 00E9     lcd_clear();
000231 940e 068a 	CALL _lcd_clear
                 ; 0000 00EA     lcd_puts(line);
000233 01de      	MOVW R26,R28
000234 9651      	ADIW R26,17
000235 940e 06b8 	CALL _lcd_puts
                 ; 0000 00EB     lcd_gotoxy(0, 1);
000237 940e 076c 	CALL SUBOPT_0x9
                 ; 0000 00EC     lcd_puts(line2);
000239 940e 07d8 	CALL SUBOPT_0x17
                 ; 0000 00ED     delay_ms(25);
00023b 940e 07db 	CALL SUBOPT_0x18
                 ; 0000 00EE   }
00023d cf81      	RJMP _0x22
                 ; 0000 00EF }
                 _0x32:
00023e cfff      	RJMP _0x32
                 ; .FEND
                 ;
                 ;/// Functions 4 menu and...
                 ;char menu(void)
                 ; 0000 00F3 {
                 _menu:
                 ; .FSTART _menu
                 ; 0000 00F4   char choice = 0;
                 ; 0000 00F5   while (1)
00023f 931a      	ST   -Y,R17
                 ;	choice -> R17
000240 e010      	LDI  R17,0
                 _0x33:
                 ; 0000 00F6   {
                 ; 0000 00F7     // iterate through menu items
                 ; 0000 00F8     if (choice == 0)
000241 3010      	CPI  R17,0
000242 f431      	BRNE _0x36
                 ; 0000 00F9     {
                 ; 0000 00FA       lcd_clear();
000243 940e 068a 	CALL _lcd_clear
                 ; 0000 00FB       lcd_putsf("Time Setting >>");
                +
000245 eba1     +LDI R26 , LOW ( 2 * _0x0 + ( 53 ) )
000246 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 53 ) )
                 	__POINTW2FN _0x0,53
000247 940e 06c7 	CALL _lcd_putsf
                 ; 0000 00FC     }
                 ; 0000 00FD     if (choice == 1)
                 _0x36:
000249 3011      	CPI  R17,1
00024a f431      	BRNE _0x37
                 ; 0000 00FE     {
                 ; 0000 00FF       lcd_clear();
00024b 940e 068a 	CALL _lcd_clear
                 ; 0000 0100       lcd_putsf("IN&OUT Search >>");
                +
00024d eca1     +LDI R26 , LOW ( 2 * _0x0 + ( 69 ) )
00024e e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 69 ) )
                 	__POINTW2FN _0x0,69
00024f 940e 06c7 	CALL _lcd_putsf
                 ; 0000 0101     }
                 ; 0000 0102     if (choice == 2)
                 _0x37:
000251 3012      	CPI  R17,2
000252 f431      	BRNE _0x38
                 ; 0000 0103     {
                 ; 0000 0104       lcd_clear();
000253 940e 068a 	CALL _lcd_clear
                 ; 0000 0105       lcd_putsf("Reserve_Park >>");
                +
000255 eda2     +LDI R26 , LOW ( 2 * _0x0 + ( 86 ) )
000256 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 86 ) )
                 	__POINTW2FN _0x0,86
000257 940e 06c7 	CALL _lcd_putsf
                 ; 0000 0106     }
                 ; 0000 0107     if (choice == 3)
                 _0x38:
000259 3013      	CPI  R17,3
00025a f431      	BRNE _0x39
                 ; 0000 0108     {
                 ; 0000 0109       lcd_clear();
00025b 940e 068a 	CALL _lcd_clear
                 ; 0000 010A       lcd_putsf("Set date >>");
                +
00025d eea2     +LDI R26 , LOW ( 2 * _0x0 + ( 102 ) )
00025e e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 102 ) )
                 	__POINTW2FN _0x0,102
00025f 940e 06c7 	CALL _lcd_putsf
                 ; 0000 010B     }
                 ; 0000 010C     if (PINA .3 == 0) // next item
                 _0x39:
000261 99cb      	SBIC 0x19,3
000262 c006      	RJMP _0x3A
                 ; 0000 010D     {
                 ; 0000 010E       while (PINA .3 == 0)
                 _0x3B:
000263 9bcb      	SBIS 0x19,3
                 ; 0000 010F         ;
000264 cffe      	RJMP _0x3B
                 ; 0000 0110       choice++;
000265 5f1f      	SUBI R17,-1
                 ; 0000 0111       if (choice >= 4)
000266 3014      	CPI  R17,4
000267 f008      	BRLO _0x3E
                 ; 0000 0112         choice = 0;
000268 e010      	LDI  R17,LOW(0)
                 ; 0000 0113     }
                 _0x3E:
                 ; 0000 0114 
                 ; 0000 0115     if (PINA .4 == 0) // close menu
                 _0x3A:
000269 99cc      	SBIC 0x19,4
00026a c004      	RJMP _0x3F
                 ; 0000 0116     {                 // Back
                 ; 0000 0117       while (PINA .4 == 0)
                 _0x40:
00026b 9bcc      	SBIS 0x19,4
                 ; 0000 0118         ;
00026c cffe      	RJMP _0x40
                 ; 0000 0119       return 0;
00026d e0e0      	LDI  R30,LOW(0)
00026e c025      	RJMP _0x2080008
                 ; 0000 011A     }
                 ; 0000 011B 
                 ; 0000 011C     // choose time_setting
                 ; 0000 011D     if (PINA .2 == 0 & choice == 0)
                 _0x3F:
00026f 940e 07df 	CALL SUBOPT_0x19
000271 940e 07e8 	CALL SUBOPT_0x1A
000273 f019      	BREQ _0x43
                 ; 0000 011E     {
                 ; 0000 011F       while (PINA .2 == 0)
                 _0x44:
000274 9bca      	SBIS 0x19,2
                 ; 0000 0120         ;
000275 cffe      	RJMP _0x44
                 ; 0000 0121       set_time();
000276 d01f      	RCALL _set_time
                 ; 0000 0122     }
                 ; 0000 0123 
                 ; 0000 0124     // choose in_out_search
                 ; 0000 0125     if (PINA .2 == 0 & choice == 1)
                 _0x43:
000277 940e 07df 	CALL SUBOPT_0x19
000279 940e 07ed 	CALL SUBOPT_0x1B
00027b f019      	BREQ _0x47
                 ; 0000 0126     {
                 ; 0000 0127       while (PINA .2 == 0)
                 _0x48:
00027c 9bca      	SBIS 0x19,2
                 ; 0000 0128         ;
00027d cffe      	RJMP _0x48
                 ; 0000 0129       in_out_search();
00027e d090      	RCALL _in_out_search
                 ; 0000 012A     }
                 ; 0000 012B 
                 ; 0000 012C     // choose reserve
                 ; 0000 012D     if (PINA .2 == 0 & choice == 2)
                 _0x47:
00027f 940e 07df 	CALL SUBOPT_0x19
000281 940e 07f2 	CALL SUBOPT_0x1C
000283 f019      	BREQ _0x4B
                 ; 0000 012E     {
                 ; 0000 012F       while (PINA .2 == 0)
                 _0x4C:
000284 9bca      	SBIS 0x19,2
                 ; 0000 0130         ;
000285 cffe      	RJMP _0x4C
                 ; 0000 0131       reserve_park();
000286 d13e      	RCALL _reserve_park
                 ; 0000 0132     }
                 ; 0000 0133 
                 ; 0000 0134     // choose set date
                 ; 0000 0135     if (PINA .2 == 0 & choice == 3)
                 _0x4B:
000287 940e 07df 	CALL SUBOPT_0x19
000289 e0e3      	LDI  R30,LOW(3)
00028a 940e 08ae 	CALL __EQB12
00028c 21e0      	AND  R30,R0
00028d f019      	BREQ _0x4F
                 ; 0000 0136     {
                 ; 0000 0137       while (PINA .2 == 0)
                 _0x50:
00028e 9bca      	SBIS 0x19,2
                 ; 0000 0138         ;
00028f cffe      	RJMP _0x50
                 ; 0000 0139       set_date();
000290 d166      	RCALL _set_date
                 ; 0000 013A     }
                 ; 0000 013B 
                 ; 0000 013C     delay_ms(25);
                 _0x4F:
000291 940e 07db 	CALL SUBOPT_0x18
                 ; 0000 013D   }
000293 cfad      	RJMP _0x33
                 ; 0000 013E }
                 _0x2080008:
000294 9119      	LD   R17,Y+
000295 9508      	RET
                 ; .FEND
                 ;
                 ;// Time setting
                 ;char set_time(void)
                 ; 0000 0142 {
                 _set_time:
                 ; .FSTART _set_time
000296 92ff      	PUSH R15
                 ; 0000 0143   bit choice = 0;
                 ; 0000 0144   char line[17];
                 ; 0000 0145   while (1)
000297 9761      	SBIW R28,17
                 ;	choice -> R15.0
                 ;	line -> Y+0
000298 24ff      	CLR  R15
                 _0x53:
                 ; 0000 0146   {
                 ; 0000 0147     if (choice == 0)
000299 fcf0      	SBRC R15,0
00029a c00b      	RJMP _0x56
                 ; 0000 0148     {
                 ; 0000 0149       sprintf(line, "Set min=%d  >", minute);
00029b 940e 07c4 	CALL SUBOPT_0x14
                +
00029d eeee     +LDI R30 , LOW ( 2 * _0x0 + ( 114 ) )
00029e e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 114 ) )
                 	__POINTW1FN _0x0,114
00029f 93fa      	ST   -Y,R31
0002a0 93ea      	ST   -Y,R30
0002a1 01f6      	MOVW R30,R12
0002a2 940e 07d3 	CALL SUBOPT_0x16
0002a4 940e 07f7 	CALL SUBOPT_0x1D
                 ; 0000 014A       lcd_clear();
                 ; 0000 014B       lcd_puts(line);
                 ; 0000 014C     }
                 ; 0000 014D 
                 ; 0000 014E     if (choice == 1)
                 _0x56:
0002a6 fef0      	SBRS R15,0
0002a7 c008      	RJMP _0x57
                 ; 0000 014F     {
                 ; 0000 0150       sprintf(line, "Set hour=%d  >", hour);
0002a8 940e 07c4 	CALL SUBOPT_0x14
                +
0002aa efec     +LDI R30 , LOW ( 2 * _0x0 + ( 128 ) )
0002ab e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 128 ) )
                 	__POINTW1FN _0x0,128
0002ac 940e 07c8 	CALL SUBOPT_0x15
0002ae 940e 07f7 	CALL SUBOPT_0x1D
                 ; 0000 0151       lcd_clear();
                 ; 0000 0152       lcd_puts(line);
                 ; 0000 0153     }
                 ; 0000 0154 
                 ; 0000 0155     if (PINA .1 == 0 & choice == 0)
                 _0x57:
0002b0 940e 07fe 	CALL SUBOPT_0x1E
0002b2 940e 07e8 	CALL SUBOPT_0x1A
0002b4 f061      	BREQ _0x58
                 ; 0000 0156     { // UP     min
                 ; 0000 0157       while (PINA .1 == 0)
                 _0x59:
0002b5 9bc9      	SBIS 0x19,1
                 ; 0000 0158         ;
0002b6 cffe      	RJMP _0x59
                 ; 0000 0159       minute++;
0002b7 01f6      	MOVW R30,R12
0002b8 9631      	ADIW R30,1
0002b9 016f      	MOVW R12,R30
                 ; 0000 015A       if (minute > 59)
0002ba e3eb      	LDI  R30,LOW(59)
0002bb e0f0      	LDI  R31,HIGH(59)
0002bc 15ec      	CP   R30,R12
0002bd 05fd      	CPC  R31,R13
0002be f410      	BRSH _0x5C
                 ; 0000 015B         minute = 0;
0002bf 24cc      	CLR  R12
0002c0 24dd      	CLR  R13
                 ; 0000 015C     }
                 _0x5C:
                 ; 0000 015D 
                 ; 0000 015E     if (PINA .0 == 0 & choice == 0)
                 _0x58:
0002c1 940e 0809 	CALL SUBOPT_0x1F
0002c3 940e 07e8 	CALL SUBOPT_0x1A
0002c5 f059      	BREQ _0x5D
                 ; 0000 015F     { // DOWN    min
                 ; 0000 0160       while (PINA .0 == 0)
                 _0x5E:
0002c6 9bc8      	SBIS 0x19,0
                 ; 0000 0161         ;
0002c7 cffe      	RJMP _0x5E
                 ; 0000 0162       if (minute == 0)
0002c8 2c0c      	MOV  R0,R12
0002c9 280d      	OR   R0,R13
0002ca f419      	BRNE _0x61
                 ; 0000 0163         minute = 59;
0002cb e3eb      	LDI  R30,LOW(59)
0002cc e0f0      	LDI  R31,HIGH(59)
0002cd c002      	RJMP _0xDA
                 ; 0000 0164       else
                 _0x61:
                 ; 0000 0165         minute--;
0002ce 01f6      	MOVW R30,R12
0002cf 9731      	SBIW R30,1
                 _0xDA:
0002d0 016f      	MOVW R12,R30
                 ; 0000 0166     }
                 ; 0000 0167 
                 ; 0000 0168     if (PINA .1 == 0 & choice == 1)
                 _0x5D:
0002d1 940e 07fe 	CALL SUBOPT_0x1E
0002d3 940e 07ed 	CALL SUBOPT_0x1B
0002d5 f079      	BREQ _0x63
                 ; 0000 0169     { // UP    hour
                 ; 0000 016A       while (PINA .1 == 0)
                 _0x64:
0002d6 9bc9      	SBIS 0x19,1
                 ; 0000 016B         ;
0002d7 cffe      	RJMP _0x64
                 ; 0000 016C       hour++;
0002d8 e6a0      	LDI  R26,LOW(_hour)
0002d9 e0b2      	LDI  R27,HIGH(_hour)
0002da 940e 0814 	CALL SUBOPT_0x20
                 ; 0000 016D       if (hour > 23)
0002dc 940e 0723 	CALL SUBOPT_0x0
0002de 9758      	SBIW R26,24
0002df f028      	BRLO _0x67
                 ; 0000 016E         hour = 0;
0002e0 e0e0      	LDI  R30,LOW(0)
0002e1 93e0 0260 	STS  _hour,R30
0002e3 93e0 0261 	STS  _hour+1,R30
                 ; 0000 016F     }
                 _0x67:
                 ; 0000 0170 
                 ; 0000 0171     if (PINA .0 == 0 & choice == 1)
                 _0x63:
0002e5 940e 0809 	CALL SUBOPT_0x1F
0002e7 940e 07ed 	CALL SUBOPT_0x1B
0002e9 f099      	BREQ _0x68
                 ; 0000 0172     { // DOWN    hour
                 ; 0000 0173       while (PINA .0 == 0)
                 _0x69:
0002ea 9bc8      	SBIS 0x19,0
                 ; 0000 0174         ;
0002eb cffe      	RJMP _0x69
                 ; 0000 0175       if (hour == 0)
0002ec 91e0 0260 	LDS  R30,_hour
0002ee 91f0 0261 	LDS  R31,_hour+1
0002f0 9730      	SBIW R30,0
0002f1 f439      	BRNE _0x6C
                 ; 0000 0176         hour = 23;
0002f2 e1e7      	LDI  R30,LOW(23)
0002f3 e0f0      	LDI  R31,HIGH(23)
0002f4 93e0 0260 	STS  _hour,R30
0002f6 93f0 0261 	STS  _hour+1,R31
                 ; 0000 0177       else
0002f8 c004      	RJMP _0x6D
                 _0x6C:
                 ; 0000 0178         hour--;
0002f9 e6a0      	LDI  R26,LOW(_hour)
0002fa e0b2      	LDI  R27,HIGH(_hour)
0002fb 940e 081a 	CALL SUBOPT_0x21
                 ; 0000 0179     }
                 _0x6D:
                 ; 0000 017A 
                 ; 0000 017B     if (PINA .3 == 0)
                 _0x68:
0002fd 99cb      	SBIC 0x19,3
0002fe c004      	RJMP _0x6E
                 ; 0000 017C     { // NEXT
                 ; 0000 017D       while (PINA .3 == 0)
                 _0x6F:
0002ff 9bcb      	SBIS 0x19,3
                 ; 0000 017E         ;
000300 cffe      	RJMP _0x6F
                 ; 0000 017F       choice = !choice;
000301 e0e1      	LDI  R30,LOW(1)
000302 26fe      	EOR  R15,R30
                 ; 0000 0180     }
                 ; 0000 0181 
                 ; 0000 0182     if (PINA .4 == 0)
                 _0x6E:
000303 99cc      	SBIC 0x19,4
000304 c004      	RJMP _0x72
                 ; 0000 0183     { // Back
                 ; 0000 0184       while (PINA .4 == 0)
                 _0x73:
000305 9bcc      	SBIS 0x19,4
                 ; 0000 0185         ;
000306 cffe      	RJMP _0x73
                 ; 0000 0186       return 0;
000307 e0e0      	LDI  R30,LOW(0)
000308 c003      	RJMP _0x2080007
                 ; 0000 0187     }
                 ; 0000 0188 
                 ; 0000 0189     delay_ms(25);
                 _0x72:
000309 940e 07db 	CALL SUBOPT_0x18
                 ; 0000 018A   }
00030b cf8d      	RJMP _0x53
                 ; 0000 018B }
                 _0x2080007:
00030c 9661      	ADIW R28,17
00030d 90ff      	POP  R15
00030e 9508      	RET
                 ; .FEND
                 ;
                 ;/// IN&OUT Search
                 ;char in_out_search(void)
                 ; 0000 018F {
                 _in_out_search:
                 ; .FSTART _in_out_search
00030f 92ff      	PUSH R15
                 ; 0000 0190   char line[17], line2[17];
                 ; 0000 0191   int temp_year = year, temp_month = month, temp_day = day;
                 ; 0000 0192   bit bit_m = 0;
                 ; 0000 0193 
                 ; 0000 0194   while (1)
000310 97a2      	SBIW R28,34
000311 940e 08ef 	CALL __SAVELOCR6
                 ;	line -> Y+23
                 ;	line2 -> Y+6
                 ;	temp_year -> R16,R17
                 ;	temp_month -> R18,R19
                 ;	temp_day -> R20,R21
                 ;	bit_m -> R15.0
000313 24ff      	CLR  R15
                +
000314 9100 0266+LDS R16 , 0 + ( _year )
000316 9110 0267+LDS R17 , 0 + ( _year ) + 1
                 	__GETWRMN 16,17,0,_year
                +
000318 9120 0264+LDS R18 , 0 + ( _month )
00031a 9130 0265+LDS R19 , 0 + ( _month ) + 1
                 	__GETWRMN 18,19,0,_month
                +
00031c 9140 0262+LDS R20 , 0 + ( _day )
00031e 9150 0263+LDS R21 , 0 + ( _day ) + 1
                 	__GETWRMN 20,21,0,_day
                 _0x76:
                 ; 0000 0195   {
                 ; 0000 0196     // UP
                 ; 0000 0197     if (PINA .1 == 0)
000320 99c9      	SBIC 0x19,1
000321 c029      	RJMP _0x79
                 ; 0000 0198     {
                 ; 0000 0199       while (PINA .1 == 0)
                 _0x7A:
000322 9bc9      	SBIS 0x19,1
                 ; 0000 019A         ;
000323 cffe      	RJMP _0x7A
                 ; 0000 019B       temp_day++;
                +
000324 5f4f     +SUBI R20 , LOW ( - 1 )
000325 4f5f     +SBCI R21 , HIGH ( - 1 )
                 	__ADDWRN 20,21,1
                 ; 0000 019C 
                 ; 0000 019D       // logic of day, month
                 ; 0000 019E       if (temp_month <= 6)
                +
000326 3027     +CPI R18 , LOW ( 7 )
000327 e0e0     +LDI R30 , HIGH ( 7 )
000328 073e     +CPC R19 , R30
                 	__CPWRN 18,19,7
000329 f43c      	BRGE _0x7D
                 ; 0000 019F       {
                 ; 0000 01A0         if (temp_day > 31)
                +
00032a 3240     +CPI R20 , LOW ( 32 )
00032b e0e0     +LDI R30 , HIGH ( 32 )
00032c 075e     +CPC R21 , R30
                 	__CPWRN 20,21,32
00032d f014      	BRLT _0x7E
                 ; 0000 01A1         {
                 ; 0000 01A2           temp_day = 1;
00032e 940e 0820 	CALL SUBOPT_0x22
                 ; 0000 01A3           temp_month++;
                 ; 0000 01A4         }
                 ; 0000 01A5       }
                 _0x7E:
                 ; 0000 01A6       else
000330 c012      	RJMP _0x7F
                 _0x7D:
                 ; 0000 01A7       {
                 ; 0000 01A8         if (temp_month == 12)
000331 e0ec      	LDI  R30,LOW(12)
000332 e0f0      	LDI  R31,HIGH(12)
000333 17e2      	CP   R30,R18
000334 07f3      	CPC  R31,R19
000335 f439      	BRNE _0x80
                 ; 0000 01A9         {
                 ; 0000 01AA           if (temp_day > 29)
                +
000336 314e     +CPI R20 , LOW ( 30 )
000337 e0e0     +LDI R30 , HIGH ( 30 )
000338 075e     +CPC R21 , R30
                 	__CPWRN 20,21,30
000339 f014      	BRLT _0x81
                 ; 0000 01AB           {
                 ; 0000 01AC             temp_day = 1;
00033a 940e 0820 	CALL SUBOPT_0x22
                 ; 0000 01AD             temp_month++;
                 ; 0000 01AE           }
                 ; 0000 01AF         }
                 _0x81:
                 ; 0000 01B0         else
00033c c006      	RJMP _0x82
                 _0x80:
                 ; 0000 01B1         {
                 ; 0000 01B2           if (temp_day > 30)
                +
00033d 314f     +CPI R20 , LOW ( 31 )
00033e e0e0     +LDI R30 , HIGH ( 31 )
00033f 075e     +CPC R21 , R30
                 	__CPWRN 20,21,31
000340 f014      	BRLT _0x83
                 ; 0000 01B3           {
                 ; 0000 01B4             temp_day = 1;
000341 940e 0820 	CALL SUBOPT_0x22
                 ; 0000 01B5             temp_month++;
                 ; 0000 01B6           }
                 ; 0000 01B7         }
                 _0x83:
                 _0x82:
                 ; 0000 01B8       }
                 _0x7F:
                 ; 0000 01B9 
                 ; 0000 01BA       // logic of year
                 ; 0000 01BB       if (temp_month > 12)
                +
000343 302d     +CPI R18 , LOW ( 13 )
000344 e0e0     +LDI R30 , HIGH ( 13 )
000345 073e     +CPC R19 , R30
                 	__CPWRN 18,19,13
000346 f024      	BRLT _0x84
                 ; 0000 01BC       {
                 ; 0000 01BD         temp_month = 1;
                +
000347 e021     +LDI R18 , LOW ( 1 )
000348 e030     +LDI R19 , HIGH ( 1 )
                 	__GETWRN 18,19,1
                 ; 0000 01BE         temp_year++;
                +
000349 5f0f     +SUBI R16 , LOW ( - 1 )
00034a 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
                 ; 0000 01BF       }
                 ; 0000 01C0     }
                 _0x84:
                 ; 0000 01C1 
                 ; 0000 01C2     // DOWN
                 ; 0000 01C3     if (PINA .0 == 0)
                 _0x79:
00034b 99c8      	SBIC 0x19,0
00034c c031      	RJMP _0x85
                 ; 0000 01C4     {
                 ; 0000 01C5       while (PINA .0 == 0)
                 _0x86:
00034d 9bc8      	SBIS 0x19,0
                 ; 0000 01C6         ;
00034e cffe      	RJMP _0x86
                 ; 0000 01C7 
                 ; 0000 01C8       if (temp_day == 1)
00034f e0e1      	LDI  R30,LOW(1)
000350 e0f0      	LDI  R31,HIGH(1)
000351 17e4      	CP   R30,R20
000352 07f5      	CPC  R31,R21
000353 f541      	BRNE _0x89
                 ; 0000 01C9       {
                 ; 0000 01CA         if (temp_month == 1)
000354 17e2      	CP   R30,R18
000355 07f3      	CPC  R31,R19
000356 f429      	BRNE _0x8A
                 ; 0000 01CB         {
                 ; 0000 01CC           temp_month = 12;
                +
000357 e02c     +LDI R18 , LOW ( 12 )
000358 e030     +LDI R19 , HIGH ( 12 )
                 	__GETWRN 18,19,12
                 ; 0000 01CD           temp_year--;
                +
000359 5001     +SUBI R16 , LOW ( 1 )
00035a 4010     +SBCI R17 , HIGH ( 1 )
                 	__SUBWRN 16,17,1
                 ; 0000 01CE         }
                 ; 0000 01CF         else
00035b c002      	RJMP _0x8B
                 _0x8A:
                 ; 0000 01D0           temp_month--;
                +
00035c 5021     +SUBI R18 , LOW ( 1 )
00035d 4030     +SBCI R19 , HIGH ( 1 )
                 	__SUBWRN 18,19,1
                 ; 0000 01D1 
                 ; 0000 01D2         if (1 <= temp_month && temp_month <= 6)
                 _0x8B:
                +
00035e 3021     +CPI R18 , LOW ( 1 )
00035f e0e0     +LDI R30 , HIGH ( 1 )
000360 073e     +CPC R19 , R30
                 	__CPWRN 18,19,1
000361 f024      	BRLT _0x8D
                +
000362 3027     +CPI R18 , LOW ( 7 )
000363 e0e0     +LDI R30 , HIGH ( 7 )
000364 073e     +CPC R19 , R30
                 	__CPWRN 18,19,7
000365 f00c      	BRLT _0x8E
                 _0x8D:
000366 c002      	RJMP _0x8C
                 _0x8E:
                 ; 0000 01D3           temp_day = 31;
                +
000367 e14f     +LDI R20 , LOW ( 31 )
000368 e050     +LDI R21 , HIGH ( 31 )
                 	__GETWRN 20,21,31
                 ; 0000 01D4         if (7 <= temp_month && temp_month <= 11)
                 _0x8C:
                +
000369 3027     +CPI R18 , LOW ( 7 )
00036a e0e0     +LDI R30 , HIGH ( 7 )
00036b 073e     +CPC R19 , R30
                 	__CPWRN 18,19,7
00036c f024      	BRLT _0x90
                +
00036d 302c     +CPI R18 , LOW ( 12 )
00036e e0e0     +LDI R30 , HIGH ( 12 )
00036f 073e     +CPC R19 , R30
                 	__CPWRN 18,19,12
000370 f00c      	BRLT _0x91
                 _0x90:
000371 c002      	RJMP _0x8F
                 _0x91:
                 ; 0000 01D5           temp_day = 30;
                +
000372 e14e     +LDI R20 , LOW ( 30 )
000373 e050     +LDI R21 , HIGH ( 30 )
                 	__GETWRN 20,21,30
                 ; 0000 01D6         if (temp_month == 12)
                 _0x8F:
000374 e0ec      	LDI  R30,LOW(12)
000375 e0f0      	LDI  R31,HIGH(12)
000376 17e2      	CP   R30,R18
000377 07f3      	CPC  R31,R19
000378 f411      	BRNE _0x92
                 ; 0000 01D7           temp_day = 29;
                +
000379 e14d     +LDI R20 , LOW ( 29 )
00037a e050     +LDI R21 , HIGH ( 29 )
                 	__GETWRN 20,21,29
                 ; 0000 01D8       }
                 _0x92:
                 ; 0000 01D9       else
00037b c002      	RJMP _0x93
                 _0x89:
                 ; 0000 01DA         temp_day--;
                +
00037c 5041     +SUBI R20 , LOW ( 1 )
00037d 4050     +SBCI R21 , HIGH ( 1 )
                 	__SUBWRN 20,21,1
                 ; 0000 01DB     }
                 _0x93:
                 ; 0000 01DC 
                 ; 0000 01DD     sprintf(line, "%d/%d/%d", temp_year, temp_month, temp_day);
                 _0x85:
00037e 01fe      	MOVW R30,R28
00037f 9677      	ADIW R30,23
000380 93fa      	ST   -Y,R31
000381 93ea      	ST   -Y,R30
                +
000382 e9e8     +LDI R30 , LOW ( 2 * _0x0 + ( 28 ) )
000383 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 28 ) )
                 	__POINTW1FN _0x0,28
000384 93fa      	ST   -Y,R31
000385 93ea      	ST   -Y,R30
000386 01f8      	MOVW R30,R16
000387 940e 0825 	CALL SUBOPT_0x23
000389 01f9      	MOVW R30,R18
00038a 940e 0825 	CALL SUBOPT_0x23
00038c 01fa      	MOVW R30,R20
00038d 940e 0825 	CALL SUBOPT_0x23
00038f e08c      	LDI  R24,12
000390 940e 0614 	CALL _sprintf
000392 9660      	ADIW R28,16
                 ; 0000 01DE     sprintf(line2, "in=%d out=%d", enter_array[day_index], exit_array[day_index]);
000393 01fe      	MOVW R30,R28
000394 9636      	ADIW R30,6
000395 93fa      	ST   -Y,R31
000396 93ea      	ST   -Y,R30
                +
000397 e0eb     +LDI R30 , LOW ( 2 * _0x0 + ( 143 ) )
000398 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 143 ) )
                 	__POINTW1FN _0x0,143
000399 93fa      	ST   -Y,R31
00039a 93ea      	ST   -Y,R30
00039b 940e 0784 	CALL SUBOPT_0xB
00039d 940e 0789 	CALL SUBOPT_0xC
00039f 940e 082a 	CALL SUBOPT_0x24
0003a1 940e 0784 	CALL SUBOPT_0xB
0003a3 940e 079e 	CALL SUBOPT_0xF
0003a5 940e 082a 	CALL SUBOPT_0x24
0003a7 e088      	LDI  R24,8
0003a8 940e 0614 	CALL _sprintf
0003aa 962c      	ADIW R28,12
                 ; 0000 01DF 
                 ; 0000 01E0     lcd_clear();
0003ab 940e 068a 	CALL _lcd_clear
                 ; 0000 01E1     lcd_puts(line);
0003ad 01de      	MOVW R26,R28
0003ae 9657      	ADIW R26,23
0003af 940e 06b8 	CALL _lcd_puts
                 ; 0000 01E2     lcd_gotoxy(0, 1);
0003b1 940e 076c 	CALL SUBOPT_0x9
                 ; 0000 01E3     lcd_puts(line2);
0003b3 01de      	MOVW R26,R28
0003b4 9616      	ADIW R26,6
0003b5 940e 06b8 	CALL _lcd_puts
                 ; 0000 01E4 
                 ; 0000 01E5     // Back
                 ; 0000 01E6     if (PINA .4 == 0)
0003b7 99cc      	SBIC 0x19,4
0003b8 c004      	RJMP _0x94
                 ; 0000 01E7     {
                 ; 0000 01E8       while (PINA .4 == 0)
                 _0x95:
0003b9 9bcc      	SBIS 0x19,4
                 ; 0000 01E9         ;
0003ba cffe      	RJMP _0x95
                 ; 0000 01EA       return 0;
0003bb e0e0      	LDI  R30,LOW(0)
0003bc c003      	RJMP _0x2080006
                 ; 0000 01EB     }
                 ; 0000 01EC     delay_ms(25);
                 _0x94:
0003bd 940e 07db 	CALL SUBOPT_0x18
                 ; 0000 01ED   }
0003bf cf60      	RJMP _0x76
                 ; 0000 01EE }
                 _0x2080006:
0003c0 940e 08f6 	CALL __LOADLOCR6
0003c2 96a8      	ADIW R28,40
0003c3 90ff      	POP  R15
0003c4 9508      	RET
                 ; .FEND
                 ;
                 ;// reserve_park
                 ;char reserve_park(void)
                 ; 0000 01F2 {
                 _reserve_park:
                 ; .FSTART _reserve_park
                 ; 0000 01F3   char line[17];
                 ; 0000 01F4 
                 ; 0000 01F5   while (1)
0003c5 9761      	SBIW R28,17
                 ;	line -> Y+0
                 _0x98:
                 ; 0000 01F6   {
                 ; 0000 01F7     sprintf(line, "Reserved=%d", reserved);
0003c6 940e 07c4 	CALL SUBOPT_0x14
                +
0003c8 e1e8     +LDI R30 , LOW ( 2 * _0x0 + ( 156 ) )
0003c9 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 156 ) )
                 	__POINTW1FN _0x0,156
0003ca 93fa      	ST   -Y,R31
0003cb 93ea      	ST   -Y,R30
0003cc 2de8      	MOV  R30,R8
0003cd 940e 07a4 	CALL SUBOPT_0x10
0003cf 940e 07f7 	CALL SUBOPT_0x1D
                 ; 0000 01F8     lcd_clear();
                 ; 0000 01F9     lcd_puts(line);
                 ; 0000 01FA 
                 ; 0000 01FB     if (PINA .1 == 0)
0003d1 99c9      	SBIC 0x19,1
0003d2 c004      	RJMP _0x9B
                 ; 0000 01FC     {
                 ; 0000 01FD       while (PINA .1 == 0)
                 _0x9C:
0003d3 9bc9      	SBIS 0x19,1
                 ; 0000 01FE         ;
0003d4 cffe      	RJMP _0x9C
                 ; 0000 01FF       reserved++;
0003d5 9483      	INC  R8
                 ; 0000 0200       capacity--;
0003d6 949a      	DEC  R9
                 ; 0000 0201     }
                 ; 0000 0202 
                 ; 0000 0203     if (reserved >= init_capacity)
                 _0x9B:
0003d7 2da8      	MOV  R26,R8
0003d8 e0ea      	LDI  R30,LOW(10)
0003d9 e0b0      	LDI  R27,0
0003da fda7      	SBRC R26,7
0003db efbf      	SER  R27
0003dc e0f0      	LDI  R31,0
0003dd 17ae      	CP   R26,R30
0003de 07bf      	CPC  R27,R31
0003df f014      	BRLT _0x9F
                 ; 0000 0204     {
                 ; 0000 0205       reserved = init_capacity - 1;
0003e0 e0e9      	LDI  R30,LOW(9)
0003e1 2e8e      	MOV  R8,R30
                 ; 0000 0206     }
                 ; 0000 0207 
                 ; 0000 0208     if (PINA .0 == 0)
                 _0x9F:
0003e2 99c8      	SBIC 0x19,0
0003e3 c004      	RJMP _0xA0
                 ; 0000 0209     {
                 ; 0000 020A       while (PINA .0 == 0)
                 _0xA1:
0003e4 9bc8      	SBIS 0x19,0
                 ; 0000 020B         ;
0003e5 cffe      	RJMP _0xA1
                 ; 0000 020C       reserved--;
0003e6 948a      	DEC  R8
                 ; 0000 020D       capacity++;
0003e7 9493      	INC  R9
                 ; 0000 020E     }
                 ; 0000 020F 
                 ; 0000 0210     if (reserved <= 0)
                 _0xA0:
0003e8 e0e0      	LDI  R30,LOW(0)
0003e9 15e8      	CP   R30,R8
0003ea f00c      	BRLT _0xA4
                 ; 0000 0211     {
                 ; 0000 0212       reserved = 0;
0003eb 2488      	CLR  R8
                 ; 0000 0213     }
                 ; 0000 0214 
                 ; 0000 0215     if (PINA .4 == 0)
                 _0xA4:
0003ec 99cc      	SBIC 0x19,4
0003ed c004      	RJMP _0xA5
                 ; 0000 0216     { // Back
                 ; 0000 0217       while (PINA .4 == 0)
                 _0xA6:
0003ee 9bcc      	SBIS 0x19,4
                 ; 0000 0218         ;
0003ef cffe      	RJMP _0xA6
                 ; 0000 0219       return 0;
0003f0 e0e0      	LDI  R30,LOW(0)
0003f1 c003      	RJMP _0x2080005
                 ; 0000 021A     }
                 ; 0000 021B     delay_ms(25);
                 _0xA5:
0003f2 940e 07db 	CALL SUBOPT_0x18
                 ; 0000 021C   }
0003f4 cfd1      	RJMP _0x98
                 ; 0000 021D }
                 _0x2080005:
0003f5 9661      	ADIW R28,17
0003f6 9508      	RET
                 ; .FEND
                 ;
                 ;//// data setting
                 ;char set_date(void)
                 ; 0000 0221 {
                 _set_date:
                 ; .FSTART _set_date
                 ; 0000 0222   char choice = 0;
                 ; 0000 0223   char line[17];
                 ; 0000 0224   while (1)
0003f7 9761      	SBIW R28,17
0003f8 931a      	ST   -Y,R17
                 ;	choice -> R17
                 ;	line -> Y+1
0003f9 e010      	LDI  R17,0
                 _0xA9:
                 ; 0000 0225   {
                 ; 0000 0226     if (choice == 1)
0003fa 3011      	CPI  R17,1
0003fb f451      	BRNE _0xAC
                 ; 0000 0227     {
                 ; 0000 0228       sprintf(line, "Set month=%d  >", month);
0003fc 940e 082f 	CALL SUBOPT_0x25
                +
0003fe e2e4     +LDI R30 , LOW ( 2 * _0x0 + ( 168 ) )
0003ff e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 168 ) )
                 	__POINTW1FN _0x0,168
000400 93fa      	ST   -Y,R31
000401 93ea      	ST   -Y,R30
000402 940e 07b2 	CALL SUBOPT_0x12
000404 940e 0834 	CALL SUBOPT_0x26
                 ; 0000 0229       lcd_clear();
                 ; 0000 022A       lcd_puts(line);
                 ; 0000 022B     }
                 ; 0000 022C 
                 ; 0000 022D     if (choice == 0)
                 _0xAC:
000406 3010      	CPI  R17,0
000407 f451      	BRNE _0xAD
                 ; 0000 022E     {
                 ; 0000 022F       sprintf(line, "Set day=%d  >", day);
000408 940e 082f 	CALL SUBOPT_0x25
                +
00040a e3e4     +LDI R30 , LOW ( 2 * _0x0 + ( 184 ) )
00040b e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 184 ) )
                 	__POINTW1FN _0x0,184
00040c 93fa      	ST   -Y,R31
00040d 93ea      	ST   -Y,R30
00040e 940e 07bb 	CALL SUBOPT_0x13
000410 940e 0834 	CALL SUBOPT_0x26
                 ; 0000 0230       lcd_clear();
                 ; 0000 0231       lcd_puts(line);
                 ; 0000 0232     }
                 ; 0000 0233 
                 ; 0000 0234     if (choice == 2)
                 _0xAD:
000412 3012      	CPI  R17,2
000413 f451      	BRNE _0xAE
                 ; 0000 0235     {
                 ; 0000 0236       sprintf(line, "Set year=%d  >", year);
000414 940e 082f 	CALL SUBOPT_0x25
                +
000416 e4e2     +LDI R30 , LOW ( 2 * _0x0 + ( 198 ) )
000417 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 198 ) )
                 	__POINTW1FN _0x0,198
000418 93fa      	ST   -Y,R31
000419 93ea      	ST   -Y,R30
00041a 940e 07a9 	CALL SUBOPT_0x11
00041c 940e 0834 	CALL SUBOPT_0x26
                 ; 0000 0237       lcd_clear();
                 ; 0000 0238       lcd_puts(line);
                 ; 0000 0239     }
                 ; 0000 023A 
                 ; 0000 023B     if (PINA .1 == 0 & choice == 1)
                 _0xAE:
00041e 940e 083e 	CALL SUBOPT_0x27
000420 940e 07ed 	CALL SUBOPT_0x1B
000422 f061      	BREQ _0xAF
                 ; 0000 023C     { // UP     month
                 ; 0000 023D       while (PINA .1 == 0)
                 _0xB0:
000423 9bc9      	SBIS 0x19,1
                 ; 0000 023E         ;
000424 cffe      	RJMP _0xB0
                 ; 0000 023F       month++;
000425 e6a4      	LDI  R26,LOW(_month)
000426 e0b2      	LDI  R27,HIGH(_month)
000427 940e 0814 	CALL SUBOPT_0x20
                 ; 0000 0240       if (month > 12)
000429 940e 0728 	CALL SUBOPT_0x1
00042b 971d      	SBIW R26,13
00042c f010      	BRLO _0xB3
                 ; 0000 0241         month = 1;
00042d 940e 0740 	CALL SUBOPT_0x4
                 ; 0000 0242     }
                 _0xB3:
                 ; 0000 0243 
                 ; 0000 0244     if (PINA .0 == 0 & choice == 1)
                 _0xAF:
00042f 940e 0847 	CALL SUBOPT_0x28
000431 940e 07ed 	CALL SUBOPT_0x1B
000433 f081      	BREQ _0xB4
                 ; 0000 0245     { // DOWN    month
                 ; 0000 0246       while (PINA .0 == 0)
                 _0xB5:
000434 9bc8      	SBIS 0x19,0
                 ; 0000 0247         ;
000435 cffe      	RJMP _0xB5
                 ; 0000 0248       month--;
000436 e6a4      	LDI  R26,LOW(_month)
000437 e0b2      	LDI  R27,HIGH(_month)
000438 940e 081a 	CALL SUBOPT_0x21
                 ; 0000 0249       if (month < 1)
00043a 940e 0728 	CALL SUBOPT_0x1
00043c 9711      	SBIW R26,1
00043d f430      	BRSH _0xB8
                 ; 0000 024A         month = 12;
00043e e0ec      	LDI  R30,LOW(12)
00043f e0f0      	LDI  R31,HIGH(12)
000440 93e0 0264 	STS  _month,R30
000442 93f0 0265 	STS  _month+1,R31
                 ; 0000 024B     }
                 _0xB8:
                 ; 0000 024C 
                 ; 0000 024D     if (PINA .1 == 0 & choice == 0)
                 _0xB4:
000444 940e 083e 	CALL SUBOPT_0x27
000446 940e 07e8 	CALL SUBOPT_0x1A
000448 f081      	BREQ _0xB9
                 ; 0000 024E     { // UP    day
                 ; 0000 024F       while (PINA .1 == 0)
                 _0xBA:
000449 9bc9      	SBIS 0x19,1
                 ; 0000 0250         ;
00044a cffe      	RJMP _0xBA
                 ; 0000 0251       day++;
00044b e6a2      	LDI  R26,LOW(_day)
00044c e0b2      	LDI  R27,HIGH(_day)
00044d 940e 0814 	CALL SUBOPT_0x20
                 ; 0000 0252       day_index = day;
00044f 940e 0850 	CALL SUBOPT_0x29
                 ; 0000 0253       if (day > 31)
000451 9790      	SBIW R26,32
000452 f030      	BRLO _0xBD
                 ; 0000 0254         day = 1;
000453 e0e1      	LDI  R30,LOW(1)
000454 e0f0      	LDI  R31,HIGH(1)
000455 93e0 0262 	STS  _day,R30
000457 93f0 0263 	STS  _day+1,R31
                 ; 0000 0255     }
                 _0xBD:
                 ; 0000 0256 
                 ; 0000 0257     if (PINA .0 == 0 & choice == 0)
                 _0xB9:
000459 940e 0847 	CALL SUBOPT_0x28
00045b 940e 07e8 	CALL SUBOPT_0x1A
00045d f081      	BREQ _0xBE
                 ; 0000 0258     { // DOWN    day
                 ; 0000 0259       while (PINA .0 == 0)
                 _0xBF:
00045e 9bc8      	SBIS 0x19,0
                 ; 0000 025A         ;
00045f cffe      	RJMP _0xBF
                 ; 0000 025B       day--;
000460 e6a2      	LDI  R26,LOW(_day)
000461 e0b2      	LDI  R27,HIGH(_day)
000462 940e 081a 	CALL SUBOPT_0x21
                 ; 0000 025C       day_index = day;
000464 940e 0850 	CALL SUBOPT_0x29
                 ; 0000 025D       if (day < 1)
000466 9711      	SBIW R26,1
000467 f430      	BRSH _0xC2
                 ; 0000 025E         day = 31;
000468 e1ef      	LDI  R30,LOW(31)
000469 e0f0      	LDI  R31,HIGH(31)
00046a 93e0 0262 	STS  _day,R30
00046c 93f0 0263 	STS  _day+1,R31
                 ; 0000 025F     }
                 _0xC2:
                 ; 0000 0260 
                 ; 0000 0261     if (PINA .0 == 0 & choice == 2)
                 _0xBE:
00046e 940e 0847 	CALL SUBOPT_0x28
000470 940e 07f2 	CALL SUBOPT_0x1C
000472 f099      	BREQ _0xC3
                 ; 0000 0262     { // DOWN    year
                 ; 0000 0263       while (PINA .0 == 0)
                 _0xC4:
000473 9bc8      	SBIS 0x19,0
                 ; 0000 0264         ;
000474 cffe      	RJMP _0xC4
                 ; 0000 0265       year--;
000475 940e 0747 	CALL SUBOPT_0x5
000477 9731      	SBIW R30,1
000478 93fe      	ST   -X,R31
000479 93ee      	ST   -X,R30
                 ; 0000 0266       if (year < 1)
00047a 91a0 0266 	LDS  R26,_year
00047c 91b0 0267 	LDS  R27,_year+1
00047e 9711      	SBIW R26,1
00047f f430      	BRSH _0xC7
                 ; 0000 0267         year = 1300;
000480 e1e4      	LDI  R30,LOW(1300)
000481 e0f5      	LDI  R31,HIGH(1300)
000482 93e0 0266 	STS  _year,R30
000484 93f0 0267 	STS  _year+1,R31
                 ; 0000 0268     }
                 _0xC7:
                 ; 0000 0269 
                 ; 0000 026A     if (PINA .1 == 0 & choice == 2)
                 _0xC3:
000486 940e 083e 	CALL SUBOPT_0x27
000488 940e 07f2 	CALL SUBOPT_0x1C
00048a f039      	BREQ _0xC8
                 ; 0000 026B     { // UP    year
                 ; 0000 026C       while (PINA .1 == 0)
                 _0xC9:
00048b 9bc9      	SBIS 0x19,1
                 ; 0000 026D         ;
00048c cffe      	RJMP _0xC9
                 ; 0000 026E       year++;
00048d 940e 0747 	CALL SUBOPT_0x5
00048f 9631      	ADIW R30,1
000490 93fe      	ST   -X,R31
000491 93ee      	ST   -X,R30
                 ; 0000 026F       // if(year>1404)
                 ; 0000 0270       // year=0;
                 ; 0000 0271     }
                 ; 0000 0272 
                 ; 0000 0273     if (PINA .3 == 0)
                 _0xC8:
000492 99cb      	SBIC 0x19,3
000493 c006      	RJMP _0xCC
                 ; 0000 0274     { // NEXT
                 ; 0000 0275       while (PINA .3 == 0)
                 _0xCD:
000494 9bcb      	SBIS 0x19,3
                 ; 0000 0276         ;
000495 cffe      	RJMP _0xCD
                 ; 0000 0277       choice++;
000496 5f1f      	SUBI R17,-1
                 ; 0000 0278       if (choice >= 3)
000497 3013      	CPI  R17,3
000498 f008      	BRLO _0xD0
                 ; 0000 0279         choice = 0;
000499 e010      	LDI  R17,LOW(0)
                 ; 0000 027A     }
                 _0xD0:
                 ; 0000 027B 
                 ; 0000 027C     if (PINA .4 == 0)
                 _0xCC:
00049a 99cc      	SBIC 0x19,4
00049b c004      	RJMP _0xD1
                 ; 0000 027D     { // Back
                 ; 0000 027E       while (PINA .4 == 0)
                 _0xD2:
00049c 9bcc      	SBIS 0x19,4
                 ; 0000 027F         ;
00049d cffe      	RJMP _0xD2
                 ; 0000 0280       return 0;
00049e e0e0      	LDI  R30,LOW(0)
00049f c003      	RJMP _0x2080004
                 ; 0000 0281     }
                 ; 0000 0282 
                 ; 0000 0283     delay_ms(25);
                 _0xD1:
0004a0 940e 07db 	CALL SUBOPT_0x18
                 ; 0000 0284   }
0004a2 cf57      	RJMP _0xA9
                 ; 0000 0285 }
                 _0x2080004:
0004a3 8118      	LDD  R17,Y+0
0004a4 9662      	ADIW R28,18
0004a5 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G100:
                 ; .FSTART _put_buff_G100
0004a6 93ba      	ST   -Y,R27
0004a7 93aa      	ST   -Y,R26
0004a8 931a      	ST   -Y,R17
0004a9 930a      	ST   -Y,R16
0004aa 81aa      	LDD  R26,Y+2
0004ab 81bb      	LDD  R27,Y+2+1
0004ac 9612      	ADIW R26,2
0004ad 940e 08b9 	CALL __GETW1P
0004af 9730      	SBIW R30,0
0004b0 f129      	BREQ _0x2000010
0004b1 81aa      	LDD  R26,Y+2
0004b2 81bb      	LDD  R27,Y+2+1
0004b3 9614      	ADIW R26,4
0004b4 940e 08b9 	CALL __GETW1P
0004b6 018f      	MOVW R16,R30
0004b7 9730      	SBIW R30,0
0004b8 f061      	BREQ _0x2000012
                +
0004b9 3002     +CPI R16 , LOW ( 2 )
0004ba e0e0     +LDI R30 , HIGH ( 2 )
0004bb 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
0004bc f080      	BRLO _0x2000013
0004bd 01f8      	MOVW R30,R16
0004be 9731      	SBIW R30,1
0004bf 018f      	MOVW R16,R30
                +
0004c0 81aa     +LDD R26 , Y + 2
0004c1 81bb     +LDD R27 , Y + 2 + 1
0004c2 9614     +ADIW R26 , 4
0004c3 93ed     +ST X + , R30
0004c4 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2000012:
0004c5 81aa      	LDD  R26,Y+2
0004c6 81bb      	LDD  R27,Y+2+1
0004c7 9612      	ADIW R26,2
0004c8 940e 0814 	CALL SUBOPT_0x20
0004ca 9731      	SBIW R30,1
0004cb 81ac      	LDD  R26,Y+4
0004cc 83a0      	STD  Z+0,R26
                 _0x2000013:
0004cd 81aa      	LDD  R26,Y+2
0004ce 81bb      	LDD  R27,Y+2+1
0004cf 940e 08b9 	CALL __GETW1P
0004d1 23ff      	TST  R31
0004d2 f012      	BRMI _0x2000014
0004d3 940e 0814 	CALL SUBOPT_0x20
                 _0x2000014:
0004d5 c006      	RJMP _0x2000015
                 _0x2000010:
0004d6 81aa      	LDD  R26,Y+2
0004d7 81bb      	LDD  R27,Y+2+1
0004d8 efef      	LDI  R30,LOW(65535)
0004d9 efff      	LDI  R31,HIGH(65535)
0004da 93ed      	ST   X+,R30
0004db 93fc      	ST   X,R31
                 _0x2000015:
0004dc 8119      	LDD  R17,Y+1
0004dd 8108      	LDD  R16,Y+0
0004de 9625      	ADIW R28,5
0004df 9508      	RET
                 ; .FEND
                 __print_G100:
                 ; .FSTART __print_G100
0004e0 93ba      	ST   -Y,R27
0004e1 93aa      	ST   -Y,R26
0004e2 9726      	SBIW R28,6
0004e3 940e 08ef 	CALL __SAVELOCR6
0004e5 e010      	LDI  R17,0
0004e6 85ac      	LDD  R26,Y+12
0004e7 85bd      	LDD  R27,Y+12+1
0004e8 e0e0      	LDI  R30,LOW(0)
0004e9 e0f0      	LDI  R31,HIGH(0)
0004ea 93ed      	ST   X+,R30
0004eb 93fc      	ST   X,R31
                 _0x2000016:
0004ec 89ea      	LDD  R30,Y+18
0004ed 89fb      	LDD  R31,Y+18+1
0004ee 9631      	ADIW R30,1
0004ef 8bea      	STD  Y+18,R30
0004f0 8bfb      	STD  Y+18+1,R31
0004f1 9731      	SBIW R30,1
0004f2 91e4      	LPM  R30,Z
0004f3 2f2e      	MOV  R18,R30
0004f4 30e0      	CPI  R30,0
0004f5 f409      	BRNE PC+2
0004f6 c115      	RJMP _0x2000018
0004f7 2fe1      	MOV  R30,R17
0004f8 30e0      	CPI  R30,0
0004f9 f439      	BRNE _0x200001C
0004fa 3225      	CPI  R18,37
0004fb f411      	BRNE _0x200001D
0004fc e011      	LDI  R17,LOW(1)
0004fd c002      	RJMP _0x200001E
                 _0x200001D:
0004fe 940e 0857 	CALL SUBOPT_0x2A
                 _0x200001E:
000500 c10a      	RJMP _0x200001B
                 _0x200001C:
000501 30e1      	CPI  R30,LOW(0x1)
000502 f4a9      	BRNE _0x200001F
000503 3225      	CPI  R18,37
000504 f419      	BRNE _0x2000020
000505 940e 0857 	CALL SUBOPT_0x2A
000507 c102      	RJMP _0x20000CC
                 _0x2000020:
000508 e012      	LDI  R17,LOW(2)
000509 e040      	LDI  R20,LOW(0)
00050a e000      	LDI  R16,LOW(0)
00050b 322d      	CPI  R18,45
00050c f411      	BRNE _0x2000021
00050d e001      	LDI  R16,LOW(1)
00050e c0fc      	RJMP _0x200001B
                 _0x2000021:
00050f 322b      	CPI  R18,43
000510 f411      	BRNE _0x2000022
000511 e24b      	LDI  R20,LOW(43)
000512 c0f8      	RJMP _0x200001B
                 _0x2000022:
000513 3220      	CPI  R18,32
000514 f411      	BRNE _0x2000023
000515 e240      	LDI  R20,LOW(32)
000516 c0f4      	RJMP _0x200001B
                 _0x2000023:
000517 c002      	RJMP _0x2000024
                 _0x200001F:
000518 30e2      	CPI  R30,LOW(0x2)
000519 f439      	BRNE _0x2000025
                 _0x2000024:
00051a e050      	LDI  R21,LOW(0)
00051b e013      	LDI  R17,LOW(3)
00051c 3320      	CPI  R18,48
00051d f411      	BRNE _0x2000026
00051e 6800      	ORI  R16,LOW(128)
00051f c0eb      	RJMP _0x200001B
                 _0x2000026:
000520 c003      	RJMP _0x2000027
                 _0x2000025:
000521 30e3      	CPI  R30,LOW(0x3)
000522 f009      	BREQ PC+2
000523 c0e7      	RJMP _0x200001B
                 _0x2000027:
000524 3320      	CPI  R18,48
000525 f010      	BRLO _0x200002A
000526 332a      	CPI  R18,58
000527 f008      	BRLO _0x200002B
                 _0x200002A:
000528 c007      	RJMP _0x2000029
                 _0x200002B:
000529 e0aa      	LDI  R26,LOW(10)
00052a 9f5a      	MUL  R21,R26
00052b 2d50      	MOV  R21,R0
00052c 2fe2      	MOV  R30,R18
00052d 53e0      	SUBI R30,LOW(48)
00052e 0f5e      	ADD  R21,R30
00052f c0db      	RJMP _0x200001B
                 _0x2000029:
000530 2fe2      	MOV  R30,R18
000531 36e3      	CPI  R30,LOW(0x63)
000532 f449      	BRNE _0x200002F
000533 940e 085e 	CALL SUBOPT_0x2B
000535 89e8      	LDD  R30,Y+16
000536 89f9      	LDD  R31,Y+16+1
000537 81a4      	LDD  R26,Z+4
000538 93aa      	ST   -Y,R26
000539 940e 0864 	CALL SUBOPT_0x2C
00053b c0ce      	RJMP _0x2000030
                 _0x200002F:
00053c 37e3      	CPI  R30,LOW(0x73)
00053d f441      	BRNE _0x2000032
00053e 940e 085e 	CALL SUBOPT_0x2B
000540 940e 086a 	CALL SUBOPT_0x2D
000542 940e 070a 	CALL _strlen
000544 2f1e      	MOV  R17,R30
000545 c00a      	RJMP _0x2000033
                 _0x2000032:
000546 37e0      	CPI  R30,LOW(0x70)
000547 f461      	BRNE _0x2000035
000548 940e 085e 	CALL SUBOPT_0x2B
00054a 940e 086a 	CALL SUBOPT_0x2D
00054c 940e 0716 	CALL _strlenf
00054e 2f1e      	MOV  R17,R30
00054f 6008      	ORI  R16,LOW(8)
                 _0x2000033:
000550 6002      	ORI  R16,LOW(2)
000551 770f      	ANDI R16,LOW(127)
000552 e030      	LDI  R19,LOW(0)
000553 c034      	RJMP _0x2000036
                 _0x2000035:
000554 36e4      	CPI  R30,LOW(0x64)
000555 f011      	BREQ _0x2000039
000556 36e9      	CPI  R30,LOW(0x69)
000557 f411      	BRNE _0x200003A
                 _0x2000039:
000558 6004      	ORI  R16,LOW(4)
000559 c002      	RJMP _0x200003B
                 _0x200003A:
00055a 37e5      	CPI  R30,LOW(0x75)
00055b f431      	BRNE _0x200003C
                 _0x200003B:
00055c e5e4      	LDI  R30,LOW(_tbl10_G100*2)
00055d e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
00055e 83ee      	STD  Y+6,R30
00055f 83ff      	STD  Y+6+1,R31
000560 e015      	LDI  R17,LOW(5)
000561 c00c      	RJMP _0x200003D
                 _0x200003C:
000562 35e8      	CPI  R30,LOW(0x58)
000563 f411      	BRNE _0x200003F
000564 6008      	ORI  R16,LOW(8)
000565 c003      	RJMP _0x2000040
                 _0x200003F:
000566 37e8      	CPI  R30,LOW(0x78)
000567 f009      	BREQ PC+2
000568 c0a1      	RJMP _0x2000071
                 _0x2000040:
000569 e5ee      	LDI  R30,LOW(_tbl16_G100*2)
00056a e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
00056b 83ee      	STD  Y+6,R30
00056c 83ff      	STD  Y+6+1,R31
00056d e014      	LDI  R17,LOW(4)
                 _0x200003D:
00056e ff02      	SBRS R16,2
00056f c014      	RJMP _0x2000042
000570 940e 085e 	CALL SUBOPT_0x2B
000572 940e 0874 	CALL SUBOPT_0x2E
000574 85ab      	LDD  R26,Y+11
000575 23aa      	TST  R26
000576 f43a      	BRPL _0x2000043
000577 85ea      	LDD  R30,Y+10
000578 85fb      	LDD  R31,Y+10+1
000579 940e 089f 	CALL __ANEGW1
00057b 87ea      	STD  Y+10,R30
00057c 87fb      	STD  Y+10+1,R31
00057d e24d      	LDI  R20,LOW(45)
                 _0x2000043:
00057e 3040      	CPI  R20,0
00057f f011      	BREQ _0x2000044
000580 5f1f      	SUBI R17,-LOW(1)
000581 c001      	RJMP _0x2000045
                 _0x2000044:
000582 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
000583 c004      	RJMP _0x2000046
                 _0x2000042:
000584 940e 085e 	CALL SUBOPT_0x2B
000586 940e 0874 	CALL SUBOPT_0x2E
                 _0x2000046:
                 _0x2000036:
000588 fd00      	SBRC R16,0
000589 c011      	RJMP _0x2000047
                 _0x2000048:
00058a 1715      	CP   R17,R21
00058b f478      	BRSH _0x200004A
00058c ff07      	SBRS R16,7
00058d c008      	RJMP _0x200004B
00058e ff02      	SBRS R16,2
00058f c004      	RJMP _0x200004C
000590 7f0b      	ANDI R16,LOW(251)
000591 2f24      	MOV  R18,R20
000592 5011      	SUBI R17,LOW(1)
000593 c001      	RJMP _0x200004D
                 _0x200004C:
000594 e320      	LDI  R18,LOW(48)
                 _0x200004D:
000595 c001      	RJMP _0x200004E
                 _0x200004B:
000596 e220      	LDI  R18,LOW(32)
                 _0x200004E:
000597 940e 0857 	CALL SUBOPT_0x2A
000599 5051      	SUBI R21,LOW(1)
00059a cfef      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
00059b 2f31      	MOV  R19,R17
00059c ff01      	SBRS R16,1
00059d c017      	RJMP _0x200004F
                 _0x2000050:
00059e 3030      	CPI  R19,0
00059f f0a1      	BREQ _0x2000052
0005a0 ff03      	SBRS R16,3
0005a1 c006      	RJMP _0x2000053
0005a2 81ee      	LDD  R30,Y+6
0005a3 81ff      	LDD  R31,Y+6+1
0005a4 9125      	LPM  R18,Z+
0005a5 83ee      	STD  Y+6,R30
0005a6 83ff      	STD  Y+6+1,R31
0005a7 c005      	RJMP _0x2000054
                 _0x2000053:
0005a8 81ae      	LDD  R26,Y+6
0005a9 81bf      	LDD  R27,Y+6+1
0005aa 912d      	LD   R18,X+
0005ab 83ae      	STD  Y+6,R26
0005ac 83bf      	STD  Y+6+1,R27
                 _0x2000054:
0005ad 940e 0857 	CALL SUBOPT_0x2A
0005af 3050      	CPI  R21,0
0005b0 f009      	BREQ _0x2000055
0005b1 5051      	SUBI R21,LOW(1)
                 _0x2000055:
0005b2 5031      	SUBI R19,LOW(1)
0005b3 cfea      	RJMP _0x2000050
                 _0x2000052:
0005b4 c04b      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
0005b5 e320      	LDI  R18,LOW(48)
0005b6 81ee      	LDD  R30,Y+6
0005b7 81ff      	LDD  R31,Y+6+1
0005b8 940e 08bd 	CALL __GETW1PF
0005ba 87e8      	STD  Y+8,R30
0005bb 87f9      	STD  Y+8+1,R31
0005bc 81ee      	LDD  R30,Y+6
0005bd 81ff      	LDD  R31,Y+6+1
0005be 9632      	ADIW R30,2
0005bf 83ee      	STD  Y+6,R30
0005c0 83ff      	STD  Y+6+1,R31
                 _0x200005A:
0005c1 85e8      	LDD  R30,Y+8
0005c2 85f9      	LDD  R31,Y+8+1
0005c3 85aa      	LDD  R26,Y+10
0005c4 85bb      	LDD  R27,Y+10+1
0005c5 17ae      	CP   R26,R30
0005c6 07bf      	CPC  R27,R31
0005c7 f050      	BRLO _0x200005C
0005c8 5f2f      	SUBI R18,-LOW(1)
0005c9 85a8      	LDD  R26,Y+8
0005ca 85b9      	LDD  R27,Y+8+1
0005cb 85ea      	LDD  R30,Y+10
0005cc 85fb      	LDD  R31,Y+10+1
0005cd 1bea      	SUB  R30,R26
0005ce 0bfb      	SBC  R31,R27
0005cf 87ea      	STD  Y+10,R30
0005d0 87fb      	STD  Y+10+1,R31
0005d1 cfef      	RJMP _0x200005A
                 _0x200005C:
0005d2 332a      	CPI  R18,58
0005d3 f028      	BRLO _0x200005D
0005d4 ff03      	SBRS R16,3
0005d5 c002      	RJMP _0x200005E
0005d6 5f29      	SUBI R18,-LOW(7)
0005d7 c001      	RJMP _0x200005F
                 _0x200005E:
0005d8 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
0005d9 fd04      	SBRC R16,4
0005da c01a      	RJMP _0x2000061
0005db 3321      	CPI  R18,49
0005dc f420      	BRSH _0x2000063
0005dd 85a8      	LDD  R26,Y+8
0005de 85b9      	LDD  R27,Y+8+1
0005df 9711      	SBIW R26,1
0005e0 f409      	BRNE _0x2000062
                 _0x2000063:
0005e1 c009      	RJMP _0x20000CD
                 _0x2000062:
0005e2 1753      	CP   R21,R19
0005e3 f010      	BRLO _0x2000067
0005e4 ff00      	SBRS R16,0
0005e5 c001      	RJMP _0x2000068
                 _0x2000067:
0005e6 c013      	RJMP _0x2000066
                 _0x2000068:
0005e7 e220      	LDI  R18,LOW(32)
0005e8 ff07      	SBRS R16,7
0005e9 c00b      	RJMP _0x2000069
0005ea e320      	LDI  R18,LOW(48)
                 _0x20000CD:
0005eb 6100      	ORI  R16,LOW(16)
0005ec ff02      	SBRS R16,2
0005ed c007      	RJMP _0x200006A
0005ee 7f0b      	ANDI R16,LOW(251)
0005ef 934a      	ST   -Y,R20
0005f0 940e 0864 	CALL SUBOPT_0x2C
0005f2 3050      	CPI  R21,0
0005f3 f009      	BREQ _0x200006B
0005f4 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
0005f5 940e 0857 	CALL SUBOPT_0x2A
0005f7 3050      	CPI  R21,0
0005f8 f009      	BREQ _0x200006C
0005f9 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
0005fa 5031      	SUBI R19,LOW(1)
0005fb 85a8      	LDD  R26,Y+8
0005fc 85b9      	LDD  R27,Y+8+1
0005fd 9712      	SBIW R26,2
0005fe f008      	BRLO _0x2000059
0005ff cfb5      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
000600 ff00      	SBRS R16,0
000601 c008      	RJMP _0x200006D
                 _0x200006E:
000602 3050      	CPI  R21,0
000603 f031      	BREQ _0x2000070
000604 5051      	SUBI R21,LOW(1)
000605 e2e0      	LDI  R30,LOW(32)
000606 93ea      	ST   -Y,R30
000607 940e 0864 	CALL SUBOPT_0x2C
000609 cff8      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000CC:
00060a e010      	LDI  R17,LOW(0)
                 _0x200001B:
00060b cee0      	RJMP _0x2000016
                 _0x2000018:
00060c 85ac      	LDD  R26,Y+12
00060d 85bd      	LDD  R27,Y+12+1
00060e 940e 08b9 	CALL __GETW1P
000610 940e 08f6 	CALL __LOADLOCR6
000612 9664      	ADIW R28,20
000613 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
000614 92ff      	PUSH R15
000615 2ef8      	MOV  R15,R24
000616 9726      	SBIW R28,6
000617 940e 08f1 	CALL __SAVELOCR4
000619 940e 087c 	CALL SUBOPT_0x2F
00061b 9730      	SBIW R30,0
00061c f419      	BRNE _0x2000072
00061d efef      	LDI  R30,LOW(65535)
00061e efff      	LDI  R31,HIGH(65535)
00061f c023      	RJMP _0x2080003
                 _0x2000072:
000620 01de      	MOVW R26,R28
000621 9616      	ADIW R26,6
000622 940e 089b 	CALL __ADDW2R15
000624 018d      	MOVW R16,R26
000625 940e 087c 	CALL SUBOPT_0x2F
000627 83ee      	STD  Y+6,R30
000628 83ff      	STD  Y+6+1,R31
000629 e0e0      	LDI  R30,LOW(0)
00062a 87e8      	STD  Y+8,R30
00062b 87e9      	STD  Y+8+1,R30
00062c 01de      	MOVW R26,R28
00062d 961a      	ADIW R26,10
00062e 940e 089b 	CALL __ADDW2R15
000630 940e 08b9 	CALL __GETW1P
000632 93fa      	ST   -Y,R31
000633 93ea      	ST   -Y,R30
000634 931a      	ST   -Y,R17
000635 930a      	ST   -Y,R16
000636 eae6      	LDI  R30,LOW(_put_buff_G100)
000637 e0f4      	LDI  R31,HIGH(_put_buff_G100)
000638 93fa      	ST   -Y,R31
000639 93ea      	ST   -Y,R30
00063a 01de      	MOVW R26,R28
00063b 961a      	ADIW R26,10
00063c dea3      	RCALL __print_G100
00063d 019f      	MOVW R18,R30
00063e 81ae      	LDD  R26,Y+6
00063f 81bf      	LDD  R27,Y+6+1
000640 e0e0      	LDI  R30,LOW(0)
000641 93ec      	ST   X,R30
000642 01f9      	MOVW R30,R18
                 _0x2080003:
000643 940e 08f8 	CALL __LOADLOCR4
000645 962a      	ADIW R28,10
000646 90ff      	POP  R15
000647 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G101:
                 ; .FSTART __lcd_write_nibble_G101
000648 93aa      	ST   -Y,R26
000649 81e8      	LD   R30,Y
00064a 71e0      	ANDI R30,LOW(0x10)
00064b f011      	BREQ _0x2020004
00064c 9ac3      	SBI  0x18,3
00064d c001      	RJMP _0x2020005
                 _0x2020004:
00064e 98c3      	CBI  0x18,3
                 _0x2020005:
00064f 81e8      	LD   R30,Y
000650 72e0      	ANDI R30,LOW(0x20)
000651 f011      	BREQ _0x2020006
000652 9ac4      	SBI  0x18,4
000653 c001      	RJMP _0x2020007
                 _0x2020006:
000654 98c4      	CBI  0x18,4
                 _0x2020007:
000655 81e8      	LD   R30,Y
000656 74e0      	ANDI R30,LOW(0x40)
000657 f011      	BREQ _0x2020008
000658 9ac5      	SBI  0x18,5
000659 c001      	RJMP _0x2020009
                 _0x2020008:
00065a 98c5      	CBI  0x18,5
                 _0x2020009:
00065b 81e8      	LD   R30,Y
00065c 78e0      	ANDI R30,LOW(0x80)
00065d f011      	BREQ _0x202000A
00065e 9ac6      	SBI  0x18,6
00065f c001      	RJMP _0x202000B
                 _0x202000A:
000660 98c6      	CBI  0x18,6
                 _0x202000B:
                +
000661 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000662 958a     +DEC R24
000663 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000664 9ac2      	SBI  0x18,2
                +
000665 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000666 958a     +DEC R24
000667 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000668 98c2      	CBI  0x18,2
                +
000669 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00066a 958a     +DEC R24
00066b f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00066c c09b      	RJMP _0x2080001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
00066d 93aa      	ST   -Y,R26
00066e 81a8      	LD   R26,Y
00066f dfd8      	RCALL __lcd_write_nibble_G101
000670 81e8          ld    r30,y
000671 95e2          swap  r30
000672 83e8          st    y,r30
000673 81a8      	LD   R26,Y
000674 dfd3      	RCALL __lcd_write_nibble_G101
                +
000675 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
000676 958a     +DEC R24
000677 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
000678 c08f      	RJMP _0x2080001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000679 93aa      	ST   -Y,R26
00067a 81e8      	LD   R30,Y
00067b e0f0      	LDI  R31,0
00067c 59e8      	SUBI R30,LOW(-__base_y_G101)
00067d 4ffd      	SBCI R31,HIGH(-__base_y_G101)
00067e 81e0      	LD   R30,Z
00067f 81a9      	LDD  R26,Y+1
000680 0fae      	ADD  R26,R30
000681 dfeb      	RCALL __lcd_write_data
000682 81e9      	LDD  R30,Y+1
000683 93e0 026c 	STS  __lcd_x,R30
000685 81e8      	LD   R30,Y
000686 93e0 026d 	STS  __lcd_y,R30
000688 9622      	ADIW R28,2
000689 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
00068a e0a2      	LDI  R26,LOW(2)
00068b 940e 0883 	CALL SUBOPT_0x30
00068d e0ac      	LDI  R26,LOW(12)
00068e dfde      	RCALL __lcd_write_data
00068f e0a1      	LDI  R26,LOW(1)
000690 940e 0883 	CALL SUBOPT_0x30
000692 e0e0      	LDI  R30,LOW(0)
000693 93e0 026d 	STS  __lcd_y,R30
000695 93e0 026c 	STS  __lcd_x,R30
000697 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000698 93aa      	ST   -Y,R26
000699 81a8      	LD   R26,Y
00069a 30aa      	CPI  R26,LOW(0xA)
00069b f031      	BREQ _0x2020011
00069c 91e0 026e 	LDS  R30,__lcd_maxx
00069e 91a0 026c 	LDS  R26,__lcd_x
0006a0 17ae      	CP   R26,R30
0006a1 f060      	BRLO _0x2020010
                 _0x2020011:
0006a2 e0e0      	LDI  R30,LOW(0)
0006a3 93ea      	ST   -Y,R30
0006a4 91a0 026d 	LDS  R26,__lcd_y
0006a6 5faf      	SUBI R26,-LOW(1)
0006a7 93a0 026d 	STS  __lcd_y,R26
0006a9 dfcf      	RCALL _lcd_gotoxy
0006aa 81a8      	LD   R26,Y
0006ab 30aa      	CPI  R26,LOW(0xA)
0006ac f409      	BRNE _0x2020013
0006ad c05a      	RJMP _0x2080001
                 _0x2020013:
                 _0x2020010:
0006ae 91e0 026c 	LDS  R30,__lcd_x
0006b0 5fef      	SUBI R30,-LOW(1)
0006b1 93e0 026c 	STS  __lcd_x,R30
0006b3 9ac0      	SBI  0x18,0
0006b4 81a8      	LD   R26,Y
0006b5 dfb7      	RCALL __lcd_write_data
0006b6 98c0      	CBI  0x18,0
0006b7 c050      	RJMP _0x2080001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
0006b8 93ba      	ST   -Y,R27
0006b9 93aa      	ST   -Y,R26
0006ba 931a      	ST   -Y,R17
                 _0x2020014:
0006bb 81a9      	LDD  R26,Y+1
0006bc 81ba      	LDD  R27,Y+1+1
0006bd 91ed      	LD   R30,X+
0006be 83a9      	STD  Y+1,R26
0006bf 83ba      	STD  Y+1+1,R27
0006c0 2f1e      	MOV  R17,R30
0006c1 30e0      	CPI  R30,0
0006c2 f019      	BREQ _0x2020016
0006c3 2fa1      	MOV  R26,R17
0006c4 dfd3      	RCALL _lcd_putchar
0006c5 cff5      	RJMP _0x2020014
                 _0x2020016:
0006c6 c010      	RJMP _0x2080002
                 ; .FEND
                 _lcd_putsf:
                 ; .FSTART _lcd_putsf
0006c7 93ba      	ST   -Y,R27
0006c8 93aa      	ST   -Y,R26
0006c9 931a      	ST   -Y,R17
                 _0x2020017:
0006ca 81e9      	LDD  R30,Y+1
0006cb 81fa      	LDD  R31,Y+1+1
0006cc 9631      	ADIW R30,1
0006cd 83e9      	STD  Y+1,R30
0006ce 83fa      	STD  Y+1+1,R31
0006cf 9731      	SBIW R30,1
0006d0 91e4      	LPM  R30,Z
0006d1 2f1e      	MOV  R17,R30
0006d2 30e0      	CPI  R30,0
0006d3 f019      	BREQ _0x2020019
0006d4 2fa1      	MOV  R26,R17
0006d5 dfc2      	RCALL _lcd_putchar
0006d6 cff3      	RJMP _0x2020017
                 _0x2020019:
                 _0x2080002:
0006d7 8118      	LDD  R17,Y+0
0006d8 9623      	ADIW R28,3
0006d9 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
0006da 93aa      	ST   -Y,R26
0006db 9abb      	SBI  0x17,3
0006dc 9abc      	SBI  0x17,4
0006dd 9abd      	SBI  0x17,5
0006de 9abe      	SBI  0x17,6
0006df 9aba      	SBI  0x17,2
0006e0 9ab8      	SBI  0x17,0
0006e1 9ab9      	SBI  0x17,1
0006e2 98c2      	CBI  0x18,2
0006e3 98c0      	CBI  0x18,0
0006e4 98c1      	CBI  0x18,1
0006e5 81e8      	LD   R30,Y
0006e6 93e0 026e 	STS  __lcd_maxx,R30
0006e8 58e0      	SUBI R30,-LOW(128)
                +
0006e9 93e0 026a+STS __base_y_G101 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G101,2
0006eb 81e8      	LD   R30,Y
0006ec 54e0      	SUBI R30,-LOW(192)
                +
0006ed 93e0 026b+STS __base_y_G101 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G101,3
0006ef e1a4      	LDI  R26,LOW(20)
0006f0 e0b0      	LDI  R27,0
0006f1 940e 0891 	CALL _delay_ms
0006f3 940e 0889 	CALL SUBOPT_0x31
0006f5 940e 0889 	CALL SUBOPT_0x31
0006f7 940e 0889 	CALL SUBOPT_0x31
0006f9 e2a0      	LDI  R26,LOW(32)
0006fa df4d      	RCALL __lcd_write_nibble_G101
                +
0006fb ec88     +LDI R24 , LOW ( 200 )
0006fc e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0006fd 9701     +SBIW R24 , 1
0006fe f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0006ff e2a8      	LDI  R26,LOW(40)
000700 df6c      	RCALL __lcd_write_data
000701 e0a4      	LDI  R26,LOW(4)
000702 df6a      	RCALL __lcd_write_data
000703 e8a5      	LDI  R26,LOW(133)
000704 df68      	RCALL __lcd_write_data
000705 e0a6      	LDI  R26,LOW(6)
000706 df66      	RCALL __lcd_write_data
000707 df82      	RCALL _lcd_clear
                 _0x2080001:
000708 9621      	ADIW R28,1
000709 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
00070a 93ba      	ST   -Y,R27
00070b 93aa      	ST   -Y,R26
00070c 91a9          ld   r26,y+
00070d 91b9          ld   r27,y+
00070e 27ee          clr  r30
00070f 27ff          clr  r31
                 strlen0:
000710 916d          ld   r22,x+
000711 2366          tst  r22
000712 f011          breq strlen1
000713 9631          adiw r30,1
000714 cffb          rjmp strlen0
                 strlen1:
000715 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
000716 93ba      	ST   -Y,R27
000717 93aa      	ST   -Y,R26
000718 27aa          clr  r26
000719 27bb          clr  r27
00071a 91e9          ld   r30,y+
00071b 91f9          ld   r31,y+
                 strlenf0:
00071c 9005      	lpm  r0,z+
00071d 2000          tst  r0
00071e f011          breq strlenf1
00071f 9611          adiw r26,1
000720 cffb          rjmp strlenf0
                 strlenf1:
000721 01fd          movw r30,r26
000722 9508          ret
                 ; .FEND
                 
                 	.ESEG
                 _enter_array:
000000 00
000001 00
000002 00
000003 00        	.DB  0x0,0x0,0x0,0x0
000004 00
000005 00
000006 00
000007 00        	.DB  0x0,0x0,0x0,0x0
000008 00
000009 00
00000a 00
00000b 00        	.DB  0x0,0x0,0x0,0x0
00000c 00
00000d 00
00000e 00
00000f 00        	.DB  0x0,0x0,0x0,0x0
000010 00
000011 00
000012 00
000013 00        	.DB  0x0,0x0,0x0,0x0
000014 00
000015 00
000016 00
000017 00        	.DB  0x0,0x0,0x0,0x0
000018 00
000019 00
00001a 00
00001b 00        	.DB  0x0,0x0,0x0,0x0
00001c 00
00001d 00
00001e 00
00001f 00        	.DB  0x0,0x0,0x0,0x0
000020 00
000021 00
000022 00
000023 00        	.DB  0x0,0x0,0x0,0x0
000024 00
000025 00
000026 00
000027 00        	.DB  0x0,0x0,0x0,0x0
000028 00
000029 00
00002a 00
00002b 00        	.DB  0x0,0x0,0x0,0x0
00002c 00
00002d 00
00002e 00
00002f 00        	.DB  0x0,0x0,0x0,0x0
000030 00
000031 00
000032 00
000033 00        	.DB  0x0,0x0,0x0,0x0
000034 00
000035 00
000036 00
000037 00        	.DB  0x0,0x0,0x0,0x0
000038 00
000039 00
00003a 00
00003b 00        	.DB  0x0,0x0,0x0,0x0
00003c 00
00003d 00
00003e 00
00003f 00        	.DB  0x0,0x0,0x0,0x0
                 _exit_array:
000040 00
000041 00
000042 00
000043 00        	.DB  0x0,0x0,0x0,0x0
000044 00
000045 00
000046 00
000047 00        	.DB  0x0,0x0,0x0,0x0
000048 00
000049 00
00004a 00
00004b 00        	.DB  0x0,0x0,0x0,0x0
00004c 00
00004d 00
00004e 00
00004f 00        	.DB  0x0,0x0,0x0,0x0
000050 00
000051 00
000052 00
000053 00        	.DB  0x0,0x0,0x0,0x0
000054 00
000055 00
000056 00
000057 00        	.DB  0x0,0x0,0x0,0x0
000058 00
000059 00
00005a 00
00005b 00        	.DB  0x0,0x0,0x0,0x0
00005c 00
00005d 00
00005e 00
00005f 00        	.DB  0x0,0x0,0x0,0x0
000060 00
000061 00
000062 00
000063 00        	.DB  0x0,0x0,0x0,0x0
000064 00
000065 00
000066 00
000067 00        	.DB  0x0,0x0,0x0,0x0
000068 00
000069 00
00006a 00
00006b 00        	.DB  0x0,0x0,0x0,0x0
00006c 00
00006d 00
00006e 00
00006f 00        	.DB  0x0,0x0,0x0,0x0
000070 00
000071 00
000072 00
000073 00        	.DB  0x0,0x0,0x0,0x0
000074 00
000075 00
000076 00
000077 00        	.DB  0x0,0x0,0x0,0x0
000078 00
000079 00
00007a 00
00007b 00        	.DB  0x0,0x0,0x0,0x0
00007c 00
00007d 00
00007e 00
00007f 00        	.DB  0x0,0x0,0x0,0x0
                 _day_index:
000080 ff        	.DB  0xFF
                 
                 	.DSEG
                 _hour:
000260           	.BYTE 0x2
                 _day:
000262           	.BYTE 0x2
                 _month:
000264           	.BYTE 0x2
                 _year:
000266           	.BYTE 0x2
                 __base_y_G101:
000268           	.BYTE 0x4
                 __lcd_x:
00026c           	.BYTE 0x1
                 __lcd_y:
00026d           	.BYTE 0x1
                 __lcd_maxx:
00026e           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
000723 91a0 0260 	LDS  R26,_hour
000725 91b0 0261 	LDS  R27,_hour+1
000727 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1:
000728 91a0 0264 	LDS  R26,_month
00072a 91b0 0265 	LDS  R27,_month+1
00072c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x2:
00072d 91a0 0262 	LDS  R26,_day
00072f 91b0 0263 	LDS  R27,_day+1
000731 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:19 WORDS
                 SUBOPT_0x3:
000732 e0e1      	LDI  R30,LOW(1)
000733 e0f0      	LDI  R31,HIGH(1)
000734 93e0 0262 	STS  _day,R30
000736 93f0 0263 	STS  _day+1,R31
000738 e6a4      	LDI  R26,LOW(_month)
000739 e0b2      	LDI  R27,HIGH(_month)
00073a 91ed      	LD   R30,X+
00073b 91fd      	LD   R31,X+
00073c 9631      	ADIW R30,1
00073d 93fe      	ST   -X,R31
00073e 93ee      	ST   -X,R30
00073f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
000740 e0e1      	LDI  R30,LOW(1)
000741 e0f0      	LDI  R31,HIGH(1)
000742 93e0 0264 	STS  _month,R30
000744 93f0 0265 	STS  _month+1,R31
000746 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
000747 e6a6      	LDI  R26,LOW(_year)
000748 e0b2      	LDI  R27,HIGH(_year)
000749 91ed      	LD   R30,X+
00074a 91fd      	LD   R31,X+
00074b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x6:
00074c 920a      	ST   -Y,R0
00074d 921a      	ST   -Y,R1
00074e 92fa      	ST   -Y,R15
00074f 936a      	ST   -Y,R22
000750 937a      	ST   -Y,R23
000751 938a      	ST   -Y,R24
000752 939a      	ST   -Y,R25
000753 93aa      	ST   -Y,R26
000754 93ba      	ST   -Y,R27
000755 93ea      	ST   -Y,R30
000756 93fa      	ST   -Y,R31
000757 b7ef      	IN   R30,SREG
000758 93ea      	ST   -Y,R30
000759 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
00075a 940e 06c7 	CALL _lcd_putsf
00075c efa4      	LDI  R26,LOW(500)
00075d e0b1      	LDI  R27,HIGH(500)
00075e 940c 0891 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x8:
000760 2da9      	MOV  R26,R9
000761 e0b0      	LDI  R27,0
000762 fda7      	SBRC R26,7
000763 efbf      	SER  R27
000764 2de8      	MOV  R30,R8
000765 e0f0      	LDI  R31,0
000766 fde7      	SBRC R30,7
000767 efff      	SER  R31
000768 0fae      	ADD  R26,R30
000769 1fbf      	ADC  R27,R31
00076a 971a      	SBIW R26,10
00076b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x9:
00076c e0e0      	LDI  R30,LOW(0)
00076d 93ea      	ST   -Y,R30
00076e e0a1      	LDI  R26,LOW(1)
00076f 940c 0679 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:14 WORDS
                 SUBOPT_0xA:
000771 dfb1      	RCALL SUBOPT_0x0
000772 e0e0      	LDI  R30,LOW(0)
000773 e0f0      	LDI  R31,HIGH(0)
000774 940e 08b3 	CALL __EQW12
000776 2e0e      	MOV  R0,R30
000777 01d6      	MOVW R26,R12
000778 e0e0      	LDI  R30,LOW(0)
000779 e0f0      	LDI  R31,HIGH(0)
00077a 940e 08b3 	CALL __EQW12
00077c 220e      	AND  R0,R30
00077d 01d5      	MOVW R26,R10
00077e e0e0      	LDI  R30,LOW(0)
00077f e0f0      	LDI  R31,HIGH(0)
000780 940e 08b3 	CALL __EQW12
000782 21e0      	AND  R30,R0
000783 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0xB:
000784 e8a0      	LDI  R26,LOW(_day_index)
000785 e0b0      	LDI  R27,HIGH(_day_index)
000786 940e 08ca 	CALL __EEPROMRDB
000788 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xC:
000789 e0a0      	LDI  R26,LOW(_enter_array)
00078a e0b0      	LDI  R27,HIGH(_enter_array)
00078b e0f0      	LDI  R31,0
00078c 0fee      	LSL  R30
00078d 1fff      	ROL  R31
00078e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xD:
00078f 0fea      	ADD  R30,R26
000790 1ffb      	ADC  R31,R27
000791 010f      	MOVW R0,R30
000792 81a8      	LD   R26,Y
000793 27bb      	CLR  R27
000794 0faa      	LSL  R26
000795 1fbb      	ROL  R27
000796 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xE:
000797 940e 08c6 	CALL __EEPROMRDW
000799 01d0      	MOVW R26,R0
00079a 940e 08d6 	CALL __EEPROMWRW
00079c 81e8      	LD   R30,Y
00079d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xF:
00079e e4a0      	LDI  R26,LOW(_exit_array)
00079f e0b0      	LDI  R27,HIGH(_exit_array)
0007a0 e0f0      	LDI  R31,0
0007a1 0fee      	LSL  R30
0007a2 1fff      	ROL  R31
0007a3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x10:
0007a4 940e 08a3 	CALL __CBD1
0007a6 940e 08c1 	CALL __PUTPARD1
0007a8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x11:
0007a9 91e0 0266 	LDS  R30,_year
0007ab 91f0 0267 	LDS  R31,_year+1
0007ad 2766      	CLR  R22
0007ae 2777      	CLR  R23
0007af 940e 08c1 	CALL __PUTPARD1
0007b1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x12:
0007b2 91e0 0264 	LDS  R30,_month
0007b4 91f0 0265 	LDS  R31,_month+1
0007b6 2766      	CLR  R22
0007b7 2777      	CLR  R23
0007b8 940e 08c1 	CALL __PUTPARD1
0007ba 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x13:
0007bb 91e0 0262 	LDS  R30,_day
0007bd 91f0 0263 	LDS  R31,_day+1
0007bf 2766      	CLR  R22
0007c0 2777      	CLR  R23
0007c1 940e 08c1 	CALL __PUTPARD1
0007c3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x14:
0007c4 01fe      	MOVW R30,R28
0007c5 93fa      	ST   -Y,R31
0007c6 93ea      	ST   -Y,R30
0007c7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x15:
0007c8 93fa      	ST   -Y,R31
0007c9 93ea      	ST   -Y,R30
0007ca 91e0 0260 	LDS  R30,_hour
0007cc 91f0 0261 	LDS  R31,_hour+1
0007ce 2766      	CLR  R22
0007cf 2777      	CLR  R23
0007d0 940e 08c1 	CALL __PUTPARD1
0007d2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x16:
0007d3 2766      	CLR  R22
0007d4 2777      	CLR  R23
0007d5 940e 08c1 	CALL __PUTPARD1
0007d7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x17:
0007d8 01de      	MOVW R26,R28
0007d9 940c 06b8 	JMP  _lcd_puts
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x18:
0007db e1a9      	LDI  R26,LOW(25)
0007dc e0b0      	LDI  R27,0
0007dd 940c 0891 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x19:
0007df e0a0      	LDI  R26,0
0007e0 99ca      	SBIC 0x19,2
0007e1 e0a1      	LDI  R26,1
0007e2 e0e0      	LDI  R30,LOW(0)
0007e3 940e 08ae 	CALL __EQB12
0007e5 2e0e      	MOV  R0,R30
0007e6 2fa1      	MOV  R26,R17
0007e7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1A:
0007e8 e0e0      	LDI  R30,LOW(0)
0007e9 940e 08ae 	CALL __EQB12
0007eb 21e0      	AND  R30,R0
0007ec 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1B:
0007ed e0e1      	LDI  R30,LOW(1)
0007ee 940e 08ae 	CALL __EQB12
0007f0 21e0      	AND  R30,R0
0007f1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1C:
0007f2 e0e2      	LDI  R30,LOW(2)
0007f3 940e 08ae 	CALL __EQB12
0007f5 21e0      	AND  R30,R0
0007f6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x1D:
0007f7 e084      	LDI  R24,4
0007f8 940e 0614 	CALL _sprintf
0007fa 9628      	ADIW R28,8
0007fb 940e 068a 	CALL _lcd_clear
0007fd cfda      	RJMP SUBOPT_0x17
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1E:
0007fe e0a0      	LDI  R26,0
0007ff 99c9      	SBIC 0x19,1
000800 e0a1      	LDI  R26,1
000801 e0e0      	LDI  R30,LOW(0)
000802 940e 08ae 	CALL __EQB12
000804 2e0e      	MOV  R0,R30
000805 e0a0      	LDI  R26,0
000806 fcf0      	SBRC R15,0
000807 e0a1      	LDI  R26,1
000808 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1F:
000809 e0a0      	LDI  R26,0
00080a 99c8      	SBIC 0x19,0
00080b e0a1      	LDI  R26,1
00080c e0e0      	LDI  R30,LOW(0)
00080d 940e 08ae 	CALL __EQB12
00080f 2e0e      	MOV  R0,R30
000810 e0a0      	LDI  R26,0
000811 fcf0      	SBRC R15,0
000812 e0a1      	LDI  R26,1
000813 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x20:
000814 91ed      	LD   R30,X+
000815 91fd      	LD   R31,X+
000816 9631      	ADIW R30,1
000817 93fe      	ST   -X,R31
000818 93ee      	ST   -X,R30
000819 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x21:
00081a 91ed      	LD   R30,X+
00081b 91fd      	LD   R31,X+
00081c 9731      	SBIW R30,1
00081d 93fe      	ST   -X,R31
00081e 93ee      	ST   -X,R30
00081f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x22:
                +
000820 e041     +LDI R20 , LOW ( 1 )
000821 e050     +LDI R21 , HIGH ( 1 )
                 	__GETWRN 20,21,1
                +
000822 5f2f     +SUBI R18 , LOW ( - 1 )
000823 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
000824 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x23:
000825 940e 08a9 	CALL __CWD1
000827 940e 08c1 	CALL __PUTPARD1
000829 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x24:
00082a 0fae      	ADD  R26,R30
00082b 1fbf      	ADC  R27,R31
00082c 940e 08c6 	CALL __EEPROMRDW
00082e cfa4      	RJMP SUBOPT_0x16
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x25:
00082f 01fe      	MOVW R30,R28
000830 9631      	ADIW R30,1
000831 93fa      	ST   -Y,R31
000832 93ea      	ST   -Y,R30
000833 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x26:
000834 e084      	LDI  R24,4
000835 940e 0614 	CALL _sprintf
000837 9628      	ADIW R28,8
000838 940e 068a 	CALL _lcd_clear
00083a 01de      	MOVW R26,R28
00083b 9611      	ADIW R26,1
00083c 940c 06b8 	JMP  _lcd_puts
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x27:
00083e e0a0      	LDI  R26,0
00083f 99c9      	SBIC 0x19,1
000840 e0a1      	LDI  R26,1
000841 e0e0      	LDI  R30,LOW(0)
000842 940e 08ae 	CALL __EQB12
000844 2e0e      	MOV  R0,R30
000845 2fa1      	MOV  R26,R17
000846 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x28:
000847 e0a0      	LDI  R26,0
000848 99c8      	SBIC 0x19,0
000849 e0a1      	LDI  R26,1
00084a e0e0      	LDI  R30,LOW(0)
00084b 940e 08ae 	CALL __EQB12
00084d 2e0e      	MOV  R0,R30
00084e 2fa1      	MOV  R26,R17
00084f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x29:
000850 91e0 0262 	LDS  R30,_day
000852 e8a0      	LDI  R26,LOW(_day_index)
000853 e0b0      	LDI  R27,HIGH(_day_index)
000854 940e 08de 	CALL __EEPROMWRB
000856 ced6      	RJMP SUBOPT_0x2
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x2A:
000857 932a      	ST   -Y,R18
000858 85ad      	LDD  R26,Y+13
000859 85be      	LDD  R27,Y+13+1
00085a 85ef      	LDD  R30,Y+15
00085b 89f8      	LDD  R31,Y+15+1
00085c 9509      	ICALL
00085d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x2B:
00085e 89e8      	LDD  R30,Y+16
00085f 89f9      	LDD  R31,Y+16+1
000860 9734      	SBIW R30,4
000861 8be8      	STD  Y+16,R30
000862 8bf9      	STD  Y+16+1,R31
000863 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2C:
000864 85ad      	LDD  R26,Y+13
000865 85be      	LDD  R27,Y+13+1
000866 85ef      	LDD  R30,Y+15
000867 89f8      	LDD  R31,Y+15+1
000868 9509      	ICALL
000869 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x2D:
00086a 89a8      	LDD  R26,Y+16
00086b 89b9      	LDD  R27,Y+16+1
00086c 9614      	ADIW R26,4
00086d 940e 08b9 	CALL __GETW1P
00086f 83ee      	STD  Y+6,R30
000870 83ff      	STD  Y+6+1,R31
000871 81ae      	LDD  R26,Y+6
000872 81bf      	LDD  R27,Y+6+1
000873 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x2E:
000874 89a8      	LDD  R26,Y+16
000875 89b9      	LDD  R27,Y+16+1
000876 9614      	ADIW R26,4
000877 940e 08b9 	CALL __GETW1P
000879 87ea      	STD  Y+10,R30
00087a 87fb      	STD  Y+10+1,R31
00087b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2F:
00087c 01de      	MOVW R26,R28
00087d 961c      	ADIW R26,12
00087e 940e 089b 	CALL __ADDW2R15
000880 940e 08b9 	CALL __GETW1P
000882 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x30:
000883 940e 066d 	CALL __lcd_write_data
000885 e0a3      	LDI  R26,LOW(3)
000886 e0b0      	LDI  R27,0
000887 940c 0891 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x31:
000889 e3a0      	LDI  R26,LOW(48)
00088a 940e 0648 	CALL __lcd_write_nibble_G101
                +
00088c ec88     +LDI R24 , LOW ( 200 )
00088d e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00088e 9701     +SBIW R24 , 1
00088f f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000890 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000891 9610      	adiw r26,0
000892 f039      	breq __delay_ms1
                 __delay_ms0:
000893 95a8      	wdr
                +
000894 ed80     +LDI R24 , LOW ( 0x7D0 )
000895 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000896 9701     +SBIW R24 , 1
000897 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000898 9711      	sbiw r26,1
000899 f7c9      	brne __delay_ms0
                 __delay_ms1:
00089a 9508      	ret
                 
                 __ADDW2R15:
00089b 2400      	CLR  R0
00089c 0daf      	ADD  R26,R15
00089d 1db0      	ADC  R27,R0
00089e 9508      	RET
                 
                 __ANEGW1:
00089f 95f1      	NEG  R31
0008a0 95e1      	NEG  R30
0008a1 40f0      	SBCI R31,0
0008a2 9508      	RET
                 
                 __CBD1:
0008a3 2ffe      	MOV  R31,R30
0008a4 0fff      	ADD  R31,R31
0008a5 0bff      	SBC  R31,R31
0008a6 2f6f      	MOV  R22,R31
0008a7 2f7f      	MOV  R23,R31
0008a8 9508      	RET
                 
                 __CWD1:
0008a9 2f6f      	MOV  R22,R31
0008aa 0f66      	ADD  R22,R22
0008ab 0b66      	SBC  R22,R22
0008ac 2f76      	MOV  R23,R22
0008ad 9508      	RET
                 
                 __EQB12:
0008ae 17ea      	CP   R30,R26
0008af e0e1      	LDI  R30,1
0008b0 f009      	BREQ __EQB12T
0008b1 27ee      	CLR  R30
                 __EQB12T:
0008b2 9508      	RET
                 
                 __EQW12:
0008b3 17ea      	CP   R30,R26
0008b4 07fb      	CPC  R31,R27
0008b5 e0e1      	LDI  R30,1
0008b6 f009      	BREQ __EQW12T
0008b7 27ee      	CLR  R30
                 __EQW12T:
0008b8 9508      	RET
                 
                 __GETW1P:
0008b9 91ed      	LD   R30,X+
0008ba 91fc      	LD   R31,X
0008bb 9711      	SBIW R26,1
0008bc 9508      	RET
                 
                 __GETW1PF:
0008bd 9005      	LPM  R0,Z+
0008be 91f4      	LPM  R31,Z
0008bf 2de0      	MOV  R30,R0
0008c0 9508      	RET
                 
                 __PUTPARD1:
0008c1 937a      	ST   -Y,R23
0008c2 936a      	ST   -Y,R22
0008c3 93fa      	ST   -Y,R31
0008c4 93ea      	ST   -Y,R30
0008c5 9508      	RET
                 
                 __EEPROMRDW:
0008c6 9611      	ADIW R26,1
0008c7 d002      	RCALL __EEPROMRDB
0008c8 2ffe      	MOV  R31,R30
0008c9 9711      	SBIW R26,1
                 
                 __EEPROMRDB:
0008ca 99e1      	SBIC EECR,EEWE
0008cb cffe      	RJMP __EEPROMRDB
0008cc 93ff      	PUSH R31
0008cd b7ff      	IN   R31,SREG
0008ce 94f8      	CLI
0008cf bbae      	OUT  EEARL,R26
0008d0 bbbf      	OUT  EEARH,R27
0008d1 9ae0      	SBI  EECR,EERE
0008d2 b3ed      	IN   R30,EEDR
0008d3 bfff      	OUT  SREG,R31
0008d4 91ff      	POP  R31
0008d5 9508      	RET
                 
                 __EEPROMWRW:
0008d6 d007      	RCALL __EEPROMWRB
0008d7 9611      	ADIW R26,1
0008d8 93ef      	PUSH R30
0008d9 2fef      	MOV  R30,R31
0008da d003      	RCALL __EEPROMWRB
0008db 91ef      	POP  R30
0008dc 9711      	SBIW R26,1
0008dd 9508      	RET
                 
                 __EEPROMWRB:
0008de 9be1      	SBIS EECR,EEWE
0008df c002      	RJMP __EEPROMWRB1
0008e0 95a8      	WDR
0008e1 cffc      	RJMP __EEPROMWRB
                 __EEPROMWRB1:
0008e2 b79f      	IN   R25,SREG
0008e3 94f8      	CLI
0008e4 bbae      	OUT  EEARL,R26
0008e5 bbbf      	OUT  EEARH,R27
0008e6 9ae0      	SBI  EECR,EERE
0008e7 b38d      	IN   R24,EEDR
0008e8 17e8      	CP   R30,R24
0008e9 f019      	BREQ __EEPROMWRB0
0008ea bbed      	OUT  EEDR,R30
0008eb 9ae2      	SBI  EECR,EEMWE
0008ec 9ae1      	SBI  EECR,EEWE
                 __EEPROMWRB0:
0008ed bf9f      	OUT  SREG,R25
0008ee 9508      	RET
                 
                 __SAVELOCR6:
0008ef 935a      	ST   -Y,R21
                 __SAVELOCR5:
0008f0 934a      	ST   -Y,R20
                 __SAVELOCR4:
0008f1 933a      	ST   -Y,R19
                 __SAVELOCR3:
0008f2 932a      	ST   -Y,R18
                 __SAVELOCR2:
0008f3 931a      	ST   -Y,R17
0008f4 930a      	ST   -Y,R16
0008f5 9508      	RET
                 
                 __LOADLOCR6:
0008f6 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0008f7 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0008f8 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0008f9 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0008fa 8119      	LDD  R17,Y+1
0008fb 8108      	LD   R16,Y
0008fc 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32A register use summary:
r0 :  29 r1 :   3 r2 :   6 r3 :   0 r4 :   3 r5 :   0 r6 :   3 r7 :   0 
r8 :  12 r9 :  13 r10:   6 r11:   2 r12:  14 r13:   5 r14:   0 r15:  17 
r16:  38 r17:  52 r18:  44 r19:  22 r20:  21 r21:  28 r22:  19 r23:  10 
r24:  32 r25:   9 r26: 199 r27:  86 r28:  40 r29:   1 r30: 403 r31: 156 
x  :  39 y  : 243 z  :  16 
Registers used: 31 out of 35 (88.6%)

ATmega32A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   6 add   :  10 
adiw  :  53 and   :   6 andi  :   8 asr   :   0 bclr  :   0 bld   :   4 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  40 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  18 
brlt  :  14 brmi  :   1 brne  :  48 brpl  :   1 brsh  :   8 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  : 230 
cbi   :   9 cbr   :   0 clc   :   0 clh   :   0 cli   :   3 cln   :   0 
clr   :  31 cls   :   0 clt   :   4 clv   :   0 clz   :   0 com   :   0 
cp    :  18 cpc   :  20 cpi   :  54 cpse  :   0 dec   :   8 des   :   0 
eor   :   1 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   7 inc   :   3 jmp   :  28 ld    :  57 ldd   :  78 ldi   : 265 
lds   :  29 lpm   :  16 lsl   :   3 lsr   :   0 mov   :  41 movw  :  48 
mul   :   1 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   1 
ori   :   7 out   :  26 pop   :   5 push  :   5 rcall :  24 ret   :  70 
reti  :   2 rjmp  : 149 rol   :   3 ror   :   0 sbc   :   3 sbci  :  10 
sbi   :  17 sbic  :  19 sbis  :  28 sbiw  :  48 sbr   :   0 sbrc  :   8 
sbrs  :  13 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   3 
ses   :   0 set   :   4 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    : 117 std   :  33 sts   :  27 sub   :   4 subi  :  30 swap  :   1 
tst   :   4 wdr   :   2 
Instructions used: 67 out of 116 (57.8%)

ATmega32A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0011fa   4302    300   4602   32768  14.0%
[.dseg] 0x000060 0x00026f      0     15     15    2048   0.7%
[.eseg] 0x000000 0x000081      0    129    129    1024  12.6%

Assembly complete, 0 errors, 15 warnings
