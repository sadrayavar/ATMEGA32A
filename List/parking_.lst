
AVRASM ver. 2.1.30  D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm Thu Feb 08 13:00:12 2024

D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1087): warning: Register r4 already defined by the .DEF directive
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1088): warning: Register r5 already defined by the .DEF directive
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1089): warning: Register r6 already defined by the .DEF directive
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1090): warning: Register r7 already defined by the .DEF directive
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1091): warning: Register r9 already defined by the .DEF directive
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1092): warning: Register r8 already defined by the .DEF directive
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1093): warning: Register r11 already defined by the .DEF directive
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1094): warning: Register r10 already defined by the .DEF directive
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1095): warning: Register r13 already defined by the .DEF directive
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1096): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Release
                 ;Chip type              : ATmega32A
                 ;Program type           : Application
                 ;Clock frequency        : 8/000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32A
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _n_vurud=R4
                 	.DEF _n_vurud_msb=R5
                 	.DEF _n_khuruj=R6
                 	.DEF _n_khuruj_msb=R7
                 	.DEF _capacity=R9
                 	.DEF _reserved=R8
                 	.DEF _minute=R11
                 	.DEF _hour=R10
                 	.DEF _second=R13
                 	.DEF _day=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 00bd 	JMP  __RESET
000002 940c 0126 	JMP  _ext_int0_isr
000004 940c 013f 	JMP  _ext_int1_isr
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 00ec 	JMP  _timer2_ovf_isr
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
000033 0000      	.DW  0x0000
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000034 0a00
000035 3b17      	.DB  0x0,0xA,0x17,0x3B
000036 0a0c      	.DB  0xC,0xA
                 
                 _0x3:
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1143): warning: .cseg .db misalignment - padding zero byte
000037 000a      	.DB  0xA
                 _0x4:
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1145): warning: .cseg .db misalignment - padding zero byte
000038 000c      	.DB  0xC
                 _0x5:
000039 057a      	.DB  0x7A,0x5
                 _0x0:
00003a 6173
00003b 6976
00003c 676e
00003d 6420      	.DB  0x73,0x61,0x76,0x69,0x6E,0x67,0x20,0x64
00003e 7461
00003f 0061
000040 6143
000041 3d70      	.DB  0x61,0x74,0x61,0x0,0x43,0x61,0x70,0x3D
000042 6425
000043 2520
000044 2f64
000045 6425      	.DB  0x25,0x64,0x20,0x25,0x64,0x2F,0x25,0x64
000046 252f
000047 0064
000048 6425
000049 253a      	.DB  0x2F,0x25,0x64,0x0,0x25,0x64,0x3A,0x25
00004a 3a64
00004b 6425
00004c 2020
00004d 6552      	.DB  0x64,0x3A,0x25,0x64,0x20,0x20,0x52,0x65
00004e 3d73
00004f 6425
000050 0020
000051 4620      	.DB  0x73,0x3D,0x25,0x64,0x20,0x0,0x20,0x46
000052 6c75
000053 006c
000054 4520
000055 706d      	.DB  0x75,0x6C,0x6C,0x0,0x20,0x45,0x6D,0x70
000056 5400
000057 6d69
000058 2065
000059 6553      	.DB  0x0,0x54,0x69,0x6D,0x65,0x20,0x53,0x65
00005a 7474
00005b 6e69
00005c 2067
00005d 3e3e      	.DB  0x74,0x74,0x69,0x6E,0x67,0x20,0x3E,0x3E
00005e 4900
00005f 264e
000060 554f
000061 2054      	.DB  0x0,0x49,0x4E,0x26,0x4F,0x55,0x54,0x20
000062 6553
000063 7261
000064 6863
000065 3e20      	.DB  0x53,0x65,0x61,0x72,0x63,0x68,0x20,0x3E
000066 003e
000067 6552
000068 6573
000069 7672      	.DB  0x3E,0x0,0x52,0x65,0x73,0x65,0x72,0x76
00006a 5f65
00006b 6150
00006c 6b72
00006d 3e20      	.DB  0x65,0x5F,0x50,0x61,0x72,0x6B,0x20,0x3E
00006e 003e
00006f 6553
000070 2074
000071 6164      	.DB  0x3E,0x0,0x53,0x65,0x74,0x20,0x64,0x61
000072 6174
000073 3e20
000074 003e
000075 6553      	.DB  0x74,0x61,0x20,0x3E,0x3E,0x0,0x53,0x65
000076 2074
000077 696d
000078 3d6e
000079 6425      	.DB  0x74,0x20,0x6D,0x69,0x6E,0x3D,0x25,0x64
00007a 2020
00007b 003e
00007c 6553
00007d 2074      	.DB  0x20,0x20,0x3E,0x0,0x53,0x65,0x74,0x20
00007e 6f68
00007f 7275
000080 253d
000081 2064      	.DB  0x68,0x6F,0x75,0x72,0x3D,0x25,0x64,0x20
000082 3e20
000083 2500
000084 2f64
000085 6425      	.DB  0x20,0x3E,0x0,0x25,0x64,0x2F,0x25,0x64
000086 252f
000087 2064
000088 6900
000089 3d6e      	.DB  0x2F,0x25,0x64,0x20,0x0,0x69,0x6E,0x3D
00008a 6425
00008b 6f20
00008c 7475
00008d 253d      	.DB  0x25,0x64,0x20,0x6F,0x75,0x74,0x3D,0x25
00008e 0064
00008f 6552
000090 6573
000091 7672      	.DB  0x64,0x0,0x52,0x65,0x73,0x65,0x72,0x76
000092 6465
000093 253d
000094 0064
000095 6553      	.DB  0x65,0x64,0x3D,0x25,0x64,0x0,0x53,0x65
000096 2074
000097 6f6d
000098 746e
000099 3d68      	.DB  0x74,0x20,0x6D,0x6F,0x6E,0x74,0x68,0x3D
00009a 6425
00009b 2020
00009c 003e
00009d 6553      	.DB  0x25,0x64,0x20,0x20,0x3E,0x0,0x53,0x65
00009e 2074
00009f 6164
0000a0 3d79
0000a1 6425      	.DB  0x74,0x20,0x64,0x61,0x79,0x3D,0x25,0x64
0000a2 2020
0000a3 003e
0000a4 6553
0000a5 2074      	.DB  0x20,0x20,0x3E,0x0,0x53,0x65,0x74,0x20
0000a6 6579
0000a7 7261
0000a8 253d
0000a9 2064      	.DB  0x79,0x65,0x61,0x72,0x3D,0x25,0x64,0x20
0000aa 3e20
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1177): warning: .cseg .db misalignment - padding zero byte
0000ab 0000      	.DB  0x20,0x3E,0x0
                 _0x2020003:
0000ac c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
0000ad 0001      	.DW  0x01
0000ae 0002      	.DW  0x02
0000af 0066      	.DW  __REG_BIT_VARS*2
                 
0000b0 0006      	.DW  0x06
0000b1 0008      	.DW  0x08
0000b2 0068      	.DW  __REG_VARS*2
                 
0000b3 0001      	.DW  0x01
0000b4 0260      	.DW  _month
0000b5 0070      	.DW  _0x4*2
                 
0000b6 0002      	.DW  0x02
0000b7 0261      	.DW  _year
0000b8 0072      	.DW  _0x5*2
                 
0000b9 0002      	.DW  0x02
0000ba 0263      	.DW  __base_y_G101
0000bb 0158      	.DW  _0x2020003*2
                 
                 _0xFFFFFFFF:
0000bc 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
0000bd 94f8      	CLI
0000be 27ee      	CLR  R30
0000bf bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
0000c0 e0f1      	LDI  R31,1
0000c1 bff5      	OUT  MCUCR,R31
0000c2 bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
0000c3 e1f8      	LDI  R31,0x18
0000c4 bdf1      	OUT  WDTCR,R31
0000c5 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
0000c6 e08d      	LDI  R24,(14-2)+1
0000c7 e0a2      	LDI  R26,2
0000c8 27bb      	CLR  R27
                 __CLEAR_REG:
0000c9 93ed      	ST   X+,R30
0000ca 958a      	DEC  R24
0000cb f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0000cc e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
0000cd e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
0000ce e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
0000cf 93ed      	ST   X+,R30
0000d0 9701      	SBIW R24,1
0000d1 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0000d2 e5ea      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0000d3 e0f1      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0000d4 9185      	LPM  R24,Z+
0000d5 9195      	LPM  R25,Z+
0000d6 9700      	SBIW R24,0
0000d7 f061      	BREQ __GLOBAL_INI_END
0000d8 91a5      	LPM  R26,Z+
0000d9 91b5      	LPM  R27,Z+
0000da 9005      	LPM  R0,Z+
0000db 9015      	LPM  R1,Z+
0000dc 01bf      	MOVW R22,R30
0000dd 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0000de 9005      	LPM  R0,Z+
0000df 920d      	ST   X+,R0
0000e0 9701      	SBIW R24,1
0000e1 f7e1      	BRNE __GLOBAL_INI_LOOP
0000e2 01fb      	MOVW R30,R22
0000e3 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0000e4 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0000e5 bfed      	OUT  SPL,R30
0000e6 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000e7 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000e8 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000e9 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000ea 940c 015e 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <mega32a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h> // delay_ms functions
                 ;#include <stdio.h> // sprintf function
                 ;#include <alcd.h>  // lcd related functions
                 ;#define xtal 8000000
                 ;
                 ;// prototyping functions
                 ;char ok(void);
                 ;char in_out_search(void);
                 ;char time_set(void);
                 ;char reserve_park(void);
                 ;char set_data(void);
                 ;
                 ;// parking related variables
                 ;unsigned int n_vurud, n_khuruj; // maximum  65535  car per day
                 ;eeprom unsigned int enter_array[31], exit_array[31]; // for saving enters and exists
                 ;eeprom unsigned char i; // ?
                 ;unsigned char const init_capacity = 10;
                 
                 	.DSEG
                 ;signed char capacity = init_capacity, reserved = 0;
                 ;bit is_full = 0, is_emp = 0;
                 ;
                 ;// date related variables
                 ;signed char minute = 59, hour = 23, second = 10, day = 12, month = 12;
                 ;signed int year = 1402;
                 ;
                 ;// define timer interrupt: clock and date logic
                 ;interrupt[TIM2_OVF] void timer2_ovf_isr(void)
                 ; 0000 001C {
                 
                 	.CSEG
                 _timer2_ovf_isr:
                 ; .FSTART _timer2_ovf_isr
0000ec 940e 06e1 	CALL SUBOPT_0x0
                 ; 0000 001D 
                 ; 0000 001E   // logic of second, minute, hour
                 ; 0000 001F   if (second == 59)
0000ee e3eb      	LDI  R30,LOW(59)
0000ef 15ed      	CP   R30,R13
0000f0 f471      	BRNE _0x6
                 ; 0000 0020   {
                 ; 0000 0021     second = 0;
0000f1 24dd      	CLR  R13
                 ; 0000 0022     if (minute == 59)
0000f2 15eb      	CP   R30,R11
0000f3 f449      	BRNE _0x7
                 ; 0000 0023     {
                 ; 0000 0024       minute = 0;
0000f4 24bb      	CLR  R11
                 ; 0000 0025       if (hour == 23)
0000f5 e1e7      	LDI  R30,LOW(23)
0000f6 15ea      	CP   R30,R10
0000f7 f419      	BRNE _0x8
                 ; 0000 0026       {
                 ; 0000 0027         hour = 0;
0000f8 24aa      	CLR  R10
                 ; 0000 0028         day++;
0000f9 94c3      	INC  R12
                 ; 0000 0029       }
                 ; 0000 002A       else
0000fa c001      	RJMP _0x9
                 _0x8:
                 ; 0000 002B         hour++;
0000fb 94a3      	INC  R10
                 ; 0000 002C     }
                 _0x9:
                 ; 0000 002D     else
0000fc c001      	RJMP _0xA
                 _0x7:
                 ; 0000 002E       minute++;
0000fd 94b3      	INC  R11
                 ; 0000 002F   }
                 _0xA:
                 ; 0000 0030   else
0000fe c001      	RJMP _0xB
                 _0x6:
                 ; 0000 0031     second++;
0000ff 94d3      	INC  R13
                 ; 0000 0032 
                 ; 0000 0033   // logic of day, month
                 ; 0000 0034   if (month <= 6)
                 _0xB:
000100 91a0 0260 	LDS  R26,_month
000102 30a7      	CPI  R26,LOW(0x7)
000103 f434      	BRGE _0xC
                 ; 0000 0035   {
                 ; 0000 0036     if (day > 31)
000104 e1ef      	LDI  R30,LOW(31)
000105 15ec      	CP   R30,R12
000106 f414      	BRGE _0xD
                 ; 0000 0037     {
                 ; 0000 0038       day = 1;
000107 940e 06e8 	CALL SUBOPT_0x1
                 ; 0000 0039       month++;
                 ; 0000 003A     }
                 ; 0000 003B   }
                 _0xD:
                 ; 0000 003C   else
000109 c00f      	RJMP _0xE
                 _0xC:
                 ; 0000 003D   {
                 ; 0000 003E     if (month == 12)
00010a 91a0 0260 	LDS  R26,_month
00010c 30ac      	CPI  R26,LOW(0xC)
00010d f431      	BRNE _0xF
                 ; 0000 003F     {
                 ; 0000 0040       if (day > 29)
00010e e1ed      	LDI  R30,LOW(29)
00010f 15ec      	CP   R30,R12
000110 f414      	BRGE _0x10
                 ; 0000 0041       {
                 ; 0000 0042         day = 1;
000111 940e 06e8 	CALL SUBOPT_0x1
                 ; 0000 0043         month++;
                 ; 0000 0044       }
                 ; 0000 0045     }
                 _0x10:
                 ; 0000 0046     else
000113 c005      	RJMP _0x11
                 _0xF:
                 ; 0000 0047     {
                 ; 0000 0048       if (day > 30)
000114 e1ee      	LDI  R30,LOW(30)
000115 15ec      	CP   R30,R12
000116 f414      	BRGE _0x12
                 ; 0000 0049       {
                 ; 0000 004A         day = 1;
000117 940e 06e8 	CALL SUBOPT_0x1
                 ; 0000 004B         month++;
                 ; 0000 004C       }
                 ; 0000 004D     }
                 _0x12:
                 _0x11:
                 ; 0000 004E   }
                 _0xE:
                 ; 0000 004F 
                 ; 0000 0050   // logic of year
                 ; 0000 0051   if (month > 12)
000119 91a0 0260 	LDS  R26,_month
00011b 30ad      	CPI  R26,LOW(0xD)
00011c f044      	BRLT _0x13
                 ; 0000 0052   {
                 ; 0000 0053     month = 1;
00011d e0e1      	LDI  R30,LOW(1)
00011e 93e0 0260 	STS  _month,R30
                 ; 0000 0054     year++;
000120 940e 06f0 	CALL SUBOPT_0x2
000122 9631      	ADIW R30,1
000123 93fe      	ST   -X,R31
000124 93ee      	ST   -X,R30
                 ; 0000 0055   }
                 ; 0000 0056 }
                 _0x13:
000125 c031      	RJMP _0xCB
                 ; .FEND
                 ;
                 ;// define interrupt 0: for exiting cars
                 ;interrupt[EXT_INT0] void ext_int0_isr(void)
                 ; 0000 005A {
                 _ext_int0_isr:
                 ; .FSTART _ext_int0_isr
000126 940e 06e1 	CALL SUBOPT_0x0
                 ; 0000 005B   capacity++;
000128 9493      	INC  R9
                 ; 0000 005C   n_khuruj++;  // Incrementing the count of cars leaving the parking
000129 01f3      	MOVW R30,R6
00012a 9631      	ADIW R30,1
00012b 013f      	MOVW R6,R30
                 ; 0000 005D 
                 ; 0000 005E   // correct variables if they pass the inittilized capacity
                 ; 0000 005F   if ((capacity + reserved) >= init_capacity)
00012c 940e 06f5 	CALL SUBOPT_0x3
00012e f02c      	BRLT _0x14
                 ; 0000 0060   {
                 ; 0000 0061     capacity = init_capacity - reserved;
00012f e0ea      	LDI  R30,LOW(10)
000130 19e8      	SUB  R30,R8
000131 2e9e      	MOV  R9,R30
                 ; 0000 0062     is_emp = 1;
000132 9468      	SET
000133 c001      	RJMP _0xC7
                 ; 0000 0063   }
                 ; 0000 0064   else
                 _0x14:
                 ; 0000 0065   {
                 ; 0000 0066     is_emp = 0;
000134 94e8      	CLT
                 _0xC7:
000135 f821      	BLD  R2,1
                 ; 0000 0067   }
                 ; 0000 0068 
                 ; 0000 0069   // check if the parking is full
                 ; 0000 006A   if (capacity <= 0)
000136 e0e0      	LDI  R30,LOW(0)
000137 15e9      	CP   R30,R9
000138 f01c      	BRLT _0x16
                 ; 0000 006B   {
                 ; 0000 006C     capacity = 0;
000139 2499      	CLR  R9
                 ; 0000 006D     is_full = 1;
00013a 9468      	SET
00013b c001      	RJMP _0xC8
                 ; 0000 006E   }
                 ; 0000 006F   else
                 _0x16:
                 ; 0000 0070   {
                 ; 0000 0071     is_full = 0;
00013c 94e8      	CLT
                 _0xC8:
00013d f820      	BLD  R2,0
                 ; 0000 0072   }
                 ; 0000 0073 }
00013e c018      	RJMP _0xCB
                 ; .FEND
                 ;
                 ;// define interrupt 1: for entering cars
                 ;interrupt[EXT_INT1] void ext_int1_isr(void)
                 ; 0000 0077 {
                 _ext_int1_isr:
                 ; .FSTART _ext_int1_isr
00013f 940e 06e1 	CALL SUBOPT_0x0
                 ; 0000 0078   capacity--;
000141 949a      	DEC  R9
                 ; 0000 0079   n_vurud++;
000142 01f2      	MOVW R30,R4
000143 9631      	ADIW R30,1
000144 012f      	MOVW R4,R30
                 ; 0000 007A 
                 ; 0000 007B   if ((capacity) <= 0)
000145 e0e0      	LDI  R30,LOW(0)
000146 15e9      	CP   R30,R9
000147 f01c      	BRLT _0x18
                 ; 0000 007C   {
                 ; 0000 007D     capacity = 0;
000148 2499      	CLR  R9
                 ; 0000 007E     is_full = 1;
000149 9468      	SET
00014a c001      	RJMP _0xC9
                 ; 0000 007F   }
                 ; 0000 0080   else
                 _0x18:
                 ; 0000 0081   {
                 ; 0000 0082     is_full = 0;
00014b 94e8      	CLT
                 _0xC9:
00014c f820      	BLD  R2,0
                 ; 0000 0083   }
                 ; 0000 0084 
                 ; 0000 0085   if ((capacity + reserved) >= init_capacity)
00014d 940e 06f5 	CALL SUBOPT_0x3
00014f f02c      	BRLT _0x1A
                 ; 0000 0086   {
                 ; 0000 0087     capacity = init_capacity - reserved;
000150 e0ea      	LDI  R30,LOW(10)
000151 19e8      	SUB  R30,R8
000152 2e9e      	MOV  R9,R30
                 ; 0000 0088     is_emp = 1;
000153 9468      	SET
000154 c001      	RJMP _0xCA
                 ; 0000 0089   }
                 ; 0000 008A   else
                 _0x1A:
                 ; 0000 008B   {
                 ; 0000 008C     is_emp = 0;
000155 94e8      	CLT
                 _0xCA:
000156 f821      	BLD  R2,1
                 ; 0000 008D   }
                 ; 0000 008E }
                 _0xCB:
000157 91e9      	LD   R30,Y+
000158 bfef      	OUT  SREG,R30
000159 91f9      	LD   R31,Y+
00015a 91e9      	LD   R30,Y+
00015b 91b9      	LD   R27,Y+
00015c 91a9      	LD   R26,Y+
00015d 9518      	RETI
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 0091 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0092 
                 ; 0000 0093   char line[17], line2[17];
                 ; 0000 0094 
                 ; 0000 0095   // GICR|=0xC0;
                 ; 0000 0096   // MCUCR=0x0A;
                 ; 0000 0097   // MCUCSR=0x00;
                 ; 0000 0098   // GIFR=0xC0;
                 ; 0000 0099 
                 ; 0000 009A   GICR |= 0xC0;
00015e 97a2      	SBIW R28,34
                 ;	line -> Y+17
                 ;	line2 -> Y+0
00015f b7eb      	IN   R30,0x3B
000160 6ce0      	ORI  R30,LOW(0xC0)
000161 bfeb      	OUT  0x3B,R30
                 ; 0000 009B   MCUCR = 0x0B;
000162 e0eb      	LDI  R30,LOW(11)
000163 bfe5      	OUT  0x35,R30
                 ; 0000 009C   MCUCSR = 0x00;
000164 e0e0      	LDI  R30,LOW(0)
000165 bfe4      	OUT  0x34,R30
                 ; 0000 009D   GIFR = 0xC0;
000166 ece0      	LDI  R30,LOW(192)
000167 bfea      	OUT  0x3A,R30
                 ; 0000 009E 
                 ; 0000 009F   // initilize lcd
                 ; 0000 00A0   lcd_init(16);
000168 e1a0      	LDI  R26,LOW(16)
000169 940e 0698 	CALL _lcd_init
                 ; 0000 00A1   lcd_clear();
00016b 940e 0648 	CALL _lcd_clear
                 ; 0000 00A2   lcd_gotoxy(0, 1);
00016d 940e 0701 	CALL SUBOPT_0x4
                 ; 0000 00A3   delay_ms(300);
00016f e2ac      	LDI  R26,LOW(300)
000170 e0b1      	LDI  R27,HIGH(300)
000171 940e 07e1 	CALL _delay_ms
                 ; 0000 00A4 
                 ; 0000 00A5   ASSR = 0x08; // timer2
000173 e0e8      	LDI  R30,LOW(8)
000174 bde2      	OUT  0x22,R30
                 ; 0000 00A6   TCCR2 = 0x05;
000175 e0e5      	LDI  R30,LOW(5)
000176 bde5      	OUT  0x25,R30
                 ; 0000 00A7   TCNT2 = 0x00;
000177 e0e0      	LDI  R30,LOW(0)
000178 bde4      	OUT  0x24,R30
                 ; 0000 00A8   OCR2 = 0x00;
000179 bde3      	OUT  0x23,R30
                 ; 0000 00A9   TIMSK = 0x40;
00017a e4e0      	LDI  R30,LOW(64)
00017b bfe9      	OUT  0x39,R30
                 ; 0000 00AA 
                 ; 0000 00AB   PORTA = (1 << DDD0) | (1 << DDD1) | (1 << DDD2) | (1 << DDD3) | (1 << DDD4);
00017c e1ef      	LDI  R30,LOW(31)
00017d bbeb      	OUT  0x1B,R30
                 ; 0000 00AC 
                 ; 0000 00AD   day = i; // i in epprom
00017e 940e 0706 	CALL SUBOPT_0x5
000180 2ece      	MOV  R12,R30
                 ; 0000 00AE 
                 ; 0000 00AF #asm("sei")
000181 9478      	sei
                 ; 0000 00B0   capacity = capacity - reserved;
000182 1898      	SUB  R9,R8
                 ; 0000 00B1 
                 ; 0000 00B2   while (1)
                 _0x1C:
                 ; 0000 00B3   {
                 ; 0000 00B4 
                 ; 0000 00B5     if (PINA .2 == 0)
000183 99ca      	SBIC 0x19,2
000184 c003      	RJMP _0x1F
                 ; 0000 00B6     {
                 ; 0000 00B7       while (PINA .2 == 0)
                 _0x20:
000185 9bca      	SBIS 0x19,2
                 ; 0000 00B8         ;
000186 cffe      	RJMP _0x20
                 ; 0000 00B9       ok();
000187 d07b      	RCALL _ok
                 ; 0000 00BA     }
                 ; 0000 00BB 
                 ; 0000 00BC     // save the enter and exits at the end of the day
                 ; 0000 00BD     if (hour == 0 & minute == 0 & second == 0)
                 _0x1F:
000188 940e 070b 	CALL SUBOPT_0x6
00018a f181      	BREQ _0x23
                 ; 0000 00BE     { //  data will save   in 0:0:00
                 ; 0000 00BF       enter_array[i] = n_vurud;
00018b 940e 0706 	CALL SUBOPT_0x5
00018d e0a0      	LDI  R26,LOW(_enter_array)
00018e e0b0      	LDI  R27,HIGH(_enter_array)
00018f e0f0      	LDI  R31,0
000190 0fee      	LSL  R30
000191 1fff      	ROL  R31
000192 0fae      	ADD  R26,R30
000193 1fbf      	ADC  R27,R31
000194 01f2      	MOVW R30,R4
000195 940e 082f 	CALL __EEPROMWRW
                 ; 0000 00C0       exit_array[i] = n_khuruj;
000197 940e 0706 	CALL SUBOPT_0x5
000199 e3ae      	LDI  R26,LOW(_exit_array)
00019a e0b0      	LDI  R27,HIGH(_exit_array)
00019b e0f0      	LDI  R31,0
00019c 0fee      	LSL  R30
00019d 1fff      	ROL  R31
00019e 0fae      	ADD  R26,R30
00019f 1fbf      	ADC  R27,R31
0001a0 01f3      	MOVW R30,R6
0001a1 940e 082f 	CALL __EEPROMWRW
                 ; 0000 00C1       i++;
0001a3 940e 0706 	CALL SUBOPT_0x5
0001a5 5fef      	SUBI R30,-LOW(1)
0001a6 940e 0837 	CALL __EEPROMWRB
                 ; 0000 00C2 
                 ; 0000 00C3       if (i > 30) // 30 31 29 yek mah
0001a8 940e 0706 	CALL SUBOPT_0x5
0001aa 31ef      	CPI  R30,LOW(0x1F)
0001ab f028      	BRLO _0x24
                 ; 0000 00C4         i = 0;
0001ac e7ac      	LDI  R26,LOW(_i)
0001ad e0b0      	LDI  R27,HIGH(_i)
0001ae e0e0      	LDI  R30,LOW(0)
0001af 940e 0837 	CALL __EEPROMWRB
                 ; 0000 00C5 
                 ; 0000 00C6       while (hour == 0 & minute == 0 & second == 0)
                 _0x24:
                 _0x25:
0001b1 940e 070b 	CALL SUBOPT_0x6
0001b3 f039      	BREQ _0x27
                 ; 0000 00C7       {
                 ; 0000 00C8         lcd_clear();
0001b4 940e 0648 	CALL _lcd_clear
                 ; 0000 00C9         lcd_putsf("saving data");
                +
0001b6 e7a4     +LDI R26 , LOW ( 2 * _0x0 + ( 0 ) )
0001b7 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW2FN _0x0,0
0001b8 940e 0685 	CALL _lcd_putsf
                 ; 0000 00CA       }
0001ba cff6      	RJMP _0x25
                 _0x27:
                 ; 0000 00CB     }
                 ; 0000 00CC 
                 ; 0000 00CD     sprintf(line, "Cap=%d %d/%d/%d", capacity, year, month, day);
                 _0x23:
0001bb 01fe      	MOVW R30,R28
0001bc 9671      	ADIW R30,17
0001bd 93fa      	ST   -Y,R31
0001be 93ea      	ST   -Y,R30
                +
0001bf e8e0     +LDI R30 , LOW ( 2 * _0x0 + ( 12 ) )
0001c0 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 12 ) )
                 	__POINTW1FN _0x0,12
0001c1 93fa      	ST   -Y,R31
0001c2 93ea      	ST   -Y,R30
0001c3 2de9      	MOV  R30,R9
0001c4 940e 071b 	CALL SUBOPT_0x7
0001c6 940e 0720 	CALL SUBOPT_0x8
0001c8 91e0 0260 	LDS  R30,_month
0001ca 940e 071b 	CALL SUBOPT_0x7
0001cc 2dec      	MOV  R30,R12
0001cd 940e 071b 	CALL SUBOPT_0x7
0001cf e180      	LDI  R24,16
0001d0 940e 05d2 	CALL _sprintf
0001d2 9664      	ADIW R28,20
                 ; 0000 00CE     sprintf(line2, "%d:%d:%d  Res=%d ", hour, minute, second, reserved);
0001d3 940e 0729 	CALL SUBOPT_0x9
                +
0001d5 e9e0     +LDI R30 , LOW ( 2 * _0x0 + ( 28 ) )
0001d6 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 28 ) )
                 	__POINTW1FN _0x0,28
0001d7 93fa      	ST   -Y,R31
0001d8 93ea      	ST   -Y,R30
0001d9 2dea      	MOV  R30,R10
0001da 940e 071b 	CALL SUBOPT_0x7
0001dc 2deb      	MOV  R30,R11
0001dd 940e 071b 	CALL SUBOPT_0x7
0001df 2ded      	MOV  R30,R13
0001e0 940e 071b 	CALL SUBOPT_0x7
0001e2 2de8      	MOV  R30,R8
0001e3 940e 071b 	CALL SUBOPT_0x7
0001e5 e180      	LDI  R24,16
0001e6 940e 05d2 	CALL _sprintf
0001e8 9664      	ADIW R28,20
                 ; 0000 00CF     // sprintf(line, "%d/%d/%d  %d:%d:%d", year, month, day, hour, minute, second);
                 ; 0000 00D0     // sprintf(line2, "Cap=%d   R=%d ", capacity, reserved);
                 ; 0000 00D1 
                 ; 0000 00D2     lcd_clear();
0001e9 940e 0648 	CALL _lcd_clear
                 ; 0000 00D3 
                 ; 0000 00D4     lcd_puts(line);
0001eb 01de      	MOVW R26,R28
0001ec 9651      	ADIW R26,17
0001ed 940e 0676 	CALL _lcd_puts
                 ; 0000 00D5 
                 ; 0000 00D6     if (is_full == 1)
0001ef fe20      	SBRS R2,0
0001f0 c004      	RJMP _0x28
                 ; 0000 00D7       lcd_putsf(" Full");
                +
0001f1 eaa2     +LDI R26 , LOW ( 2 * _0x0 + ( 46 ) )
0001f2 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 46 ) )
                 	__POINTW2FN _0x0,46
0001f3 940e 0685 	CALL _lcd_putsf
                 ; 0000 00D8 
                 ; 0000 00D9     if (is_emp == 1)
                 _0x28:
0001f5 fe21      	SBRS R2,1
0001f6 c004      	RJMP _0x29
                 ; 0000 00DA       lcd_putsf(" Emp");
                +
0001f7 eaa8     +LDI R26 , LOW ( 2 * _0x0 + ( 52 ) )
0001f8 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 52 ) )
                 	__POINTW2FN _0x0,52
0001f9 940e 0685 	CALL _lcd_putsf
                 ; 0000 00DB 
                 ; 0000 00DC     lcd_gotoxy(0, 1);
                 _0x29:
0001fb 940e 0701 	CALL SUBOPT_0x4
                 ; 0000 00DD     lcd_puts(line2);
0001fd 940e 072d 	CALL SUBOPT_0xA
                 ; 0000 00DE     delay_ms(25);
0001ff 940e 0730 	CALL SUBOPT_0xB
                 ; 0000 00DF   }
000201 cf81      	RJMP _0x1C
                 ; 0000 00E0 }
                 _0x2A:
000202 cfff      	RJMP _0x2A
                 ; .FEND
                 ;
                 ;/// Functions 4 ok and...
                 ;char ok(void)
                 ; 0000 00E4 {
                 _ok:
                 ; .FSTART _ok
                 ; 0000 00E5   char _chose = 0;
                 ; 0000 00E6   while (1)
000203 931a      	ST   -Y,R17
                 ;	_chose -> R17
000204 e010      	LDI  R17,0
                 _0x2B:
                 ; 0000 00E7   {
                 ; 0000 00E8     if (_chose == 0)
000205 3010      	CPI  R17,0
000206 f431      	BRNE _0x2E
                 ; 0000 00E9     {
                 ; 0000 00EA       lcd_clear();
000207 940e 0648 	CALL _lcd_clear
                 ; 0000 00EB       lcd_putsf("Time Setting >>");
                +
000209 eaad     +LDI R26 , LOW ( 2 * _0x0 + ( 57 ) )
00020a e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 57 ) )
                 	__POINTW2FN _0x0,57
00020b 940e 0685 	CALL _lcd_putsf
                 ; 0000 00EC     }
                 ; 0000 00ED 
                 ; 0000 00EE     if (_chose == 1)
                 _0x2E:
00020d 3011      	CPI  R17,1
00020e f431      	BRNE _0x2F
                 ; 0000 00EF     {
                 ; 0000 00F0       lcd_clear();
00020f 940e 0648 	CALL _lcd_clear
                 ; 0000 00F1       lcd_putsf("IN&OUT Search >>");
                +
000211 ebad     +LDI R26 , LOW ( 2 * _0x0 + ( 73 ) )
000212 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 73 ) )
                 	__POINTW2FN _0x0,73
000213 940e 0685 	CALL _lcd_putsf
                 ; 0000 00F2     }
                 ; 0000 00F3 
                 ; 0000 00F4     if (_chose == 2)
                 _0x2F:
000215 3012      	CPI  R17,2
000216 f431      	BRNE _0x30
                 ; 0000 00F5     {
                 ; 0000 00F6       lcd_clear();
000217 940e 0648 	CALL _lcd_clear
                 ; 0000 00F7       lcd_putsf("Reserve_Park >>");
                +
000219 ecae     +LDI R26 , LOW ( 2 * _0x0 + ( 90 ) )
00021a e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 90 ) )
                 	__POINTW2FN _0x0,90
00021b 940e 0685 	CALL _lcd_putsf
                 ; 0000 00F8     }
                 ; 0000 00F9 
                 ; 0000 00FA     if (_chose == 3)
                 _0x30:
00021d 3013      	CPI  R17,3
00021e f431      	BRNE _0x31
                 ; 0000 00FB     {
                 ; 0000 00FC       lcd_clear();
00021f 940e 0648 	CALL _lcd_clear
                 ; 0000 00FD       lcd_putsf("Set data >>");
                +
000221 edae     +LDI R26 , LOW ( 2 * _0x0 + ( 106 ) )
000222 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 106 ) )
                 	__POINTW2FN _0x0,106
000223 940e 0685 	CALL _lcd_putsf
                 ; 0000 00FE     }
                 ; 0000 00FF 
                 ; 0000 0100     if (PINA .3 == 0)
                 _0x31:
000225 99cb      	SBIC 0x19,3
000226 c006      	RJMP _0x32
                 ; 0000 0101     { // NEXT
                 ; 0000 0102       while (PINA .3 == 0)
                 _0x33:
000227 9bcb      	SBIS 0x19,3
                 ; 0000 0103         ;
000228 cffe      	RJMP _0x33
                 ; 0000 0104       _chose++;
000229 5f1f      	SUBI R17,-1
                 ; 0000 0105       if (_chose >= 4)
00022a 3014      	CPI  R17,4
00022b f008      	BRLO _0x36
                 ; 0000 0106         _chose = 0;
00022c e010      	LDI  R17,LOW(0)
                 ; 0000 0107     }
                 _0x36:
                 ; 0000 0108 
                 ; 0000 0109     if (PINA .4 == 0)
                 _0x32:
00022d 99cc      	SBIC 0x19,4
00022e c004      	RJMP _0x37
                 ; 0000 010A     { // Back
                 ; 0000 010B       while (PINA .4 == 0)
                 _0x38:
00022f 9bcc      	SBIS 0x19,4
                 ; 0000 010C         ;
000230 cffe      	RJMP _0x38
                 ; 0000 010D       return 0;
000231 e0e0      	LDI  R30,LOW(0)
000232 c025      	RJMP _0x2080008
                 ; 0000 010E     }
                 ; 0000 010F 
                 ; 0000 0110     if (PINA .2 == 0 & _chose == 0)
                 _0x37:
000233 940e 0734 	CALL SUBOPT_0xC
000235 940e 073d 	CALL SUBOPT_0xD
000237 f019      	BREQ _0x3B
                 ; 0000 0111     { // chose time_setting
                 ; 0000 0112       while (PINA .2 == 0)
                 _0x3C:
000238 9bca      	SBIS 0x19,2
                 ; 0000 0113         ;
000239 cffe      	RJMP _0x3C
                 ; 0000 0114       time_set();
00023a d01f      	RCALL _time_set
                 ; 0000 0115     }
                 ; 0000 0116 
                 ; 0000 0117     if (PINA .2 == 0 & _chose == 1)
                 _0x3B:
00023b 940e 0734 	CALL SUBOPT_0xC
00023d 940e 0742 	CALL SUBOPT_0xE
00023f f019      	BREQ _0x3F
                 ; 0000 0118     { // chose in_out_search
                 ; 0000 0119       while (PINA .2 == 0)
                 _0x40:
000240 9bca      	SBIS 0x19,2
                 ; 0000 011A         ;
000241 cffe      	RJMP _0x40
                 ; 0000 011B       in_out_search();
000242 d078      	RCALL _in_out_search
                 ; 0000 011C     }
                 ; 0000 011D 
                 ; 0000 011E     if (PINA .2 == 0 & _chose == 2)
                 _0x3F:
000243 940e 0734 	CALL SUBOPT_0xC
000245 940e 0747 	CALL SUBOPT_0xF
000247 f019      	BREQ _0x43
                 ; 0000 011F     { // chose reserve
                 ; 0000 0120       while (PINA .2 == 0)
                 _0x44:
000248 9bca      	SBIS 0x19,2
                 ; 0000 0121         ;
000249 cffe      	RJMP _0x44
                 ; 0000 0122       reserve_park();
00024a d137      	RCALL _reserve_park
                 ; 0000 0123     }
                 ; 0000 0124 
                 ; 0000 0125     if (PINA .2 == 0 & _chose == 3)
                 _0x43:
00024b 940e 0734 	CALL SUBOPT_0xC
00024d e0e3      	LDI  R30,LOW(3)
00024e 940e 07fe 	CALL __EQB12
000250 21e0      	AND  R30,R0
000251 f019      	BREQ _0x47
                 ; 0000 0126     { // chose set data
                 ; 0000 0127       while (PINA .2 == 0)
                 _0x48:
000252 9bca      	SBIS 0x19,2
                 ; 0000 0128         ;
000253 cffe      	RJMP _0x48
                 ; 0000 0129       set_data();
000254 d15d      	RCALL _set_data
                 ; 0000 012A     }
                 ; 0000 012B 
                 ; 0000 012C     delay_ms(25);
                 _0x47:
000255 940e 0730 	CALL SUBOPT_0xB
                 ; 0000 012D   }
000257 cfad      	RJMP _0x2B
                 ; 0000 012E }
                 _0x2080008:
000258 9119      	LD   R17,Y+
000259 9508      	RET
                 ; .FEND
                 ;
                 ;/// Time setting
                 ;char time_set(void)
                 ; 0000 0132 {
                 _time_set:
                 ; .FSTART _time_set
00025a 92ff      	PUSH R15
                 ; 0000 0133   bit _chose = 0;
                 ; 0000 0134   char buff[17];
                 ; 0000 0135   while (1)
00025b 9761      	SBIW R28,17
                 ;	_chose -> R15.0
                 ;	buff -> Y+0
00025c 24ff      	CLR  R15
                 _0x4B:
                 ; 0000 0136   {
                 ; 0000 0137     if (_chose == 0)
00025d fcf0      	SBRC R15,0
00025e c00b      	RJMP _0x4E
                 ; 0000 0138     {
                 ; 0000 0139       sprintf(buff, "Set min=%d  >", minute);
00025f 940e 0729 	CALL SUBOPT_0x9
                +
000261 eeea     +LDI R30 , LOW ( 2 * _0x0 + ( 118 ) )
000262 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 118 ) )
                 	__POINTW1FN _0x0,118
000263 93fa      	ST   -Y,R31
000264 93ea      	ST   -Y,R30
000265 2deb      	MOV  R30,R11
000266 940e 071b 	CALL SUBOPT_0x7
000268 940e 074c 	CALL SUBOPT_0x10
                 ; 0000 013A       lcd_clear();
                 ; 0000 013B       lcd_puts(buff);
                 ; 0000 013C     }
                 ; 0000 013D 
                 ; 0000 013E     if (_chose == 1)
                 _0x4E:
00026a fef0      	SBRS R15,0
00026b c00b      	RJMP _0x4F
                 ; 0000 013F     {
                 ; 0000 0140       sprintf(buff, "Set hour=%d  >", hour);
00026c 940e 0729 	CALL SUBOPT_0x9
                +
00026e efe8     +LDI R30 , LOW ( 2 * _0x0 + ( 132 ) )
00026f e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 132 ) )
                 	__POINTW1FN _0x0,132
000270 93fa      	ST   -Y,R31
000271 93ea      	ST   -Y,R30
000272 2dea      	MOV  R30,R10
000273 940e 071b 	CALL SUBOPT_0x7
000275 940e 074c 	CALL SUBOPT_0x10
                 ; 0000 0141       lcd_clear();
                 ; 0000 0142       lcd_puts(buff);
                 ; 0000 0143     }
                 ; 0000 0144 
                 ; 0000 0145     if (PINA .1 == 0 & _chose == 0)
                 _0x4F:
000277 940e 0753 	CALL SUBOPT_0x11
000279 940e 073d 	CALL SUBOPT_0xD
00027b f039      	BREQ _0x50
                 ; 0000 0146     { // UP     min
                 ; 0000 0147       while (PINA .1 == 0)
                 _0x51:
00027c 9bc9      	SBIS 0x19,1
                 ; 0000 0148         ;
00027d cffe      	RJMP _0x51
                 ; 0000 0149       minute++;
00027e 94b3      	INC  R11
                 ; 0000 014A       if (minute > 59)
00027f e3eb      	LDI  R30,LOW(59)
000280 15eb      	CP   R30,R11
000281 f40c      	BRGE _0x54
                 ; 0000 014B         minute = 0;
000282 24bb      	CLR  R11
                 ; 0000 014C     }
                 _0x54:
                 ; 0000 014D 
                 ; 0000 014E     if (PINA .0 == 0 & _chose == 0)
                 _0x50:
000283 940e 075e 	CALL SUBOPT_0x12
000285 940e 073d 	CALL SUBOPT_0xD
000287 f041      	BREQ _0x55
                 ; 0000 014F     { // DOWN    min
                 ; 0000 0150       while (PINA .0 == 0)
                 _0x56:
000288 9bc8      	SBIS 0x19,0
                 ; 0000 0151         ;
000289 cffe      	RJMP _0x56
                 ; 0000 0152       minute--;
00028a 94ba      	DEC  R11
                 ; 0000 0153       if (minute < 0)
00028b e0e0      	LDI  R30,LOW(0)
00028c 16be      	CP   R11,R30
00028d f414      	BRGE _0x59
                 ; 0000 0154         minute = 59;
00028e e3eb      	LDI  R30,LOW(59)
00028f 2ebe      	MOV  R11,R30
                 ; 0000 0155     }
                 _0x59:
                 ; 0000 0156 
                 ; 0000 0157     if (PINA .1 == 0 & _chose == 1)
                 _0x55:
000290 940e 0753 	CALL SUBOPT_0x11
000292 940e 0742 	CALL SUBOPT_0xE
000294 f039      	BREQ _0x5A
                 ; 0000 0158     { // UP    hour
                 ; 0000 0159       while (PINA .1 == 0)
                 _0x5B:
000295 9bc9      	SBIS 0x19,1
                 ; 0000 015A         ;
000296 cffe      	RJMP _0x5B
                 ; 0000 015B       hour++;
000297 94a3      	INC  R10
                 ; 0000 015C       if (hour > 23)
000298 e1e7      	LDI  R30,LOW(23)
000299 15ea      	CP   R30,R10
00029a f40c      	BRGE _0x5E
                 ; 0000 015D         hour = 0;
00029b 24aa      	CLR  R10
                 ; 0000 015E     }
                 _0x5E:
                 ; 0000 015F 
                 ; 0000 0160     if (PINA .0 == 0 & _chose == 1)
                 _0x5A:
00029c 940e 075e 	CALL SUBOPT_0x12
00029e 940e 0742 	CALL SUBOPT_0xE
0002a0 f041      	BREQ _0x5F
                 ; 0000 0161     { // DOWN    hour
                 ; 0000 0162       while (PINA .0 == 0)
                 _0x60:
0002a1 9bc8      	SBIS 0x19,0
                 ; 0000 0163         ;
0002a2 cffe      	RJMP _0x60
                 ; 0000 0164       hour--;
0002a3 94aa      	DEC  R10
                 ; 0000 0165       if (hour < 0)
0002a4 e0e0      	LDI  R30,LOW(0)
0002a5 16ae      	CP   R10,R30
0002a6 f414      	BRGE _0x63
                 ; 0000 0166         hour = 23;
0002a7 e1e7      	LDI  R30,LOW(23)
0002a8 2eae      	MOV  R10,R30
                 ; 0000 0167     }
                 _0x63:
                 ; 0000 0168 
                 ; 0000 0169     if (PINA .3 == 0)
                 _0x5F:
0002a9 99cb      	SBIC 0x19,3
0002aa c004      	RJMP _0x64
                 ; 0000 016A     { // NEXT
                 ; 0000 016B       while (PINA .3 == 0)
                 _0x65:
0002ab 9bcb      	SBIS 0x19,3
                 ; 0000 016C         ;
0002ac cffe      	RJMP _0x65
                 ; 0000 016D       _chose = !_chose;
0002ad e0e1      	LDI  R30,LOW(1)
0002ae 26fe      	EOR  R15,R30
                 ; 0000 016E     }
                 ; 0000 016F 
                 ; 0000 0170     if (PINA .4 == 0)
                 _0x64:
0002af 99cc      	SBIC 0x19,4
0002b0 c004      	RJMP _0x68
                 ; 0000 0171     { // Back
                 ; 0000 0172       while (PINA .4 == 0)
                 _0x69:
0002b1 9bcc      	SBIS 0x19,4
                 ; 0000 0173         ;
0002b2 cffe      	RJMP _0x69
                 ; 0000 0174       return 0;
0002b3 e0e0      	LDI  R30,LOW(0)
0002b4 c003      	RJMP _0x2080007
                 ; 0000 0175     }
                 ; 0000 0176 
                 ; 0000 0177     delay_ms(25);
                 _0x68:
0002b5 940e 0730 	CALL SUBOPT_0xB
                 ; 0000 0178   }
0002b7 cfa5      	RJMP _0x4B
                 ; 0000 0179 }
                 _0x2080007:
0002b8 9661      	ADIW R28,17
0002b9 90ff      	POP  R15
0002ba 9508      	RET
                 ; .FEND
                 ;
                 ;/// IN&OUT Search
                 ;char in_out_search(void)
                 ; 0000 017D {
                 _in_out_search:
                 ; .FSTART _in_out_search
0002bb 92ff      	PUSH R15
                 ; 0000 017E   char t_month = month, buff[17], buff2[17];
                 ; 0000 017F   char i_temp = i;
                 ; 0000 0180   bit bit_m = 0;
                 ; 0000 0181   while (1)
0002bc 97a2      	SBIW R28,34
0002bd 931a      	ST   -Y,R17
0002be 930a      	ST   -Y,R16
                 ;	t_month -> R17
                 ;	buff -> Y+19
                 ;	buff2 -> Y+2
                 ;	i_temp -> R16
                 ;	bit_m -> R15.0
0002bf 24ff      	CLR  R15
0002c0 9110 0260 	LDS  R17,_month
0002c2 940e 0706 	CALL SUBOPT_0x5
0002c4 2f0e      	MOV  R16,R30
                 _0x6C:
                 ; 0000 0182   {
                 ; 0000 0183 
                 ; 0000 0184     if (PINA .1 == 0)
0002c5 99c9      	SBIC 0x19,1
0002c6 c03b      	RJMP _0x6F
                 ; 0000 0185     { // UP
                 ; 0000 0186       while (PINA .1 == 0)
                 _0x70:
0002c7 9bc9      	SBIS 0x19,1
                 ; 0000 0187         ;
0002c8 cffe      	RJMP _0x70
                 ; 0000 0188       i_temp++;
0002c9 5f0f      	SUBI R16,-1
                 ; 0000 0189 
                 ; 0000 018A       if (i_temp > i & bit_m == 0)
0002ca 940e 0706 	CALL SUBOPT_0x5
0002cc 2fa0      	MOV  R26,R16
0002cd 940e 080d 	CALL __GTB12U
0002cf 940e 0769 	CALL SUBOPT_0x13
0002d1 f031      	BREQ _0x73
                 ; 0000 018B       {
                 ; 0000 018C         i_temp = i;
0002d2 940e 0706 	CALL SUBOPT_0x5
0002d4 2f0e      	MOV  R16,R30
                 ; 0000 018D         t_month--;
0002d5 5011      	SUBI R17,1
                 ; 0000 018E         bit_m = 1;
0002d6 9468      	SET
0002d7 f8f0      	BLD  R15,0
                 ; 0000 018F       }
                 ; 0000 0190 
                 ; 0000 0191       if (t_month <= 6 & i_temp > 31 & bit_m == 1)
                 _0x73:
0002d8 2fa1      	MOV  R26,R17
0002d9 e0e6      	LDI  R30,LOW(6)
0002da 940e 0803 	CALL __LEB12U
0002dc 2e0e      	MOV  R0,R30
0002dd 2fa0      	MOV  R26,R16
0002de e1ef      	LDI  R30,LOW(31)
0002df 940e 076e 	CALL SUBOPT_0x14
0002e1 f011      	BREQ _0x74
                 ; 0000 0192       {
                 ; 0000 0193         i_temp = 1;
0002e2 940e 0775 	CALL SUBOPT_0x15
                 ; 0000 0194         t_month++;
                 ; 0000 0195         bit_m = 0;
                 ; 0000 0196       }
                 ; 0000 0197 
                 ; 0000 0198       if (t_month > 6 & i_temp > 30 & bit_m == 1)
                 _0x74:
0002e4 2fa1      	MOV  R26,R17
0002e5 e0e6      	LDI  R30,LOW(6)
0002e6 940e 080d 	CALL __GTB12U
0002e8 2e0e      	MOV  R0,R30
0002e9 2fa0      	MOV  R26,R16
0002ea e1ee      	LDI  R30,LOW(30)
0002eb 940e 076e 	CALL SUBOPT_0x14
0002ed f011      	BREQ _0x75
                 ; 0000 0199       {
                 ; 0000 019A         i_temp = 1;
0002ee 940e 0775 	CALL SUBOPT_0x15
                 ; 0000 019B         t_month++;
                 ; 0000 019C         bit_m = 0;
                 ; 0000 019D       }
                 ; 0000 019E 
                 ; 0000 019F       if (t_month == 12 & i_temp > 29 & bit_m == 1)
                 _0x75:
0002f0 2fa1      	MOV  R26,R17
0002f1 e0ec      	LDI  R30,LOW(12)
0002f2 940e 07fe 	CALL __EQB12
0002f4 2e0e      	MOV  R0,R30
0002f5 2fa0      	MOV  R26,R16
0002f6 e1ed      	LDI  R30,LOW(29)
0002f7 940e 076e 	CALL SUBOPT_0x14
0002f9 f011      	BREQ _0x76
                 ; 0000 01A0       {
                 ; 0000 01A1         i_temp = 1;
0002fa 940e 0775 	CALL SUBOPT_0x15
                 ; 0000 01A2         t_month++;
                 ; 0000 01A3         bit_m = 0;
                 ; 0000 01A4       }
                 ; 0000 01A5 
                 ; 0000 01A6       if (t_month == 0)
                 _0x76:
0002fc 3010      	CPI  R17,0
0002fd f409      	BRNE _0x77
                 ; 0000 01A7         t_month = 12;
0002fe e01c      	LDI  R17,LOW(12)
                 ; 0000 01A8 
                 ; 0000 01A9       if (t_month > 12)
                 _0x77:
0002ff 301d      	CPI  R17,13
000300 f008      	BRLO _0x78
                 ; 0000 01AA         t_month = 1;
000301 e011      	LDI  R17,LOW(1)
                 ; 0000 01AB     }
                 _0x78:
                 ; 0000 01AC 
                 ; 0000 01AD     if (PINA .0 == 0)
                 _0x6F:
000302 99c8      	SBIC 0x19,0
000303 c034      	RJMP _0x79
                 ; 0000 01AE     { // DOWN
                 ; 0000 01AF       while (PINA .0 == 0)
                 _0x7A:
000304 9bc8      	SBIS 0x19,0
                 ; 0000 01B0         ;
000305 cffe      	RJMP _0x7A
                 ; 0000 01B1       i_temp--;
000306 5001      	SUBI R16,1
                 ; 0000 01B2 
                 ; 0000 01B3       if (i_temp == 0 & bit_m == 0)
000307 2fa0      	MOV  R26,R16
000308 e0e0      	LDI  R30,LOW(0)
000309 940e 07fe 	CALL __EQB12
00030b 940e 0769 	CALL SUBOPT_0x13
00030d f091      	BREQ _0x7D
                 ; 0000 01B4       {
                 ; 0000 01B5 
                 ; 0000 01B6         t_month--;
00030e 5011      	SUBI R17,1
                 ; 0000 01B7 
                 ; 0000 01B8         if (t_month == 0)
00030f 3010      	CPI  R17,0
000310 f409      	BRNE _0x7E
                 ; 0000 01B9           t_month = 12;
000311 e01c      	LDI  R17,LOW(12)
                 ; 0000 01BA 
                 ; 0000 01BB         if (t_month > 12)
                 _0x7E:
000312 301d      	CPI  R17,13
000313 f008      	BRLO _0x7F
                 ; 0000 01BC           t_month = 1;
000314 e011      	LDI  R17,LOW(1)
                 ; 0000 01BD 
                 ; 0000 01BE         if (t_month <= 6)
                 _0x7F:
000315 3017      	CPI  R17,7
000316 f408      	BRSH _0x80
                 ; 0000 01BF           i_temp = 31;
000317 e10f      	LDI  R16,LOW(31)
                 ; 0000 01C0 
                 ; 0000 01C1         if (t_month > 6)
                 _0x80:
000318 3017      	CPI  R17,7
000319 f008      	BRLO _0x81
                 ; 0000 01C2           i_temp = 30;
00031a e10e      	LDI  R16,LOW(30)
                 ; 0000 01C3 
                 ; 0000 01C4         if (t_month == 12)
                 _0x81:
00031b 301c      	CPI  R17,12
00031c f409      	BRNE _0x82
                 ; 0000 01C5           i_temp = 29;
00031d e10d      	LDI  R16,LOW(29)
                 ; 0000 01C6 
                 ; 0000 01C7         bit_m = 1;
                 _0x82:
00031e 9468      	SET
00031f f8f0      	BLD  R15,0
                 ; 0000 01C8       }
                 ; 0000 01C9 
                 ; 0000 01CA       if (i_temp < i & bit_m == 1)
                 _0x7D:
000320 940e 0706 	CALL SUBOPT_0x5
000322 2fa0      	MOV  R26,R16
000323 940e 0808 	CALL __LTB12U
000325 2e0e      	MOV  R0,R30
000326 e0a0      	LDI  R26,0
000327 fcf0      	SBRC R15,0
000328 e0a1      	LDI  R26,1
000329 940e 0742 	CALL SUBOPT_0xE
00032b f031      	BREQ _0x83
                 ; 0000 01CB       {
                 ; 0000 01CC         i_temp = i;
00032c 940e 0706 	CALL SUBOPT_0x5
00032e 2f0e      	MOV  R16,R30
                 ; 0000 01CD         t_month++;
00032f 5f1f      	SUBI R17,-1
                 ; 0000 01CE         bit_m = 0;
000330 94e8      	CLT
000331 f8f0      	BLD  R15,0
                 ; 0000 01CF       }
                 ; 0000 01D0 
                 ; 0000 01D1       if (t_month == 0)
                 _0x83:
000332 3010      	CPI  R17,0
000333 f409      	BRNE _0x84
                 ; 0000 01D2         t_month = 12;
000334 e01c      	LDI  R17,LOW(12)
                 ; 0000 01D3 
                 ; 0000 01D4       if (t_month > 12)
                 _0x84:
000335 301d      	CPI  R17,13
000336 f008      	BRLO _0x85
                 ; 0000 01D5         t_month = 1;
000337 e011      	LDI  R17,LOW(1)
                 ; 0000 01D6     }
                 _0x85:
                 ; 0000 01D7 
                 ; 0000 01D8     sprintf(buff, "%d/%d/%d ", year, t_month, i_temp);
                 _0x79:
000338 01fe      	MOVW R30,R28
000339 9673      	ADIW R30,19
00033a 93fa      	ST   -Y,R31
00033b 93ea      	ST   -Y,R30
                +
00033c e0e7     +LDI R30 , LOW ( 2 * _0x0 + ( 147 ) )
00033d e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 147 ) )
                 	__POINTW1FN _0x0,147
00033e 93fa      	ST   -Y,R31
00033f 93ea      	ST   -Y,R30
000340 940e 0720 	CALL SUBOPT_0x8
000342 2fe1      	MOV  R30,R17
000343 27ff      	CLR  R31
000344 2766      	CLR  R22
000345 2777      	CLR  R23
000346 940e 081a 	CALL __PUTPARD1
000348 2fe0      	MOV  R30,R16
000349 27ff      	CLR  R31
00034a 2766      	CLR  R22
00034b 2777      	CLR  R23
00034c 940e 081a 	CALL __PUTPARD1
00034e e08c      	LDI  R24,12
00034f 940e 05d2 	CALL _sprintf
000351 9660      	ADIW R28,16
                 ; 0000 01D9     sprintf(buff2, "in=%d out=%d", enter_array[i_temp], exit_array[i_temp]);
000352 01fe      	MOVW R30,R28
000353 9632      	ADIW R30,2
000354 93fa      	ST   -Y,R31
000355 93ea      	ST   -Y,R30
                +
000356 e1e1     +LDI R30 , LOW ( 2 * _0x0 + ( 157 ) )
000357 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 157 ) )
                 	__POINTW1FN _0x0,157
000358 93fa      	ST   -Y,R31
000359 93ea      	ST   -Y,R30
00035a 2fe0      	MOV  R30,R16
00035b e0a0      	LDI  R26,LOW(_enter_array)
00035c e0b0      	LDI  R27,HIGH(_enter_array)
00035d 940e 077a 	CALL SUBOPT_0x16
00035f 2fe0      	MOV  R30,R16
000360 e3ae      	LDI  R26,LOW(_exit_array)
000361 e0b0      	LDI  R27,HIGH(_exit_array)
000362 940e 077a 	CALL SUBOPT_0x16
000364 e088      	LDI  R24,8
000365 940e 05d2 	CALL _sprintf
000367 962c      	ADIW R28,12
                 ; 0000 01DA 
                 ; 0000 01DB     lcd_clear();
000368 940e 0648 	CALL _lcd_clear
                 ; 0000 01DC     lcd_puts(buff);
00036a 01de      	MOVW R26,R28
00036b 9653      	ADIW R26,19
00036c 940e 0676 	CALL _lcd_puts
                 ; 0000 01DD     lcd_gotoxy(0, 1);
00036e 940e 0701 	CALL SUBOPT_0x4
                 ; 0000 01DE     lcd_puts(buff2);
000370 01de      	MOVW R26,R28
000371 9612      	ADIW R26,2
000372 940e 0676 	CALL _lcd_puts
                 ; 0000 01DF 
                 ; 0000 01E0     if (PINA .4 == 0)
000374 99cc      	SBIC 0x19,4
000375 c004      	RJMP _0x86
                 ; 0000 01E1     { // Back
                 ; 0000 01E2       while (PINA .4 == 0)
                 _0x87:
000376 9bcc      	SBIS 0x19,4
                 ; 0000 01E3         ;
000377 cffe      	RJMP _0x87
                 ; 0000 01E4       return 0;
000378 e0e0      	LDI  R30,LOW(0)
000379 c003      	RJMP _0x2080006
                 ; 0000 01E5     }
                 ; 0000 01E6     delay_ms(25);
                 _0x86:
00037a 940e 0730 	CALL SUBOPT_0xB
                 ; 0000 01E7   }
00037c cf48      	RJMP _0x6C
                 ; 0000 01E8 }
                 _0x2080006:
00037d 8119      	LDD  R17,Y+1
00037e 8108      	LDD  R16,Y+0
00037f 96a4      	ADIW R28,36
000380 90ff      	POP  R15
000381 9508      	RET
                 ; .FEND
                 ;
                 ;// reserve_park
                 ;char reserve_park(void)
                 ; 0000 01EC {
                 _reserve_park:
                 ; .FSTART _reserve_park
                 ; 0000 01ED   char buff[17];
                 ; 0000 01EE 
                 ; 0000 01EF   while (1)
000382 9761      	SBIW R28,17
                 ;	buff -> Y+0
                 _0x8A:
                 ; 0000 01F0   {
                 ; 0000 01F1     sprintf(buff, "Reserved=%d", reserved);
000383 940e 0729 	CALL SUBOPT_0x9
                +
000385 e1ee     +LDI R30 , LOW ( 2 * _0x0 + ( 170 ) )
000386 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 170 ) )
                 	__POINTW1FN _0x0,170
000387 93fa      	ST   -Y,R31
000388 93ea      	ST   -Y,R30
000389 2de8      	MOV  R30,R8
00038a 940e 071b 	CALL SUBOPT_0x7
00038c 940e 074c 	CALL SUBOPT_0x10
                 ; 0000 01F2     lcd_clear();
                 ; 0000 01F3     lcd_puts(buff);
                 ; 0000 01F4 
                 ; 0000 01F5     if (PINA .1 == 0)
00038e 99c9      	SBIC 0x19,1
00038f c003      	RJMP _0x8D
                 ; 0000 01F6     { // UP
                 ; 0000 01F7       while (PINA .1 == 0)
                 _0x8E:
000390 9bc9      	SBIS 0x19,1
                 ; 0000 01F8         ;
000391 cffe      	RJMP _0x8E
                 ; 0000 01F9       reserved++;
000392 9483      	INC  R8
                 ; 0000 01FA     }
                 ; 0000 01FB 
                 ; 0000 01FC     if (reserved >= init_capacity)
                 _0x8D:
000393 2da8      	MOV  R26,R8
000394 e0ea      	LDI  R30,LOW(10)
000395 e0b0      	LDI  R27,0
000396 fda7      	SBRC R26,7
000397 efbf      	SER  R27
000398 e0f0      	LDI  R31,0
000399 17ae      	CP   R26,R30
00039a 07bf      	CPC  R27,R31
00039b f014      	BRLT _0x91
                 ; 0000 01FD     {
                 ; 0000 01FE       reserved = 99;
00039c e6e3      	LDI  R30,LOW(99)
00039d 2e8e      	MOV  R8,R30
                 ; 0000 01FF     }
                 ; 0000 0200 
                 ; 0000 0201     if (PINA .0 == 0)
                 _0x91:
00039e 99c8      	SBIC 0x19,0
00039f c003      	RJMP _0x92
                 ; 0000 0202     { // DOWN
                 ; 0000 0203       while (PINA .0 == 0)
                 _0x93:
0003a0 9bc8      	SBIS 0x19,0
                 ; 0000 0204         ;
0003a1 cffe      	RJMP _0x93
                 ; 0000 0205       reserved--;
0003a2 948a      	DEC  R8
                 ; 0000 0206     }
                 ; 0000 0207 
                 ; 0000 0208     if (reserved <= 0)
                 _0x92:
0003a3 e0e0      	LDI  R30,LOW(0)
0003a4 15e8      	CP   R30,R8
0003a5 f00c      	BRLT _0x96
                 ; 0000 0209     {
                 ; 0000 020A       reserved = 0;
0003a6 2488      	CLR  R8
                 ; 0000 020B     }
                 ; 0000 020C 
                 ; 0000 020D     if (PINA .4 == 0)
                 _0x96:
0003a7 99cc      	SBIC 0x19,4
0003a8 c004      	RJMP _0x97
                 ; 0000 020E     { // Back
                 ; 0000 020F       while (PINA .4 == 0)
                 _0x98:
0003a9 9bcc      	SBIS 0x19,4
                 ; 0000 0210         ;
0003aa cffe      	RJMP _0x98
                 ; 0000 0211       return 0;
0003ab e0e0      	LDI  R30,LOW(0)
0003ac c003      	RJMP _0x2080005
                 ; 0000 0212     }
                 ; 0000 0213     delay_ms(25);
                 _0x97:
0003ad 940e 0730 	CALL SUBOPT_0xB
                 ; 0000 0214   }
0003af cfd3      	RJMP _0x8A
                 ; 0000 0215 }
                 _0x2080005:
0003b0 9661      	ADIW R28,17
0003b1 9508      	RET
                 ; .FEND
                 ;
                 ;//// data setting
                 ;char set_data(void)
                 ; 0000 0219 {
                 _set_data:
                 ; .FSTART _set_data
                 ; 0000 021A   char _chose = 0;
                 ; 0000 021B   char buff[17];
                 ; 0000 021C   while (1)
0003b2 9761      	SBIW R28,17
0003b3 931a      	ST   -Y,R17
                 ;	_chose -> R17
                 ;	buff -> Y+1
0003b4 e010      	LDI  R17,0
                 _0x9B:
                 ; 0000 021D   {
                 ; 0000 021E     if (_chose == 1)
0003b5 3011      	CPI  R17,1
0003b6 f461      	BRNE _0x9E
                 ; 0000 021F     {
                 ; 0000 0220       sprintf(buff, "Set month=%d  >", month);
0003b7 940e 0786 	CALL SUBOPT_0x17
                +
0003b9 e2ea     +LDI R30 , LOW ( 2 * _0x0 + ( 182 ) )
0003ba e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 182 ) )
                 	__POINTW1FN _0x0,182
0003bb 93fa      	ST   -Y,R31
0003bc 93ea      	ST   -Y,R30
0003bd 91e0 0260 	LDS  R30,_month
0003bf 940e 071b 	CALL SUBOPT_0x7
0003c1 940e 078b 	CALL SUBOPT_0x18
                 ; 0000 0221       lcd_clear();
                 ; 0000 0222       lcd_puts(buff);
                 ; 0000 0223     }
                 ; 0000 0224 
                 ; 0000 0225     if (_chose == 0)
                 _0x9E:
0003c3 3010      	CPI  R17,0
0003c4 f459      	BRNE _0x9F
                 ; 0000 0226     {
                 ; 0000 0227       sprintf(buff, "Set day=%d  >", day);
0003c5 940e 0786 	CALL SUBOPT_0x17
                +
0003c7 e3ea     +LDI R30 , LOW ( 2 * _0x0 + ( 198 ) )
0003c8 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 198 ) )
                 	__POINTW1FN _0x0,198
0003c9 93fa      	ST   -Y,R31
0003ca 93ea      	ST   -Y,R30
0003cb 2dec      	MOV  R30,R12
0003cc 940e 071b 	CALL SUBOPT_0x7
0003ce 940e 078b 	CALL SUBOPT_0x18
                 ; 0000 0228       lcd_clear();
                 ; 0000 0229       lcd_puts(buff);
                 ; 0000 022A     }
                 ; 0000 022B 
                 ; 0000 022C     if (_chose == 2)
                 _0x9F:
0003d0 3012      	CPI  R17,2
0003d1 f451      	BRNE _0xA0
                 ; 0000 022D     {
                 ; 0000 022E       sprintf(buff, "Set year=%d  >", year);
0003d2 940e 0786 	CALL SUBOPT_0x17
                +
0003d4 e4e8     +LDI R30 , LOW ( 2 * _0x0 + ( 212 ) )
0003d5 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 212 ) )
                 	__POINTW1FN _0x0,212
0003d6 93fa      	ST   -Y,R31
0003d7 93ea      	ST   -Y,R30
0003d8 940e 0720 	CALL SUBOPT_0x8
0003da 940e 078b 	CALL SUBOPT_0x18
                 ; 0000 022F       lcd_clear();
                 ; 0000 0230       lcd_puts(buff);
                 ; 0000 0231     }
                 ; 0000 0232 
                 ; 0000 0233     if (PINA .1 == 0 & _chose == 1)
                 _0xA0:
0003dc 940e 0795 	CALL SUBOPT_0x19
0003de 940e 0742 	CALL SUBOPT_0xE
0003e0 f071      	BREQ _0xA1
                 ; 0000 0234     { // UP     month
                 ; 0000 0235       while (PINA .1 == 0)
                 _0xA2:
0003e1 9bc9      	SBIS 0x19,1
                 ; 0000 0236         ;
0003e2 cffe      	RJMP _0xA2
                 ; 0000 0237       month++;
0003e3 91e0 0260 	LDS  R30,_month
0003e5 5fef      	SUBI R30,-LOW(1)
0003e6 93e0 0260 	STS  _month,R30
                 ; 0000 0238       if (month > 12)
0003e8 91a0 0260 	LDS  R26,_month
0003ea 30ad      	CPI  R26,LOW(0xD)
0003eb f01c      	BRLT _0xA5
                 ; 0000 0239         month = 1;
0003ec e0e1      	LDI  R30,LOW(1)
0003ed 93e0 0260 	STS  _month,R30
                 ; 0000 023A     }
                 _0xA5:
                 ; 0000 023B 
                 ; 0000 023C     if (PINA .0 == 0 & _chose == 1)
                 _0xA1:
0003ef 940e 079e 	CALL SUBOPT_0x1A
0003f1 940e 0742 	CALL SUBOPT_0xE
0003f3 f071      	BREQ _0xA6
                 ; 0000 023D     { // DOWN    month
                 ; 0000 023E       while (PINA .0 == 0)
                 _0xA7:
0003f4 9bc8      	SBIS 0x19,0
                 ; 0000 023F         ;
0003f5 cffe      	RJMP _0xA7
                 ; 0000 0240       month--;
0003f6 91e0 0260 	LDS  R30,_month
0003f8 50e1      	SUBI R30,LOW(1)
0003f9 93e0 0260 	STS  _month,R30
                 ; 0000 0241       if (month < 1)
0003fb 91a0 0260 	LDS  R26,_month
0003fd 30a1      	CPI  R26,LOW(0x1)
0003fe f41c      	BRGE _0xAA
                 ; 0000 0242         month = 12;
0003ff e0ec      	LDI  R30,LOW(12)
000400 93e0 0260 	STS  _month,R30
                 ; 0000 0243     }
                 _0xAA:
                 ; 0000 0244 
                 ; 0000 0245     if (PINA .1 == 0 & _chose == 0)
                 _0xA6:
000402 940e 0795 	CALL SUBOPT_0x19
000404 940e 073d 	CALL SUBOPT_0xD
000406 f069      	BREQ _0xAB
                 ; 0000 0246     { // UP    day
                 ; 0000 0247       while (PINA .1 == 0)
                 _0xAC:
000407 9bc9      	SBIS 0x19,1
                 ; 0000 0248         ;
000408 cffe      	RJMP _0xAC
                 ; 0000 0249       day++;
000409 94c3      	INC  R12
                 ; 0000 024A       i = day;
00040a 2dec      	MOV  R30,R12
00040b e7ac      	LDI  R26,LOW(_i)
00040c e0b0      	LDI  R27,HIGH(_i)
00040d 940e 0837 	CALL __EEPROMWRB
                 ; 0000 024B       if (day > 31)
00040f e1ef      	LDI  R30,LOW(31)
000410 15ec      	CP   R30,R12
000411 f414      	BRGE _0xAF
                 ; 0000 024C         day = 1;
000412 e0e1      	LDI  R30,LOW(1)
000413 2ece      	MOV  R12,R30
                 ; 0000 024D     }
                 _0xAF:
                 ; 0000 024E 
                 ; 0000 024F     if (PINA .0 == 0 & _chose == 0)
                 _0xAB:
000414 940e 079e 	CALL SUBOPT_0x1A
000416 940e 073d 	CALL SUBOPT_0xD
000418 f069      	BREQ _0xB0
                 ; 0000 0250     { // DOWN    day
                 ; 0000 0251       while (PINA .0 == 0)
                 _0xB1:
000419 9bc8      	SBIS 0x19,0
                 ; 0000 0252         ;
00041a cffe      	RJMP _0xB1
                 ; 0000 0253       day--;
00041b 94ca      	DEC  R12
                 ; 0000 0254       i = day;
00041c 2dec      	MOV  R30,R12
00041d e7ac      	LDI  R26,LOW(_i)
00041e e0b0      	LDI  R27,HIGH(_i)
00041f 940e 0837 	CALL __EEPROMWRB
                 ; 0000 0255       if (day < 1)
000421 e0e1      	LDI  R30,LOW(1)
000422 16ce      	CP   R12,R30
000423 f414      	BRGE _0xB4
                 ; 0000 0256         day = 31;
000424 e1ef      	LDI  R30,LOW(31)
000425 2ece      	MOV  R12,R30
                 ; 0000 0257     }
                 _0xB4:
                 ; 0000 0258 
                 ; 0000 0259     if (PINA .0 == 0 & _chose == 2)
                 _0xB0:
000426 940e 079e 	CALL SUBOPT_0x1A
000428 940e 0747 	CALL SUBOPT_0xF
00042a f099      	BREQ _0xB5
                 ; 0000 025A     { // DOWN    year
                 ; 0000 025B       while (PINA .0 == 0)
                 _0xB6:
00042b 9bc8      	SBIS 0x19,0
                 ; 0000 025C         ;
00042c cffe      	RJMP _0xB6
                 ; 0000 025D       year--;
00042d 940e 06f0 	CALL SUBOPT_0x2
00042f 9731      	SBIW R30,1
000430 93fe      	ST   -X,R31
000431 93ee      	ST   -X,R30
                 ; 0000 025E       if (year < 1)
000432 91a0 0261 	LDS  R26,_year
000434 91b0 0262 	LDS  R27,_year+1
000436 9711      	SBIW R26,1
000437 f434      	BRGE _0xB9
                 ; 0000 025F         year = 1300;
000438 e1e4      	LDI  R30,LOW(1300)
000439 e0f5      	LDI  R31,HIGH(1300)
00043a 93e0 0261 	STS  _year,R30
00043c 93f0 0262 	STS  _year+1,R31
                 ; 0000 0260     }
                 _0xB9:
                 ; 0000 0261 
                 ; 0000 0262     if (PINA .1 == 0 & _chose == 2)
                 _0xB5:
00043e 940e 0795 	CALL SUBOPT_0x19
000440 940e 0747 	CALL SUBOPT_0xF
000442 f039      	BREQ _0xBA
                 ; 0000 0263     { // UP    year
                 ; 0000 0264       while (PINA .1 == 0)
                 _0xBB:
000443 9bc9      	SBIS 0x19,1
                 ; 0000 0265         ;
000444 cffe      	RJMP _0xBB
                 ; 0000 0266       year++;
000445 940e 06f0 	CALL SUBOPT_0x2
000447 9631      	ADIW R30,1
000448 93fe      	ST   -X,R31
000449 93ee      	ST   -X,R30
                 ; 0000 0267       // if(year>1404)
                 ; 0000 0268       // year=0;
                 ; 0000 0269     }
                 ; 0000 026A 
                 ; 0000 026B     if (PINA .3 == 0)
                 _0xBA:
00044a 99cb      	SBIC 0x19,3
00044b c006      	RJMP _0xBE
                 ; 0000 026C     { // NEXT
                 ; 0000 026D       while (PINA .3 == 0)
                 _0xBF:
00044c 9bcb      	SBIS 0x19,3
                 ; 0000 026E         ;
00044d cffe      	RJMP _0xBF
                 ; 0000 026F       _chose++;
00044e 5f1f      	SUBI R17,-1
                 ; 0000 0270       if (_chose >= 3)
00044f 3013      	CPI  R17,3
000450 f008      	BRLO _0xC2
                 ; 0000 0271         _chose = 0;
000451 e010      	LDI  R17,LOW(0)
                 ; 0000 0272     }
                 _0xC2:
                 ; 0000 0273 
                 ; 0000 0274     if (PINA .4 == 0)
                 _0xBE:
000452 99cc      	SBIC 0x19,4
000453 c004      	RJMP _0xC3
                 ; 0000 0275     { // Back
                 ; 0000 0276       while (PINA .4 == 0)
                 _0xC4:
000454 9bcc      	SBIS 0x19,4
                 ; 0000 0277         ;
000455 cffe      	RJMP _0xC4
                 ; 0000 0278       return 0;
000456 e0e0      	LDI  R30,LOW(0)
000457 c003      	RJMP _0x2080004
                 ; 0000 0279     }
                 ; 0000 027A 
                 ; 0000 027B     delay_ms(25);
                 _0xC3:
000458 940e 0730 	CALL SUBOPT_0xB
                 ; 0000 027C   }
00045a cf5a      	RJMP _0x9B
                 ; 0000 027D }
                 _0x2080004:
00045b 8118      	LDD  R17,Y+0
00045c 9662      	ADIW R28,18
00045d 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G100:
                 ; .FSTART _put_buff_G100
00045e 93ba      	ST   -Y,R27
00045f 93aa      	ST   -Y,R26
000460 931a      	ST   -Y,R17
000461 930a      	ST   -Y,R16
000462 81aa      	LDD  R26,Y+2
000463 81bb      	LDD  R27,Y+2+1
000464 9612      	ADIW R26,2
000465 940e 0812 	CALL __GETW1P
000467 9730      	SBIW R30,0
000468 f159      	BREQ _0x2000010
000469 81aa      	LDD  R26,Y+2
00046a 81bb      	LDD  R27,Y+2+1
00046b 9614      	ADIW R26,4
00046c 940e 0812 	CALL __GETW1P
00046e 018f      	MOVW R16,R30
00046f 9730      	SBIW R30,0
000470 f061      	BREQ _0x2000012
                +
000471 3002     +CPI R16 , LOW ( 2 )
000472 e0e0     +LDI R30 , HIGH ( 2 )
000473 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
000474 f098      	BRLO _0x2000013
000475 01f8      	MOVW R30,R16
000476 9731      	SBIW R30,1
000477 018f      	MOVW R16,R30
                +
000478 81aa     +LDD R26 , Y + 2
000479 81bb     +LDD R27 , Y + 2 + 1
00047a 9614     +ADIW R26 , 4
00047b 93ed     +ST X + , R30
00047c 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2000012:
00047d 81aa      	LDD  R26,Y+2
00047e 81bb      	LDD  R27,Y+2+1
00047f 9612      	ADIW R26,2
000480 91ed      	LD   R30,X+
000481 91fd      	LD   R31,X+
000482 9631      	ADIW R30,1
000483 93fe      	ST   -X,R31
000484 93ee      	ST   -X,R30
000485 9731      	SBIW R30,1
000486 81ac      	LDD  R26,Y+4
000487 83a0      	STD  Z+0,R26
                 _0x2000013:
000488 81aa      	LDD  R26,Y+2
000489 81bb      	LDD  R27,Y+2+1
00048a 940e 0812 	CALL __GETW1P
00048c 23ff      	TST  R31
00048d f02a      	BRMI _0x2000014
00048e 91ed      	LD   R30,X+
00048f 91fd      	LD   R31,X+
000490 9631      	ADIW R30,1
000491 93fe      	ST   -X,R31
000492 93ee      	ST   -X,R30
                 _0x2000014:
000493 c006      	RJMP _0x2000015
                 _0x2000010:
000494 81aa      	LDD  R26,Y+2
000495 81bb      	LDD  R27,Y+2+1
000496 efef      	LDI  R30,LOW(65535)
000497 efff      	LDI  R31,HIGH(65535)
000498 93ed      	ST   X+,R30
000499 93fc      	ST   X,R31
                 _0x2000015:
00049a 8119      	LDD  R17,Y+1
00049b 8108      	LDD  R16,Y+0
00049c 9625      	ADIW R28,5
00049d 9508      	RET
                 ; .FEND
                 __print_G100:
                 ; .FSTART __print_G100
00049e 93ba      	ST   -Y,R27
00049f 93aa      	ST   -Y,R26
0004a0 9726      	SBIW R28,6
0004a1 940e 0848 	CALL __SAVELOCR6
0004a3 e010      	LDI  R17,0
0004a4 85ac      	LDD  R26,Y+12
0004a5 85bd      	LDD  R27,Y+12+1
0004a6 e0e0      	LDI  R30,LOW(0)
0004a7 e0f0      	LDI  R31,HIGH(0)
0004a8 93ed      	ST   X+,R30
0004a9 93fc      	ST   X,R31
                 _0x2000016:
0004aa 89ea      	LDD  R30,Y+18
0004ab 89fb      	LDD  R31,Y+18+1
0004ac 9631      	ADIW R30,1
0004ad 8bea      	STD  Y+18,R30
0004ae 8bfb      	STD  Y+18+1,R31
0004af 9731      	SBIW R30,1
0004b0 91e4      	LPM  R30,Z
0004b1 2f2e      	MOV  R18,R30
0004b2 30e0      	CPI  R30,0
0004b3 f409      	BRNE PC+2
0004b4 c115      	RJMP _0x2000018
0004b5 2fe1      	MOV  R30,R17
0004b6 30e0      	CPI  R30,0
0004b7 f439      	BRNE _0x200001C
0004b8 3225      	CPI  R18,37
0004b9 f411      	BRNE _0x200001D
0004ba e011      	LDI  R17,LOW(1)
0004bb c002      	RJMP _0x200001E
                 _0x200001D:
0004bc 940e 07a7 	CALL SUBOPT_0x1B
                 _0x200001E:
0004be c10a      	RJMP _0x200001B
                 _0x200001C:
0004bf 30e1      	CPI  R30,LOW(0x1)
0004c0 f4a9      	BRNE _0x200001F
0004c1 3225      	CPI  R18,37
0004c2 f419      	BRNE _0x2000020
0004c3 940e 07a7 	CALL SUBOPT_0x1B
0004c5 c102      	RJMP _0x20000CC
                 _0x2000020:
0004c6 e012      	LDI  R17,LOW(2)
0004c7 e040      	LDI  R20,LOW(0)
0004c8 e000      	LDI  R16,LOW(0)
0004c9 322d      	CPI  R18,45
0004ca f411      	BRNE _0x2000021
0004cb e001      	LDI  R16,LOW(1)
0004cc c0fc      	RJMP _0x200001B
                 _0x2000021:
0004cd 322b      	CPI  R18,43
0004ce f411      	BRNE _0x2000022
0004cf e24b      	LDI  R20,LOW(43)
0004d0 c0f8      	RJMP _0x200001B
                 _0x2000022:
0004d1 3220      	CPI  R18,32
0004d2 f411      	BRNE _0x2000023
0004d3 e240      	LDI  R20,LOW(32)
0004d4 c0f4      	RJMP _0x200001B
                 _0x2000023:
0004d5 c002      	RJMP _0x2000024
                 _0x200001F:
0004d6 30e2      	CPI  R30,LOW(0x2)
0004d7 f439      	BRNE _0x2000025
                 _0x2000024:
0004d8 e050      	LDI  R21,LOW(0)
0004d9 e013      	LDI  R17,LOW(3)
0004da 3320      	CPI  R18,48
0004db f411      	BRNE _0x2000026
0004dc 6800      	ORI  R16,LOW(128)
0004dd c0eb      	RJMP _0x200001B
                 _0x2000026:
0004de c003      	RJMP _0x2000027
                 _0x2000025:
0004df 30e3      	CPI  R30,LOW(0x3)
0004e0 f009      	BREQ PC+2
0004e1 c0e7      	RJMP _0x200001B
                 _0x2000027:
0004e2 3320      	CPI  R18,48
0004e3 f010      	BRLO _0x200002A
0004e4 332a      	CPI  R18,58
0004e5 f008      	BRLO _0x200002B
                 _0x200002A:
0004e6 c007      	RJMP _0x2000029
                 _0x200002B:
0004e7 e0aa      	LDI  R26,LOW(10)
0004e8 9f5a      	MUL  R21,R26
0004e9 2d50      	MOV  R21,R0
0004ea 2fe2      	MOV  R30,R18
0004eb 53e0      	SUBI R30,LOW(48)
0004ec 0f5e      	ADD  R21,R30
0004ed c0db      	RJMP _0x200001B
                 _0x2000029:
0004ee 2fe2      	MOV  R30,R18
0004ef 36e3      	CPI  R30,LOW(0x63)
0004f0 f449      	BRNE _0x200002F
0004f1 940e 07ae 	CALL SUBOPT_0x1C
0004f3 89e8      	LDD  R30,Y+16
0004f4 89f9      	LDD  R31,Y+16+1
0004f5 81a4      	LDD  R26,Z+4
0004f6 93aa      	ST   -Y,R26
0004f7 940e 07b4 	CALL SUBOPT_0x1D
0004f9 c0ce      	RJMP _0x2000030
                 _0x200002F:
0004fa 37e3      	CPI  R30,LOW(0x73)
0004fb f441      	BRNE _0x2000032
0004fc 940e 07ae 	CALL SUBOPT_0x1C
0004fe 940e 07ba 	CALL SUBOPT_0x1E
000500 940e 06c8 	CALL _strlen
000502 2f1e      	MOV  R17,R30
000503 c00a      	RJMP _0x2000033
                 _0x2000032:
000504 37e0      	CPI  R30,LOW(0x70)
000505 f461      	BRNE _0x2000035
000506 940e 07ae 	CALL SUBOPT_0x1C
000508 940e 07ba 	CALL SUBOPT_0x1E
00050a 940e 06d4 	CALL _strlenf
00050c 2f1e      	MOV  R17,R30
00050d 6008      	ORI  R16,LOW(8)
                 _0x2000033:
00050e 6002      	ORI  R16,LOW(2)
00050f 770f      	ANDI R16,LOW(127)
000510 e030      	LDI  R19,LOW(0)
000511 c034      	RJMP _0x2000036
                 _0x2000035:
000512 36e4      	CPI  R30,LOW(0x64)
000513 f011      	BREQ _0x2000039
000514 36e9      	CPI  R30,LOW(0x69)
000515 f411      	BRNE _0x200003A
                 _0x2000039:
000516 6004      	ORI  R16,LOW(4)
000517 c002      	RJMP _0x200003B
                 _0x200003A:
000518 37e5      	CPI  R30,LOW(0x75)
000519 f431      	BRNE _0x200003C
                 _0x200003B:
00051a e5e4      	LDI  R30,LOW(_tbl10_G100*2)
00051b e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
00051c 83ee      	STD  Y+6,R30
00051d 83ff      	STD  Y+6+1,R31
00051e e015      	LDI  R17,LOW(5)
00051f c00c      	RJMP _0x200003D
                 _0x200003C:
000520 35e8      	CPI  R30,LOW(0x58)
000521 f411      	BRNE _0x200003F
000522 6008      	ORI  R16,LOW(8)
000523 c003      	RJMP _0x2000040
                 _0x200003F:
000524 37e8      	CPI  R30,LOW(0x78)
000525 f009      	BREQ PC+2
000526 c0a1      	RJMP _0x2000071
                 _0x2000040:
000527 e5ee      	LDI  R30,LOW(_tbl16_G100*2)
000528 e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
000529 83ee      	STD  Y+6,R30
00052a 83ff      	STD  Y+6+1,R31
00052b e014      	LDI  R17,LOW(4)
                 _0x200003D:
00052c ff02      	SBRS R16,2
00052d c014      	RJMP _0x2000042
00052e 940e 07ae 	CALL SUBOPT_0x1C
000530 940e 07c4 	CALL SUBOPT_0x1F
000532 85ab      	LDD  R26,Y+11
000533 23aa      	TST  R26
000534 f43a      	BRPL _0x2000043
000535 85ea      	LDD  R30,Y+10
000536 85fb      	LDD  R31,Y+10+1
000537 940e 07ef 	CALL __ANEGW1
000539 87ea      	STD  Y+10,R30
00053a 87fb      	STD  Y+10+1,R31
00053b e24d      	LDI  R20,LOW(45)
                 _0x2000043:
00053c 3040      	CPI  R20,0
00053d f011      	BREQ _0x2000044
00053e 5f1f      	SUBI R17,-LOW(1)
00053f c001      	RJMP _0x2000045
                 _0x2000044:
000540 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
000541 c004      	RJMP _0x2000046
                 _0x2000042:
000542 940e 07ae 	CALL SUBOPT_0x1C
000544 940e 07c4 	CALL SUBOPT_0x1F
                 _0x2000046:
                 _0x2000036:
000546 fd00      	SBRC R16,0
000547 c011      	RJMP _0x2000047
                 _0x2000048:
000548 1715      	CP   R17,R21
000549 f478      	BRSH _0x200004A
00054a ff07      	SBRS R16,7
00054b c008      	RJMP _0x200004B
00054c ff02      	SBRS R16,2
00054d c004      	RJMP _0x200004C
00054e 7f0b      	ANDI R16,LOW(251)
00054f 2f24      	MOV  R18,R20
000550 5011      	SUBI R17,LOW(1)
000551 c001      	RJMP _0x200004D
                 _0x200004C:
000552 e320      	LDI  R18,LOW(48)
                 _0x200004D:
000553 c001      	RJMP _0x200004E
                 _0x200004B:
000554 e220      	LDI  R18,LOW(32)
                 _0x200004E:
000555 940e 07a7 	CALL SUBOPT_0x1B
000557 5051      	SUBI R21,LOW(1)
000558 cfef      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
000559 2f31      	MOV  R19,R17
00055a ff01      	SBRS R16,1
00055b c017      	RJMP _0x200004F
                 _0x2000050:
00055c 3030      	CPI  R19,0
00055d f0a1      	BREQ _0x2000052
00055e ff03      	SBRS R16,3
00055f c006      	RJMP _0x2000053
000560 81ee      	LDD  R30,Y+6
000561 81ff      	LDD  R31,Y+6+1
000562 9125      	LPM  R18,Z+
000563 83ee      	STD  Y+6,R30
000564 83ff      	STD  Y+6+1,R31
000565 c005      	RJMP _0x2000054
                 _0x2000053:
000566 81ae      	LDD  R26,Y+6
000567 81bf      	LDD  R27,Y+6+1
000568 912d      	LD   R18,X+
000569 83ae      	STD  Y+6,R26
00056a 83bf      	STD  Y+6+1,R27
                 _0x2000054:
00056b 940e 07a7 	CALL SUBOPT_0x1B
00056d 3050      	CPI  R21,0
00056e f009      	BREQ _0x2000055
00056f 5051      	SUBI R21,LOW(1)
                 _0x2000055:
000570 5031      	SUBI R19,LOW(1)
000571 cfea      	RJMP _0x2000050
                 _0x2000052:
000572 c04b      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
000573 e320      	LDI  R18,LOW(48)
000574 81ee      	LDD  R30,Y+6
000575 81ff      	LDD  R31,Y+6+1
000576 940e 0816 	CALL __GETW1PF
000578 87e8      	STD  Y+8,R30
000579 87f9      	STD  Y+8+1,R31
00057a 81ee      	LDD  R30,Y+6
00057b 81ff      	LDD  R31,Y+6+1
00057c 9632      	ADIW R30,2
00057d 83ee      	STD  Y+6,R30
00057e 83ff      	STD  Y+6+1,R31
                 _0x200005A:
00057f 85e8      	LDD  R30,Y+8
000580 85f9      	LDD  R31,Y+8+1
000581 85aa      	LDD  R26,Y+10
000582 85bb      	LDD  R27,Y+10+1
000583 17ae      	CP   R26,R30
000584 07bf      	CPC  R27,R31
000585 f050      	BRLO _0x200005C
000586 5f2f      	SUBI R18,-LOW(1)
000587 85a8      	LDD  R26,Y+8
000588 85b9      	LDD  R27,Y+8+1
000589 85ea      	LDD  R30,Y+10
00058a 85fb      	LDD  R31,Y+10+1
00058b 1bea      	SUB  R30,R26
00058c 0bfb      	SBC  R31,R27
00058d 87ea      	STD  Y+10,R30
00058e 87fb      	STD  Y+10+1,R31
00058f cfef      	RJMP _0x200005A
                 _0x200005C:
000590 332a      	CPI  R18,58
000591 f028      	BRLO _0x200005D
000592 ff03      	SBRS R16,3
000593 c002      	RJMP _0x200005E
000594 5f29      	SUBI R18,-LOW(7)
000595 c001      	RJMP _0x200005F
                 _0x200005E:
000596 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
000597 fd04      	SBRC R16,4
000598 c01a      	RJMP _0x2000061
000599 3321      	CPI  R18,49
00059a f420      	BRSH _0x2000063
00059b 85a8      	LDD  R26,Y+8
00059c 85b9      	LDD  R27,Y+8+1
00059d 9711      	SBIW R26,1
00059e f409      	BRNE _0x2000062
                 _0x2000063:
00059f c009      	RJMP _0x20000CD
                 _0x2000062:
0005a0 1753      	CP   R21,R19
0005a1 f010      	BRLO _0x2000067
0005a2 ff00      	SBRS R16,0
0005a3 c001      	RJMP _0x2000068
                 _0x2000067:
0005a4 c013      	RJMP _0x2000066
                 _0x2000068:
0005a5 e220      	LDI  R18,LOW(32)
0005a6 ff07      	SBRS R16,7
0005a7 c00b      	RJMP _0x2000069
0005a8 e320      	LDI  R18,LOW(48)
                 _0x20000CD:
0005a9 6100      	ORI  R16,LOW(16)
0005aa ff02      	SBRS R16,2
0005ab c007      	RJMP _0x200006A
0005ac 7f0b      	ANDI R16,LOW(251)
0005ad 934a      	ST   -Y,R20
0005ae 940e 07b4 	CALL SUBOPT_0x1D
0005b0 3050      	CPI  R21,0
0005b1 f009      	BREQ _0x200006B
0005b2 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
0005b3 940e 07a7 	CALL SUBOPT_0x1B
0005b5 3050      	CPI  R21,0
0005b6 f009      	BREQ _0x200006C
0005b7 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
0005b8 5031      	SUBI R19,LOW(1)
0005b9 85a8      	LDD  R26,Y+8
0005ba 85b9      	LDD  R27,Y+8+1
0005bb 9712      	SBIW R26,2
0005bc f008      	BRLO _0x2000059
0005bd cfb5      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
0005be ff00      	SBRS R16,0
0005bf c008      	RJMP _0x200006D
                 _0x200006E:
0005c0 3050      	CPI  R21,0
0005c1 f031      	BREQ _0x2000070
0005c2 5051      	SUBI R21,LOW(1)
0005c3 e2e0      	LDI  R30,LOW(32)
0005c4 93ea      	ST   -Y,R30
0005c5 940e 07b4 	CALL SUBOPT_0x1D
0005c7 cff8      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000CC:
0005c8 e010      	LDI  R17,LOW(0)
                 _0x200001B:
0005c9 cee0      	RJMP _0x2000016
                 _0x2000018:
0005ca 85ac      	LDD  R26,Y+12
0005cb 85bd      	LDD  R27,Y+12+1
0005cc 940e 0812 	CALL __GETW1P
0005ce 940e 084f 	CALL __LOADLOCR6
0005d0 9664      	ADIW R28,20
0005d1 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
0005d2 92ff      	PUSH R15
0005d3 2ef8      	MOV  R15,R24
0005d4 9726      	SBIW R28,6
0005d5 940e 084a 	CALL __SAVELOCR4
0005d7 940e 07cc 	CALL SUBOPT_0x20
0005d9 9730      	SBIW R30,0
0005da f419      	BRNE _0x2000072
0005db efef      	LDI  R30,LOW(65535)
0005dc efff      	LDI  R31,HIGH(65535)
0005dd c023      	RJMP _0x2080003
                 _0x2000072:
0005de 01de      	MOVW R26,R28
0005df 9616      	ADIW R26,6
0005e0 940e 07eb 	CALL __ADDW2R15
0005e2 018d      	MOVW R16,R26
0005e3 940e 07cc 	CALL SUBOPT_0x20
0005e5 83ee      	STD  Y+6,R30
0005e6 83ff      	STD  Y+6+1,R31
0005e7 e0e0      	LDI  R30,LOW(0)
0005e8 87e8      	STD  Y+8,R30
0005e9 87e9      	STD  Y+8+1,R30
0005ea 01de      	MOVW R26,R28
0005eb 961a      	ADIW R26,10
0005ec 940e 07eb 	CALL __ADDW2R15
0005ee 940e 0812 	CALL __GETW1P
0005f0 93fa      	ST   -Y,R31
0005f1 93ea      	ST   -Y,R30
0005f2 931a      	ST   -Y,R17
0005f3 930a      	ST   -Y,R16
0005f4 e5ee      	LDI  R30,LOW(_put_buff_G100)
0005f5 e0f4      	LDI  R31,HIGH(_put_buff_G100)
0005f6 93fa      	ST   -Y,R31
0005f7 93ea      	ST   -Y,R30
0005f8 01de      	MOVW R26,R28
0005f9 961a      	ADIW R26,10
0005fa dea3      	RCALL __print_G100
0005fb 019f      	MOVW R18,R30
0005fc 81ae      	LDD  R26,Y+6
0005fd 81bf      	LDD  R27,Y+6+1
0005fe e0e0      	LDI  R30,LOW(0)
0005ff 93ec      	ST   X,R30
000600 01f9      	MOVW R30,R18
                 _0x2080003:
000601 940e 0851 	CALL __LOADLOCR4
000603 962a      	ADIW R28,10
000604 90ff      	POP  R15
000605 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G101:
                 ; .FSTART __lcd_write_nibble_G101
000606 93aa      	ST   -Y,R26
000607 81e8      	LD   R30,Y
000608 71e0      	ANDI R30,LOW(0x10)
000609 f011      	BREQ _0x2020004
00060a 9ac3      	SBI  0x18,3
00060b c001      	RJMP _0x2020005
                 _0x2020004:
00060c 98c3      	CBI  0x18,3
                 _0x2020005:
00060d 81e8      	LD   R30,Y
00060e 72e0      	ANDI R30,LOW(0x20)
00060f f011      	BREQ _0x2020006
000610 9ac4      	SBI  0x18,4
000611 c001      	RJMP _0x2020007
                 _0x2020006:
000612 98c4      	CBI  0x18,4
                 _0x2020007:
000613 81e8      	LD   R30,Y
000614 74e0      	ANDI R30,LOW(0x40)
000615 f011      	BREQ _0x2020008
000616 9ac5      	SBI  0x18,5
000617 c001      	RJMP _0x2020009
                 _0x2020008:
000618 98c5      	CBI  0x18,5
                 _0x2020009:
000619 81e8      	LD   R30,Y
00061a 78e0      	ANDI R30,LOW(0x80)
00061b f011      	BREQ _0x202000A
00061c 9ac6      	SBI  0x18,6
00061d c001      	RJMP _0x202000B
                 _0x202000A:
00061e 98c6      	CBI  0x18,6
                 _0x202000B:
                +
00061f e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000620 958a     +DEC R24
000621 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000622 9ac2      	SBI  0x18,2
                +
000623 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000624 958a     +DEC R24
000625 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000626 98c2      	CBI  0x18,2
                +
000627 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000628 958a     +DEC R24
000629 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00062a c09b      	RJMP _0x2080001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
00062b 93aa      	ST   -Y,R26
00062c 81a8      	LD   R26,Y
00062d dfd8      	RCALL __lcd_write_nibble_G101
00062e 81e8          ld    r30,y
00062f 95e2          swap  r30
000630 83e8          st    y,r30
000631 81a8      	LD   R26,Y
000632 dfd3      	RCALL __lcd_write_nibble_G101
                +
000633 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
000634 958a     +DEC R24
000635 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
000636 c08f      	RJMP _0x2080001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000637 93aa      	ST   -Y,R26
000638 81e8      	LD   R30,Y
000639 e0f0      	LDI  R31,0
00063a 59ed      	SUBI R30,LOW(-__base_y_G101)
00063b 4ffd      	SBCI R31,HIGH(-__base_y_G101)
00063c 81e0      	LD   R30,Z
00063d 81a9      	LDD  R26,Y+1
00063e 0fae      	ADD  R26,R30
00063f dfeb      	RCALL __lcd_write_data
000640 81e9      	LDD  R30,Y+1
000641 93e0 0267 	STS  __lcd_x,R30
000643 81e8      	LD   R30,Y
000644 93e0 0268 	STS  __lcd_y,R30
000646 9622      	ADIW R28,2
000647 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000648 e0a2      	LDI  R26,LOW(2)
000649 940e 07d3 	CALL SUBOPT_0x21
00064b e0ac      	LDI  R26,LOW(12)
00064c dfde      	RCALL __lcd_write_data
00064d e0a1      	LDI  R26,LOW(1)
00064e 940e 07d3 	CALL SUBOPT_0x21
000650 e0e0      	LDI  R30,LOW(0)
000651 93e0 0268 	STS  __lcd_y,R30
000653 93e0 0267 	STS  __lcd_x,R30
000655 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000656 93aa      	ST   -Y,R26
000657 81a8      	LD   R26,Y
000658 30aa      	CPI  R26,LOW(0xA)
000659 f031      	BREQ _0x2020011
00065a 91e0 0269 	LDS  R30,__lcd_maxx
00065c 91a0 0267 	LDS  R26,__lcd_x
00065e 17ae      	CP   R26,R30
00065f f060      	BRLO _0x2020010
                 _0x2020011:
000660 e0e0      	LDI  R30,LOW(0)
000661 93ea      	ST   -Y,R30
000662 91a0 0268 	LDS  R26,__lcd_y
000664 5faf      	SUBI R26,-LOW(1)
000665 93a0 0268 	STS  __lcd_y,R26
000667 dfcf      	RCALL _lcd_gotoxy
000668 81a8      	LD   R26,Y
000669 30aa      	CPI  R26,LOW(0xA)
00066a f409      	BRNE _0x2020013
00066b c05a      	RJMP _0x2080001
                 _0x2020013:
                 _0x2020010:
00066c 91e0 0267 	LDS  R30,__lcd_x
00066e 5fef      	SUBI R30,-LOW(1)
00066f 93e0 0267 	STS  __lcd_x,R30
000671 9ac0      	SBI  0x18,0
000672 81a8      	LD   R26,Y
000673 dfb7      	RCALL __lcd_write_data
000674 98c0      	CBI  0x18,0
000675 c050      	RJMP _0x2080001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000676 93ba      	ST   -Y,R27
000677 93aa      	ST   -Y,R26
000678 931a      	ST   -Y,R17
                 _0x2020014:
000679 81a9      	LDD  R26,Y+1
00067a 81ba      	LDD  R27,Y+1+1
00067b 91ed      	LD   R30,X+
00067c 83a9      	STD  Y+1,R26
00067d 83ba      	STD  Y+1+1,R27
00067e 2f1e      	MOV  R17,R30
00067f 30e0      	CPI  R30,0
000680 f019      	BREQ _0x2020016
000681 2fa1      	MOV  R26,R17
000682 dfd3      	RCALL _lcd_putchar
000683 cff5      	RJMP _0x2020014
                 _0x2020016:
000684 c010      	RJMP _0x2080002
                 ; .FEND
                 _lcd_putsf:
                 ; .FSTART _lcd_putsf
000685 93ba      	ST   -Y,R27
000686 93aa      	ST   -Y,R26
000687 931a      	ST   -Y,R17
                 _0x2020017:
000688 81e9      	LDD  R30,Y+1
000689 81fa      	LDD  R31,Y+1+1
00068a 9631      	ADIW R30,1
00068b 83e9      	STD  Y+1,R30
00068c 83fa      	STD  Y+1+1,R31
00068d 9731      	SBIW R30,1
00068e 91e4      	LPM  R30,Z
00068f 2f1e      	MOV  R17,R30
000690 30e0      	CPI  R30,0
000691 f019      	BREQ _0x2020019
000692 2fa1      	MOV  R26,R17
000693 dfc2      	RCALL _lcd_putchar
000694 cff3      	RJMP _0x2020017
                 _0x2020019:
                 _0x2080002:
000695 8118      	LDD  R17,Y+0
000696 9623      	ADIW R28,3
000697 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000698 93aa      	ST   -Y,R26
000699 9abb      	SBI  0x17,3
00069a 9abc      	SBI  0x17,4
00069b 9abd      	SBI  0x17,5
00069c 9abe      	SBI  0x17,6
00069d 9aba      	SBI  0x17,2
00069e 9ab8      	SBI  0x17,0
00069f 9ab9      	SBI  0x17,1
0006a0 98c2      	CBI  0x18,2
0006a1 98c0      	CBI  0x18,0
0006a2 98c1      	CBI  0x18,1
0006a3 81e8      	LD   R30,Y
0006a4 93e0 0269 	STS  __lcd_maxx,R30
0006a6 58e0      	SUBI R30,-LOW(128)
                +
0006a7 93e0 0265+STS __base_y_G101 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G101,2
0006a9 81e8      	LD   R30,Y
0006aa 54e0      	SUBI R30,-LOW(192)
                +
0006ab 93e0 0266+STS __base_y_G101 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G101,3
0006ad e1a4      	LDI  R26,LOW(20)
0006ae e0b0      	LDI  R27,0
0006af 940e 07e1 	CALL _delay_ms
0006b1 940e 07d9 	CALL SUBOPT_0x22
0006b3 940e 07d9 	CALL SUBOPT_0x22
0006b5 940e 07d9 	CALL SUBOPT_0x22
0006b7 e2a0      	LDI  R26,LOW(32)
0006b8 df4d      	RCALL __lcd_write_nibble_G101
                +
0006b9 ec88     +LDI R24 , LOW ( 200 )
0006ba e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0006bb 9701     +SBIW R24 , 1
0006bc f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0006bd e2a8      	LDI  R26,LOW(40)
0006be df6c      	RCALL __lcd_write_data
0006bf e0a4      	LDI  R26,LOW(4)
0006c0 df6a      	RCALL __lcd_write_data
0006c1 e8a5      	LDI  R26,LOW(133)
0006c2 df68      	RCALL __lcd_write_data
0006c3 e0a6      	LDI  R26,LOW(6)
0006c4 df66      	RCALL __lcd_write_data
0006c5 df82      	RCALL _lcd_clear
                 _0x2080001:
0006c6 9621      	ADIW R28,1
0006c7 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
0006c8 93ba      	ST   -Y,R27
0006c9 93aa      	ST   -Y,R26
0006ca 91a9          ld   r26,y+
0006cb 91b9          ld   r27,y+
0006cc 27ee          clr  r30
0006cd 27ff          clr  r31
                 strlen0:
0006ce 916d          ld   r22,x+
0006cf 2366          tst  r22
0006d0 f011          breq strlen1
0006d1 9631          adiw r30,1
0006d2 cffb          rjmp strlen0
                 strlen1:
0006d3 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
0006d4 93ba      	ST   -Y,R27
0006d5 93aa      	ST   -Y,R26
0006d6 27aa          clr  r26
0006d7 27bb          clr  r27
0006d8 91e9          ld   r30,y+
0006d9 91f9          ld   r31,y+
                 strlenf0:
0006da 9005      	lpm  r0,z+
0006db 2000          tst  r0
0006dc f011          breq strlenf1
0006dd 9611          adiw r26,1
0006de cffb          rjmp strlenf0
                 strlenf1:
0006df 01fd          movw r30,r26
0006e0 9508          ret
                 ; .FEND
                 
                 	.ESEG
                 _enter_array:
000000           	.BYTE 0x3E
                 _exit_array:
00003e           	.BYTE 0x3E
                 _i:
00007c           	.BYTE 0x1
                 
                 	.DSEG
                 _month:
000260           	.BYTE 0x1
                 _year:
000261           	.BYTE 0x2
                 __base_y_G101:
000263           	.BYTE 0x4
                 __lcd_x:
000267           	.BYTE 0x1
                 __lcd_y:
000268           	.BYTE 0x1
                 __lcd_maxx:
000269           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x0:
0006e1 93aa      	ST   -Y,R26
0006e2 93ba      	ST   -Y,R27
0006e3 93ea      	ST   -Y,R30
0006e4 93fa      	ST   -Y,R31
0006e5 b7ef      	IN   R30,SREG
0006e6 93ea      	ST   -Y,R30
0006e7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x1:
0006e8 e0e1      	LDI  R30,LOW(1)
0006e9 2ece      	MOV  R12,R30
0006ea 91e0 0260 	LDS  R30,_month
0006ec 5fef      	SUBI R30,-LOW(1)
0006ed 93e0 0260 	STS  _month,R30
0006ef 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
0006f0 e6a1      	LDI  R26,LOW(_year)
0006f1 e0b2      	LDI  R27,HIGH(_year)
0006f2 91ed      	LD   R30,X+
0006f3 91fd      	LD   R31,X+
0006f4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x3:
0006f5 2da9      	MOV  R26,R9
0006f6 e0b0      	LDI  R27,0
0006f7 fda7      	SBRC R26,7
0006f8 efbf      	SER  R27
0006f9 2de8      	MOV  R30,R8
0006fa e0f0      	LDI  R31,0
0006fb fde7      	SBRC R30,7
0006fc efff      	SER  R31
0006fd 0fae      	ADD  R26,R30
0006fe 1fbf      	ADC  R27,R31
0006ff 971a      	SBIW R26,10
000700 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4:
000701 e0e0      	LDI  R30,LOW(0)
000702 93ea      	ST   -Y,R30
000703 e0a1      	LDI  R26,LOW(1)
000704 940c 0637 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x5:
000706 e7ac      	LDI  R26,LOW(_i)
000707 e0b0      	LDI  R27,HIGH(_i)
000708 940e 0823 	CALL __EEPROMRDB
00070a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x6:
00070b 2daa      	MOV  R26,R10
00070c e0e0      	LDI  R30,LOW(0)
00070d 940e 07fe 	CALL __EQB12
00070f 2e0e      	MOV  R0,R30
000710 2dab      	MOV  R26,R11
000711 e0e0      	LDI  R30,LOW(0)
000712 940e 07fe 	CALL __EQB12
000714 220e      	AND  R0,R30
000715 2dad      	MOV  R26,R13
000716 e0e0      	LDI  R30,LOW(0)
000717 940e 07fe 	CALL __EQB12
000719 21e0      	AND  R30,R0
00071a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 12 TIMES, CODE SIZE REDUCTION:30 WORDS
                 SUBOPT_0x7:
00071b 940e 07f3 	CALL __CBD1
00071d 940e 081a 	CALL __PUTPARD1
00071f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x8:
000720 91e0 0261 	LDS  R30,_year
000722 91f0 0262 	LDS  R31,_year+1
000724 940e 07f9 	CALL __CWD1
000726 940e 081a 	CALL __PUTPARD1
000728 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x9:
000729 01fe      	MOVW R30,R28
00072a 93fa      	ST   -Y,R31
00072b 93ea      	ST   -Y,R30
00072c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xA:
00072d 01de      	MOVW R26,R28
00072e 940c 0676 	JMP  _lcd_puts
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0xB:
000730 e1a9      	LDI  R26,LOW(25)
000731 e0b0      	LDI  R27,0
000732 940c 07e1 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0xC:
000734 e0a0      	LDI  R26,0
000735 99ca      	SBIC 0x19,2
000736 e0a1      	LDI  R26,1
000737 e0e0      	LDI  R30,LOW(0)
000738 940e 07fe 	CALL __EQB12
00073a 2e0e      	MOV  R0,R30
00073b 2fa1      	MOV  R26,R17
00073c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0xD:
00073d e0e0      	LDI  R30,LOW(0)
00073e 940e 07fe 	CALL __EQB12
000740 21e0      	AND  R30,R0
000741 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0xE:
000742 e0e1      	LDI  R30,LOW(1)
000743 940e 07fe 	CALL __EQB12
000745 21e0      	AND  R30,R0
000746 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xF:
000747 e0e2      	LDI  R30,LOW(2)
000748 940e 07fe 	CALL __EQB12
00074a 21e0      	AND  R30,R0
00074b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x10:
00074c e084      	LDI  R24,4
00074d 940e 05d2 	CALL _sprintf
00074f 9628      	ADIW R28,8
000750 940e 0648 	CALL _lcd_clear
000752 cfda      	RJMP SUBOPT_0xA
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x11:
000753 e0a0      	LDI  R26,0
000754 99c9      	SBIC 0x19,1
000755 e0a1      	LDI  R26,1
000756 e0e0      	LDI  R30,LOW(0)
000757 940e 07fe 	CALL __EQB12
000759 2e0e      	MOV  R0,R30
00075a e0a0      	LDI  R26,0
00075b fcf0      	SBRC R15,0
00075c e0a1      	LDI  R26,1
00075d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x12:
00075e e0a0      	LDI  R26,0
00075f 99c8      	SBIC 0x19,0
000760 e0a1      	LDI  R26,1
000761 e0e0      	LDI  R30,LOW(0)
000762 940e 07fe 	CALL __EQB12
000764 2e0e      	MOV  R0,R30
000765 e0a0      	LDI  R26,0
000766 fcf0      	SBRC R15,0
000767 e0a1      	LDI  R26,1
000768 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x13:
000769 2e0e      	MOV  R0,R30
00076a e0a0      	LDI  R26,0
00076b fcf0      	SBRC R15,0
00076c e0a1      	LDI  R26,1
00076d cfcf      	RJMP SUBOPT_0xD
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x14:
00076e 940e 080d 	CALL __GTB12U
000770 220e      	AND  R0,R30
000771 e0a0      	LDI  R26,0
000772 fcf0      	SBRC R15,0
000773 e0a1      	LDI  R26,1
000774 cfcd      	RJMP SUBOPT_0xE
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x15:
000775 e001      	LDI  R16,LOW(1)
000776 5f1f      	SUBI R17,-1
000777 94e8      	CLT
000778 f8f0      	BLD  R15,0
000779 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x16:
00077a e0f0      	LDI  R31,0
00077b 0fee      	LSL  R30
00077c 1fff      	ROL  R31
00077d 0fae      	ADD  R26,R30
00077e 1fbf      	ADC  R27,R31
00077f 940e 081f 	CALL __EEPROMRDW
000781 2766      	CLR  R22
000782 2777      	CLR  R23
000783 940e 081a 	CALL __PUTPARD1
000785 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x17:
000786 01fe      	MOVW R30,R28
000787 9631      	ADIW R30,1
000788 93fa      	ST   -Y,R31
000789 93ea      	ST   -Y,R30
00078a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x18:
00078b e084      	LDI  R24,4
00078c 940e 05d2 	CALL _sprintf
00078e 9628      	ADIW R28,8
00078f 940e 0648 	CALL _lcd_clear
000791 01de      	MOVW R26,R28
000792 9611      	ADIW R26,1
000793 940c 0676 	JMP  _lcd_puts
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x19:
000795 e0a0      	LDI  R26,0
000796 99c9      	SBIC 0x19,1
000797 e0a1      	LDI  R26,1
000798 e0e0      	LDI  R30,LOW(0)
000799 940e 07fe 	CALL __EQB12
00079b 2e0e      	MOV  R0,R30
00079c 2fa1      	MOV  R26,R17
00079d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x1A:
00079e e0a0      	LDI  R26,0
00079f 99c8      	SBIC 0x19,0
0007a0 e0a1      	LDI  R26,1
0007a1 e0e0      	LDI  R30,LOW(0)
0007a2 940e 07fe 	CALL __EQB12
0007a4 2e0e      	MOV  R0,R30
0007a5 2fa1      	MOV  R26,R17
0007a6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x1B:
0007a7 932a      	ST   -Y,R18
0007a8 85ad      	LDD  R26,Y+13
0007a9 85be      	LDD  R27,Y+13+1
0007aa 85ef      	LDD  R30,Y+15
0007ab 89f8      	LDD  R31,Y+15+1
0007ac 9509      	ICALL
0007ad 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x1C:
0007ae 89e8      	LDD  R30,Y+16
0007af 89f9      	LDD  R31,Y+16+1
0007b0 9734      	SBIW R30,4
0007b1 8be8      	STD  Y+16,R30
0007b2 8bf9      	STD  Y+16+1,R31
0007b3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1D:
0007b4 85ad      	LDD  R26,Y+13
0007b5 85be      	LDD  R27,Y+13+1
0007b6 85ef      	LDD  R30,Y+15
0007b7 89f8      	LDD  R31,Y+15+1
0007b8 9509      	ICALL
0007b9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x1E:
0007ba 89a8      	LDD  R26,Y+16
0007bb 89b9      	LDD  R27,Y+16+1
0007bc 9614      	ADIW R26,4
0007bd 940e 0812 	CALL __GETW1P
0007bf 83ee      	STD  Y+6,R30
0007c0 83ff      	STD  Y+6+1,R31
0007c1 81ae      	LDD  R26,Y+6
0007c2 81bf      	LDD  R27,Y+6+1
0007c3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1F:
0007c4 89a8      	LDD  R26,Y+16
0007c5 89b9      	LDD  R27,Y+16+1
0007c6 9614      	ADIW R26,4
0007c7 940e 0812 	CALL __GETW1P
0007c9 87ea      	STD  Y+10,R30
0007ca 87fb      	STD  Y+10+1,R31
0007cb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x20:
0007cc 01de      	MOVW R26,R28
0007cd 961c      	ADIW R26,12
0007ce 940e 07eb 	CALL __ADDW2R15
0007d0 940e 0812 	CALL __GETW1P
0007d2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x21:
0007d3 940e 062b 	CALL __lcd_write_data
0007d5 e0a3      	LDI  R26,LOW(3)
0007d6 e0b0      	LDI  R27,0
0007d7 940c 07e1 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x22:
0007d9 e3a0      	LDI  R26,LOW(48)
0007da 940e 0606 	CALL __lcd_write_nibble_G101
                +
0007dc ec88     +LDI R24 , LOW ( 200 )
0007dd e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0007de 9701     +SBIW R24 , 1
0007df f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0007e0 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0007e1 9610      	adiw r26,0
0007e2 f039      	breq __delay_ms1
                 __delay_ms0:
0007e3 95a8      	wdr
                +
0007e4 ed80     +LDI R24 , LOW ( 0x7D0 )
0007e5 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0007e6 9701     +SBIW R24 , 1
0007e7 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0007e8 9711      	sbiw r26,1
0007e9 f7c9      	brne __delay_ms0
                 __delay_ms1:
0007ea 9508      	ret
                 
                 __ADDW2R15:
0007eb 2400      	CLR  R0
0007ec 0daf      	ADD  R26,R15
0007ed 1db0      	ADC  R27,R0
0007ee 9508      	RET
                 
                 __ANEGW1:
0007ef 95f1      	NEG  R31
0007f0 95e1      	NEG  R30
0007f1 40f0      	SBCI R31,0
0007f2 9508      	RET
                 
                 __CBD1:
0007f3 2ffe      	MOV  R31,R30
0007f4 0fff      	ADD  R31,R31
0007f5 0bff      	SBC  R31,R31
0007f6 2f6f      	MOV  R22,R31
0007f7 2f7f      	MOV  R23,R31
0007f8 9508      	RET
                 
                 __CWD1:
0007f9 2f6f      	MOV  R22,R31
0007fa 0f66      	ADD  R22,R22
0007fb 0b66      	SBC  R22,R22
0007fc 2f76      	MOV  R23,R22
0007fd 9508      	RET
                 
                 __EQB12:
0007fe 17ea      	CP   R30,R26
0007ff e0e1      	LDI  R30,1
000800 f009      	BREQ __EQB12T
000801 27ee      	CLR  R30
                 __EQB12T:
000802 9508      	RET
                 
                 __LEB12U:
000803 17ea      	CP   R30,R26
000804 e0e1      	LDI  R30,1
000805 f408      	BRSH __LEB12U1
000806 27ee      	CLR  R30
                 __LEB12U1:
000807 9508      	RET
                 
                 __LTB12U:
000808 17ae      	CP   R26,R30
000809 e0e1      	LDI  R30,1
00080a f008      	BRLO __LTB12U1
00080b 27ee      	CLR  R30
                 __LTB12U1:
00080c 9508      	RET
                 
                 __GTB12U:
00080d 17ea      	CP   R30,R26
00080e e0e1      	LDI  R30,1
00080f f008      	BRLO __GTB12U1
000810 27ee      	CLR  R30
                 __GTB12U1:
000811 9508      	RET
                 
                 __GETW1P:
000812 91ed      	LD   R30,X+
000813 91fc      	LD   R31,X
000814 9711      	SBIW R26,1
000815 9508      	RET
                 
                 __GETW1PF:
000816 9005      	LPM  R0,Z+
000817 91f4      	LPM  R31,Z
000818 2de0      	MOV  R30,R0
000819 9508      	RET
                 
                 __PUTPARD1:
00081a 937a      	ST   -Y,R23
00081b 936a      	ST   -Y,R22
00081c 93fa      	ST   -Y,R31
00081d 93ea      	ST   -Y,R30
00081e 9508      	RET
                 
                 __EEPROMRDW:
00081f 9611      	ADIW R26,1
000820 d002      	RCALL __EEPROMRDB
000821 2ffe      	MOV  R31,R30
000822 9711      	SBIW R26,1
                 
                 __EEPROMRDB:
000823 99e1      	SBIC EECR,EEWE
000824 cffe      	RJMP __EEPROMRDB
000825 93ff      	PUSH R31
000826 b7ff      	IN   R31,SREG
000827 94f8      	CLI
000828 bbae      	OUT  EEARL,R26
000829 bbbf      	OUT  EEARH,R27
00082a 9ae0      	SBI  EECR,EERE
00082b b3ed      	IN   R30,EEDR
00082c bfff      	OUT  SREG,R31
00082d 91ff      	POP  R31
00082e 9508      	RET
                 
                 __EEPROMWRW:
00082f d007      	RCALL __EEPROMWRB
000830 9611      	ADIW R26,1
000831 93ef      	PUSH R30
000832 2fef      	MOV  R30,R31
000833 d003      	RCALL __EEPROMWRB
000834 91ef      	POP  R30
000835 9711      	SBIW R26,1
000836 9508      	RET
                 
                 __EEPROMWRB:
000837 9be1      	SBIS EECR,EEWE
000838 c002      	RJMP __EEPROMWRB1
000839 95a8      	WDR
00083a cffc      	RJMP __EEPROMWRB
                 __EEPROMWRB1:
00083b b79f      	IN   R25,SREG
00083c 94f8      	CLI
00083d bbae      	OUT  EEARL,R26
00083e bbbf      	OUT  EEARH,R27
00083f 9ae0      	SBI  EECR,EERE
000840 b38d      	IN   R24,EEDR
000841 17e8      	CP   R30,R24
000842 f019      	BREQ __EEPROMWRB0
000843 bbed      	OUT  EEDR,R30
000844 9ae2      	SBI  EECR,EEMWE
000845 9ae1      	SBI  EECR,EEWE
                 __EEPROMWRB0:
000846 bf9f      	OUT  SREG,R25
000847 9508      	RET
                 
                 __SAVELOCR6:
000848 935a      	ST   -Y,R21
                 __SAVELOCR5:
000849 934a      	ST   -Y,R20
                 __SAVELOCR4:
00084a 933a      	ST   -Y,R19
                 __SAVELOCR3:
00084b 932a      	ST   -Y,R18
                 __SAVELOCR2:
00084c 931a      	ST   -Y,R17
00084d 930a      	ST   -Y,R16
00084e 9508      	RET
                 
                 __LOADLOCR6:
00084f 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000850 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000851 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000852 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000853 8119      	LDD  R17,Y+1
000854 8108      	LD   R16,Y
000855 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32A register use summary:
r0 :  29 r1 :   1 r2 :   6 r3 :   0 r4 :   3 r5 :   0 r6 :   3 r7 :   0 
r8 :  12 r9 :  11 r10:  12 r11:  12 r12:  16 r13:   5 r14:   0 r15:  22 
r16:  54 r17:  75 r18:  29 r19:   8 r20:   9 r21:  17 r22:  15 r23:   6 
r24:  30 r25:   7 r26: 196 r27:  69 r28:  38 r29:   1 r30: 397 r31: 121 
x  :  31 y  : 219 z  :  16 
Registers used: 31 out of 35 (88.6%)

ATmega32A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   5 add   :   9 
adiw  :  48 and   :   7 andi  :   8 asr   :   0 bclr  :   0 bld   :   8 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  46 
brge  :  12 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  17 
brlt  :   8 brmi  :   1 brne  :  45 brpl  :   1 brsh  :   4 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  : 207 
cbi   :   9 cbr   :   0 clc   :   0 clh   :   0 cli   :   3 cln   :   0 
clr   :  29 cls   :   0 clt   :   6 clv   :   0 clz   :   0 com   :   0 
cp    :  25 cpc   :   3 cpi   :  58 cpse  :   0 dec   :  10 des   :   0 
eor   :   1 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   6 inc   :   9 jmp   :  27 ld    :  37 ldd   :  80 ldi   : 248 
lds   :  19 lpm   :  16 lsl   :   3 lsr   :   0 mov   :  79 movw  :  30 
mul   :   1 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   0 
ori   :   7 out   :  25 pop   :   5 push  :   5 rcall :  23 ret   :  58 
reti  :   1 rjmp  : 137 rol   :   3 ror   :   0 sbc   :   3 sbci  :   2 
sbi   :  17 sbic  :  19 sbis  :  28 sbiw  :  30 sbr   :   0 sbrc  :  11 
sbrs  :  13 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   3 
ses   :   0 set   :   6 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    : 103 std   :  33 sts   :  17 sub   :   4 subi  :  30 swap  :   1 
tst   :   4 wdr   :   2 
Instructions used: 66 out of 116 (56.9%)

ATmega32A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0010ac   3974    294   4268   32768  13.0%
[.dseg] 0x000060 0x00026a      0     10     10    2048   0.5%
[.eseg] 0x000000 0x00007d      0    125    125    1024  12.2%

Assembly complete, 0 errors, 13 warnings
