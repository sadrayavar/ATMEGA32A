
AVRASM ver. 2.1.30  D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm Thu Feb 08 13:20:17 2024

D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1087): warning: Register r4 already defined by the .DEF directive
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1088): warning: Register r5 already defined by the .DEF directive
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1089): warning: Register r6 already defined by the .DEF directive
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1090): warning: Register r7 already defined by the .DEF directive
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1091): warning: Register r9 already defined by the .DEF directive
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1092): warning: Register r8 already defined by the .DEF directive
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1093): warning: Register r11 already defined by the .DEF directive
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1094): warning: Register r10 already defined by the .DEF directive
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1095): warning: Register r13 already defined by the .DEF directive
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1096): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Release
                 ;Chip type              : ATmega32A
                 ;Program type           : Application
                 ;Clock frequency        : 8/000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32A
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _n_vurud=R4
                 	.DEF _n_vurud_msb=R5
                 	.DEF _n_khuruj=R6
                 	.DEF _n_khuruj_msb=R7
                 	.DEF _capacity=R9
                 	.DEF _reserved=R8
                 	.DEF _minute=R11
                 	.DEF _hour=R10
                 	.DEF _second=R13
                 	.DEF _day=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 00bc 	JMP  __RESET
000002 940c 012f 	JMP  _ext_int0_isr
000004 940c 0152 	JMP  _ext_int1_isr
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 00eb 	JMP  _timer2_ovf_isr
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
000033 0002      	.DW  0x0002
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000034 0a00
000035 3b17      	.DB  0x0,0xA,0x17,0x3B
000036 0a0c      	.DB  0xC,0xA
                 
                 _0x3:
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1143): warning: .cseg .db misalignment - padding zero byte
000037 000a      	.DB  0xA
                 _0x4:
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1145): warning: .cseg .db misalignment - padding zero byte
000038 000c      	.DB  0xC
                 _0x5:
000039 057a      	.DB  0x7A,0x5
                 _0x0:
00003a 6d45
00003b 0070
00003c 7546
00003d 6c6c      	.DB  0x45,0x6D,0x70,0x0,0x46,0x75,0x6C,0x6C
00003e 7300
00003f 7661
000040 6e69
000041 2067      	.DB  0x0,0x73,0x61,0x76,0x69,0x6E,0x67,0x20
000042 6164
000043 6174
000044 4300
000045 7061      	.DB  0x64,0x61,0x74,0x61,0x0,0x43,0x61,0x70
000046 253d
000047 2064
000048 6425
000049 252f      	.DB  0x3D,0x25,0x64,0x20,0x25,0x64,0x2F,0x25
00004a 2f64
00004b 6425
00004c 2500
00004d 3a64      	.DB  0x64,0x2F,0x25,0x64,0x0,0x25,0x64,0x3A
00004e 6425
00004f 253a
000050 2064
000051 5220      	.DB  0x25,0x64,0x3A,0x25,0x64,0x20,0x20,0x52
000052 7365
000053 253d
000054 2064
000055 5400      	.DB  0x65,0x73,0x3D,0x25,0x64,0x20,0x0,0x54
000056 6d69
000057 2065
000058 6553
000059 7474      	.DB  0x69,0x6D,0x65,0x20,0x53,0x65,0x74,0x74
00005a 6e69
00005b 2067
00005c 3e3e
00005d 4900      	.DB  0x69,0x6E,0x67,0x20,0x3E,0x3E,0x0,0x49
00005e 264e
00005f 554f
000060 2054
000061 6553      	.DB  0x4E,0x26,0x4F,0x55,0x54,0x20,0x53,0x65
000062 7261
000063 6863
000064 3e20
000065 003e      	.DB  0x61,0x72,0x63,0x68,0x20,0x3E,0x3E,0x0
000066 6552
000067 6573
000068 7672
000069 5f65      	.DB  0x52,0x65,0x73,0x65,0x72,0x76,0x65,0x5F
00006a 6150
00006b 6b72
00006c 3e20
00006d 003e      	.DB  0x50,0x61,0x72,0x6B,0x20,0x3E,0x3E,0x0
00006e 6553
00006f 2074
000070 6164
000071 6174      	.DB  0x53,0x65,0x74,0x20,0x64,0x61,0x74,0x61
000072 3e20
000073 003e
000074 6553
000075 2074      	.DB  0x20,0x3E,0x3E,0x0,0x53,0x65,0x74,0x20
000076 696d
000077 3d6e
000078 6425
000079 2020      	.DB  0x6D,0x69,0x6E,0x3D,0x25,0x64,0x20,0x20
00007a 003e
00007b 6553
00007c 2074
00007d 6f68      	.DB  0x3E,0x0,0x53,0x65,0x74,0x20,0x68,0x6F
00007e 7275
00007f 253d
000080 2064
000081 3e20      	.DB  0x75,0x72,0x3D,0x25,0x64,0x20,0x20,0x3E
000082 2500
000083 2f64
000084 6425
000085 252f      	.DB  0x0,0x25,0x64,0x2F,0x25,0x64,0x2F,0x25
000086 2064
000087 6900
000088 3d6e
000089 6425      	.DB  0x64,0x20,0x0,0x69,0x6E,0x3D,0x25,0x64
00008a 6f20
00008b 7475
00008c 253d
00008d 0064      	.DB  0x20,0x6F,0x75,0x74,0x3D,0x25,0x64,0x0
00008e 6552
00008f 6573
000090 7672
000091 6465      	.DB  0x52,0x65,0x73,0x65,0x72,0x76,0x65,0x64
000092 253d
000093 0064
000094 6553
000095 2074      	.DB  0x3D,0x25,0x64,0x0,0x53,0x65,0x74,0x20
000096 6f6d
000097 746e
000098 3d68
000099 6425      	.DB  0x6D,0x6F,0x6E,0x74,0x68,0x3D,0x25,0x64
00009a 2020
00009b 003e
00009c 6553
00009d 2074      	.DB  0x20,0x20,0x3E,0x0,0x53,0x65,0x74,0x20
00009e 6164
00009f 3d79
0000a0 6425
0000a1 2020      	.DB  0x64,0x61,0x79,0x3D,0x25,0x64,0x20,0x20
0000a2 003e
0000a3 6553
0000a4 2074
0000a5 6579      	.DB  0x3E,0x0,0x53,0x65,0x74,0x20,0x79,0x65
0000a6 7261
0000a7 253d
0000a8 2064
0000a9 3e20      	.DB  0x61,0x72,0x3D,0x25,0x64,0x20,0x20,0x3E
D:\University\Handouts\Microprocessor Lab\Sadra\List\parking_.asm(1177): warning: .cseg .db misalignment - padding zero byte
0000aa 0000      	.DB  0x0
                 _0x2020003:
0000ab c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
0000ac 0001      	.DW  0x01
0000ad 0002      	.DW  0x02
0000ae 0066      	.DW  __REG_BIT_VARS*2
                 
0000af 0006      	.DW  0x06
0000b0 0008      	.DW  0x08
0000b1 0068      	.DW  __REG_VARS*2
                 
0000b2 0001      	.DW  0x01
0000b3 0260      	.DW  _month
0000b4 0070      	.DW  _0x4*2
                 
0000b5 0002      	.DW  0x02
0000b6 0261      	.DW  _year
0000b7 0072      	.DW  _0x5*2
                 
0000b8 0002      	.DW  0x02
0000b9 0263      	.DW  __base_y_G101
0000ba 0156      	.DW  _0x2020003*2
                 
                 _0xFFFFFFFF:
0000bb 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
0000bc 94f8      	CLI
0000bd 27ee      	CLR  R30
0000be bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
0000bf e0f1      	LDI  R31,1
0000c0 bff5      	OUT  MCUCR,R31
0000c1 bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
0000c2 e1f8      	LDI  R31,0x18
0000c3 bdf1      	OUT  WDTCR,R31
0000c4 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
0000c5 e08d      	LDI  R24,(14-2)+1
0000c6 e0a2      	LDI  R26,2
0000c7 27bb      	CLR  R27
                 __CLEAR_REG:
0000c8 93ed      	ST   X+,R30
0000c9 958a      	DEC  R24
0000ca f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0000cb e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
0000cc e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
0000cd e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
0000ce 93ed      	ST   X+,R30
0000cf 9701      	SBIW R24,1
0000d0 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0000d1 e5e8      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0000d2 e0f1      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0000d3 9185      	LPM  R24,Z+
0000d4 9195      	LPM  R25,Z+
0000d5 9700      	SBIW R24,0
0000d6 f061      	BREQ __GLOBAL_INI_END
0000d7 91a5      	LPM  R26,Z+
0000d8 91b5      	LPM  R27,Z+
0000d9 9005      	LPM  R0,Z+
0000da 9015      	LPM  R1,Z+
0000db 01bf      	MOVW R22,R30
0000dc 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0000dd 9005      	LPM  R0,Z+
0000de 920d      	ST   X+,R0
0000df 9701      	SBIW R24,1
0000e0 f7e1      	BRNE __GLOBAL_INI_LOOP
0000e1 01fb      	MOVW R30,R22
0000e2 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0000e3 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0000e4 bfed      	OUT  SPL,R30
0000e5 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000e6 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000e7 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000e8 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000e9 940c 0182 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <mega32a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h> // delay_ms functions
                 ;#include <stdio.h> // sprintf function
                 ;#include <alcd.h>  // lcd related functions
                 ;#define xtal 8000000
                 ;
                 ;// prototyping functions
                 ;char ok(void);
                 ;char in_out_search(void);
                 ;char time_set(void);
                 ;char reserve_park(void);
                 ;char set_data(void);
                 ;
                 ;// parking related variables
                 ;unsigned int n_vurud, n_khuruj;
                 ;eeprom unsigned int enter_array[31], exit_array[31];
                 ;eeprom unsigned char i; // ?
                 ;unsigned char const init_capacity = 10;
                 
                 	.DSEG
                 ;signed char capacity = init_capacity, reserved = 0;
                 ;bit is_full = 0, is_empty = 1;
                 ;
                 ;// date related variables
                 ;signed char minute = 59, hour = 23, second = 10, day = 12, month = 12;
                 ;signed int year = 1402;
                 ;
                 ;// define timer interrupt: clock and date logic
                 ;interrupt[TIM2_OVF] void timer2_ovf_isr(void)
                 ; 0000 001C {
                 
                 	.CSEG
                 _timer2_ovf_isr:
                 ; .FSTART _timer2_ovf_isr
0000eb 93aa      	ST   -Y,R26
0000ec 93ba      	ST   -Y,R27
0000ed 93ea      	ST   -Y,R30
0000ee 93fa      	ST   -Y,R31
0000ef b7ef      	IN   R30,SREG
0000f0 93ea      	ST   -Y,R30
                 ; 0000 001D 
                 ; 0000 001E   // logic of second, minute, hour
                 ; 0000 001F   if (second == 59)
0000f1 e3eb      	LDI  R30,LOW(59)
0000f2 15ed      	CP   R30,R13
0000f3 f471      	BRNE _0x6
                 ; 0000 0020   {
                 ; 0000 0021     second = 0;
0000f4 24dd      	CLR  R13
                 ; 0000 0022     if (minute == 59)
0000f5 15eb      	CP   R30,R11
0000f6 f449      	BRNE _0x7
                 ; 0000 0023     {
                 ; 0000 0024       minute = 0;
0000f7 24bb      	CLR  R11
                 ; 0000 0025       if (hour == 23)
0000f8 e1e7      	LDI  R30,LOW(23)
0000f9 15ea      	CP   R30,R10
0000fa f419      	BRNE _0x8
                 ; 0000 0026       {
                 ; 0000 0027         hour = 0;
0000fb 24aa      	CLR  R10
                 ; 0000 0028         day++;
0000fc 94c3      	INC  R12
                 ; 0000 0029       }
                 ; 0000 002A       else
0000fd c001      	RJMP _0x9
                 _0x8:
                 ; 0000 002B         hour++;
0000fe 94a3      	INC  R10
                 ; 0000 002C     }
                 _0x9:
                 ; 0000 002D     else
0000ff c001      	RJMP _0xA
                 _0x7:
                 ; 0000 002E       minute++;
000100 94b3      	INC  R11
                 ; 0000 002F   }
                 _0xA:
                 ; 0000 0030   else
000101 c001      	RJMP _0xB
                 _0x6:
                 ; 0000 0031     second++;
000102 94d3      	INC  R13
                 ; 0000 0032 
                 ; 0000 0033   // logic of day, month
                 ; 0000 0034   if (month <= 6)
                 _0xB:
000103 91a0 0260 	LDS  R26,_month
000105 30a7      	CPI  R26,LOW(0x7)
000106 f434      	BRGE _0xC
                 ; 0000 0035   {
                 ; 0000 0036     if (day > 31)
000107 e1ef      	LDI  R30,LOW(31)
000108 15ec      	CP   R30,R12
000109 f414      	BRGE _0xD
                 ; 0000 0037     {
                 ; 0000 0038       day = 1;
00010a 940e 06f9 	CALL SUBOPT_0x0
                 ; 0000 0039       month++;
                 ; 0000 003A     }
                 ; 0000 003B   }
                 _0xD:
                 ; 0000 003C   else
00010c c00f      	RJMP _0xE
                 _0xC:
                 ; 0000 003D   {
                 ; 0000 003E     if (month == 12)
00010d 91a0 0260 	LDS  R26,_month
00010f 30ac      	CPI  R26,LOW(0xC)
000110 f431      	BRNE _0xF
                 ; 0000 003F     {
                 ; 0000 0040       if (day > 29)
000111 e1ed      	LDI  R30,LOW(29)
000112 15ec      	CP   R30,R12
000113 f414      	BRGE _0x10
                 ; 0000 0041       {
                 ; 0000 0042         day = 1;
000114 940e 06f9 	CALL SUBOPT_0x0
                 ; 0000 0043         month++;
                 ; 0000 0044       }
                 ; 0000 0045     }
                 _0x10:
                 ; 0000 0046     else
000116 c005      	RJMP _0x11
                 _0xF:
                 ; 0000 0047     {
                 ; 0000 0048       if (day > 30)
000117 e1ee      	LDI  R30,LOW(30)
000118 15ec      	CP   R30,R12
000119 f414      	BRGE _0x12
                 ; 0000 0049       {
                 ; 0000 004A         day = 1;
00011a 940e 06f9 	CALL SUBOPT_0x0
                 ; 0000 004B         month++;
                 ; 0000 004C       }
                 ; 0000 004D     }
                 _0x12:
                 _0x11:
                 ; 0000 004E   }
                 _0xE:
                 ; 0000 004F 
                 ; 0000 0050   // logic of year
                 ; 0000 0051   if (month > 12)
00011c 91a0 0260 	LDS  R26,_month
00011e 30ad      	CPI  R26,LOW(0xD)
00011f f044      	BRLT _0x13
                 ; 0000 0052   {
                 ; 0000 0053     month = 1;
000120 e0e1      	LDI  R30,LOW(1)
000121 93e0 0260 	STS  _month,R30
                 ; 0000 0054     year++;
000123 940e 0701 	CALL SUBOPT_0x1
000125 9631      	ADIW R30,1
000126 93fe      	ST   -X,R31
000127 93ee      	ST   -X,R30
                 ; 0000 0055   }
                 ; 0000 0056 }
                 _0x13:
000128 91e9      	LD   R30,Y+
000129 bfef      	OUT  SREG,R30
00012a 91f9      	LD   R31,Y+
00012b 91e9      	LD   R30,Y+
00012c 91b9      	LD   R27,Y+
00012d 91a9      	LD   R26,Y+
00012e 9518      	RETI
                 ; .FEND
                 ;
                 ;// define interrupt 0: for exiting cars
                 ;interrupt[EXT_INT0] void ext_int0_isr(void)
                 ; 0000 005A {
                 _ext_int0_isr:
                 ; .FSTART _ext_int0_isr
00012f 940e 0706 	CALL SUBOPT_0x2
                 ; 0000 005B   if (is_empty == 1)
000131 fe21      	SBRS R2,1
000132 c007      	RJMP _0x14
                 ; 0000 005C   {
                 ; 0000 005D     lcd_clear();
000133 940e 0660 	CALL _lcd_clear
                 ; 0000 005E     lcd_putsf("Emp");
                +
000135 e7a4     +LDI R26 , LOW ( 2 * _0x0 + ( 0 ) )
000136 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW2FN _0x0,0
000137 940e 0714 	CALL SUBOPT_0x3
                 ; 0000 005F     delay_ms(500);
                 ; 0000 0060   }
                 ; 0000 0061   else
000139 c017      	RJMP _0x15
                 _0x14:
                 ; 0000 0062   {
                 ; 0000 0063 
                 ; 0000 0064     capacity++;
00013a 9493      	INC  R9
                 ; 0000 0065     n_khuruj++;
00013b 01f3      	MOVW R30,R6
00013c 9631      	ADIW R30,1
00013d 013f      	MOVW R6,R30
00013e 9731      	SBIW R30,1
                 ; 0000 0066 
                 ; 0000 0067     // check if the parking is empty
                 ; 0000 0068     if ((capacity + reserved) >= init_capacity)
00013f 940e 071a 	CALL SUBOPT_0x4
000141 f02c      	BRLT _0x16
                 ; 0000 0069     {
                 ; 0000 006A       capacity = init_capacity - reserved;
000142 e0ea      	LDI  R30,LOW(10)
000143 19e8      	SUB  R30,R8
000144 2e9e      	MOV  R9,R30
                 ; 0000 006B       is_empty = 1;
000145 9468      	SET
000146 c001      	RJMP _0xC9
                 ; 0000 006C     }
                 ; 0000 006D     else
                 _0x16:
                 ; 0000 006E     {
                 ; 0000 006F       is_empty = 0;
000147 94e8      	CLT
                 _0xC9:
000148 f821      	BLD  R2,1
                 ; 0000 0070     }
                 ; 0000 0071 
                 ; 0000 0072     // checking if the parking is full
                 ; 0000 0073     if (capacity <= 0)
000149 e0e0      	LDI  R30,LOW(0)
00014a 15e9      	CP   R30,R9
00014b f01c      	BRLT _0x18
                 ; 0000 0074     {
                 ; 0000 0075       capacity = 0;
00014c 2499      	CLR  R9
                 ; 0000 0076       is_full = 1;
00014d 9468      	SET
00014e c001      	RJMP _0xCA
                 ; 0000 0077     }
                 ; 0000 0078     else
                 _0x18:
                 ; 0000 0079     {
                 ; 0000 007A       is_full = 0;
00014f 94e8      	CLT
                 _0xCA:
000150 f820      	BLD  R2,0
                 ; 0000 007B     }
                 ; 0000 007C   }
                 _0x15:
                 ; 0000 007D }
000151 c022      	RJMP _0xCD
                 ; .FEND
                 ;
                 ;// define interrupt 1: for entering cars
                 ;interrupt[EXT_INT1] void ext_int1_isr(void)
                 ; 0000 0081 {
                 _ext_int1_isr:
                 ; .FSTART _ext_int1_isr
000152 940e 0706 	CALL SUBOPT_0x2
                 ; 0000 0082   if (is_full == 1)
000154 fe20      	SBRS R2,0
000155 c007      	RJMP _0x1A
                 ; 0000 0083   {
                 ; 0000 0084     lcd_clear();
000156 940e 0660 	CALL _lcd_clear
                 ; 0000 0085     lcd_putsf("Full");
                +
000158 e7a8     +LDI R26 , LOW ( 2 * _0x0 + ( 4 ) )
000159 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 4 ) )
                 	__POINTW2FN _0x0,4
00015a 940e 0714 	CALL SUBOPT_0x3
                 ; 0000 0086     delay_ms(500);
                 ; 0000 0087   }
                 ; 0000 0088   else
00015c c017      	RJMP _0x1B
                 _0x1A:
                 ; 0000 0089   {
                 ; 0000 008A 
                 ; 0000 008B     capacity--;
00015d 949a      	DEC  R9
                 ; 0000 008C     n_vurud++;
00015e 01f2      	MOVW R30,R4
00015f 9631      	ADIW R30,1
000160 012f      	MOVW R4,R30
000161 9731      	SBIW R30,1
                 ; 0000 008D 
                 ; 0000 008E     // checking if the parking is full
                 ; 0000 008F     if ((capacity) <= 0)
000162 e0e0      	LDI  R30,LOW(0)
000163 15e9      	CP   R30,R9
000164 f01c      	BRLT _0x1C
                 ; 0000 0090     {
                 ; 0000 0091       capacity = 0;
000165 2499      	CLR  R9
                 ; 0000 0092       is_full = 1;
000166 9468      	SET
000167 c001      	RJMP _0xCB
                 ; 0000 0093     }
                 ; 0000 0094     else
                 _0x1C:
                 ; 0000 0095     {
                 ; 0000 0096       is_full = 0;
000168 94e8      	CLT
                 _0xCB:
000169 f820      	BLD  R2,0
                 ; 0000 0097     }
                 ; 0000 0098 
                 ; 0000 0099     // check if the parking is empty
                 ; 0000 009A     if ((capacity + reserved) >= init_capacity)
00016a 940e 071a 	CALL SUBOPT_0x4
00016c f02c      	BRLT _0x1E
                 ; 0000 009B     {
                 ; 0000 009C       capacity = init_capacity - reserved;
00016d e0ea      	LDI  R30,LOW(10)
00016e 19e8      	SUB  R30,R8
00016f 2e9e      	MOV  R9,R30
                 ; 0000 009D       is_empty = 1;
000170 9468      	SET
000171 c001      	RJMP _0xCC
                 ; 0000 009E     }
                 ; 0000 009F     else
                 _0x1E:
                 ; 0000 00A0     {
                 ; 0000 00A1       is_empty = 0;
000172 94e8      	CLT
                 _0xCC:
000173 f821      	BLD  R2,1
                 ; 0000 00A2     }
                 ; 0000 00A3   }
                 _0x1B:
                 ; 0000 00A4 }
                 _0xCD:
000174 91e9      	LD   R30,Y+
000175 bfef      	OUT  SREG,R30
000176 91f9      	LD   R31,Y+
000177 91e9      	LD   R30,Y+
000178 91b9      	LD   R27,Y+
000179 91a9      	LD   R26,Y+
00017a 9199      	LD   R25,Y+
00017b 9189      	LD   R24,Y+
00017c 9179      	LD   R23,Y+
00017d 9169      	LD   R22,Y+
00017e 90f9      	LD   R15,Y+
00017f 9019      	LD   R1,Y+
000180 9009      	LD   R0,Y+
000181 9518      	RETI
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 00A7 {
                 _main:
                 ; .FSTART _main
                 ; 0000 00A8 
                 ; 0000 00A9   char line[17], line2[17];
                 ; 0000 00AA 
                 ; 0000 00AB   // GICR|=0xC0;
                 ; 0000 00AC   // MCUCR=0x0A;
                 ; 0000 00AD   // MCUCSR=0x00;
                 ; 0000 00AE   // GIFR=0xC0;
                 ; 0000 00AF 
                 ; 0000 00B0   GICR |= 0xC0;
000182 97a2      	SBIW R28,34
                 ;	line -> Y+17
                 ;	line2 -> Y+0
000183 b7eb      	IN   R30,0x3B
000184 6ce0      	ORI  R30,LOW(0xC0)
000185 bfeb      	OUT  0x3B,R30
                 ; 0000 00B1   MCUCR = 0x0B;
000186 e0eb      	LDI  R30,LOW(11)
000187 bfe5      	OUT  0x35,R30
                 ; 0000 00B2   MCUCSR = 0x00;
000188 e0e0      	LDI  R30,LOW(0)
000189 bfe4      	OUT  0x34,R30
                 ; 0000 00B3   GIFR = 0xC0;
00018a ece0      	LDI  R30,LOW(192)
00018b bfea      	OUT  0x3A,R30
                 ; 0000 00B4 
                 ; 0000 00B5   // initilize lcd
                 ; 0000 00B6   lcd_init(16);
00018c e1a0      	LDI  R26,LOW(16)
00018d 940e 06b0 	CALL _lcd_init
                 ; 0000 00B7   lcd_clear();
00018f 940e 0660 	CALL _lcd_clear
                 ; 0000 00B8   lcd_gotoxy(0, 1);
000191 940e 0726 	CALL SUBOPT_0x5
                 ; 0000 00B9   delay_ms(300);
000193 e2ac      	LDI  R26,LOW(300)
000194 e0b1      	LDI  R27,HIGH(300)
000195 940e 0806 	CALL _delay_ms
                 ; 0000 00BA 
                 ; 0000 00BB   ASSR = 0x08; // timer2
000197 e0e8      	LDI  R30,LOW(8)
000198 bde2      	OUT  0x22,R30
                 ; 0000 00BC   TCCR2 = 0x05;
000199 e0e5      	LDI  R30,LOW(5)
00019a bde5      	OUT  0x25,R30
                 ; 0000 00BD   TCNT2 = 0x00;
00019b e0e0      	LDI  R30,LOW(0)
00019c bde4      	OUT  0x24,R30
                 ; 0000 00BE   OCR2 = 0x00;
00019d bde3      	OUT  0x23,R30
                 ; 0000 00BF   TIMSK = 0x40;
00019e e4e0      	LDI  R30,LOW(64)
00019f bfe9      	OUT  0x39,R30
                 ; 0000 00C0 
                 ; 0000 00C1   PORTA = (1 << DDD0) | (1 << DDD1) | (1 << DDD2) | (1 << DDD3) | (1 << DDD4);
0001a0 e1ef      	LDI  R30,LOW(31)
0001a1 bbeb      	OUT  0x1B,R30
                 ; 0000 00C2 
                 ; 0000 00C3   day = i; // i in epprom
0001a2 940e 072b 	CALL SUBOPT_0x6
0001a4 2ece      	MOV  R12,R30
                 ; 0000 00C4 
                 ; 0000 00C5 #asm("sei")
0001a5 9478      	sei
                 ; 0000 00C6   capacity = capacity - reserved;
0001a6 1898      	SUB  R9,R8
                 ; 0000 00C7 
                 ; 0000 00C8   while (1)
                 _0x20:
                 ; 0000 00C9   {
                 ; 0000 00CA 
                 ; 0000 00CB     if (PINA .2 == 0)
0001a7 99ca      	SBIC 0x19,2
0001a8 c003      	RJMP _0x23
                 ; 0000 00CC     {
                 ; 0000 00CD       while (PINA .2 == 0)
                 _0x24:
0001a9 9bca      	SBIS 0x19,2
                 ; 0000 00CE         ;
0001aa cffe      	RJMP _0x24
                 ; 0000 00CF       ok();
0001ab d06f      	RCALL _ok
                 ; 0000 00D0     }
                 ; 0000 00D1 
                 ; 0000 00D2     // save the enter and exits at the end of the day
                 ; 0000 00D3     if (hour == 0 & minute == 0 & second == 0)
                 _0x23:
0001ac 940e 0730 	CALL SUBOPT_0x7
0001ae f181      	BREQ _0x27
                 ; 0000 00D4     { //  data will save   in 0:0:00
                 ; 0000 00D5       enter_array[i] = n_vurud;
0001af 940e 072b 	CALL SUBOPT_0x6
0001b1 e0a0      	LDI  R26,LOW(_enter_array)
0001b2 e0b0      	LDI  R27,HIGH(_enter_array)
0001b3 e0f0      	LDI  R31,0
0001b4 0fee      	LSL  R30
0001b5 1fff      	ROL  R31
0001b6 0fae      	ADD  R26,R30
0001b7 1fbf      	ADC  R27,R31
0001b8 01f2      	MOVW R30,R4
0001b9 940e 0854 	CALL __EEPROMWRW
                 ; 0000 00D6       exit_array[i] = n_khuruj;
0001bb 940e 072b 	CALL SUBOPT_0x6
0001bd e3ae      	LDI  R26,LOW(_exit_array)
0001be e0b0      	LDI  R27,HIGH(_exit_array)
0001bf e0f0      	LDI  R31,0
0001c0 0fee      	LSL  R30
0001c1 1fff      	ROL  R31
0001c2 0fae      	ADD  R26,R30
0001c3 1fbf      	ADC  R27,R31
0001c4 01f3      	MOVW R30,R6
0001c5 940e 0854 	CALL __EEPROMWRW
                 ; 0000 00D7       i++;
0001c7 940e 072b 	CALL SUBOPT_0x6
0001c9 5fef      	SUBI R30,-LOW(1)
0001ca 940e 085c 	CALL __EEPROMWRB
                 ; 0000 00D8 
                 ; 0000 00D9       if (i > 30) // 30 31 29 yek mah
0001cc 940e 072b 	CALL SUBOPT_0x6
0001ce 31ef      	CPI  R30,LOW(0x1F)
0001cf f028      	BRLO _0x28
                 ; 0000 00DA         i = 0;
0001d0 e7ac      	LDI  R26,LOW(_i)
0001d1 e0b0      	LDI  R27,HIGH(_i)
0001d2 e0e0      	LDI  R30,LOW(0)
0001d3 940e 085c 	CALL __EEPROMWRB
                 ; 0000 00DB 
                 ; 0000 00DC       while (hour == 0 & minute == 0 & second == 0)
                 _0x28:
                 _0x29:
0001d5 940e 0730 	CALL SUBOPT_0x7
0001d7 f039      	BREQ _0x2B
                 ; 0000 00DD       {
                 ; 0000 00DE         lcd_clear();
0001d8 940e 0660 	CALL _lcd_clear
                 ; 0000 00DF         lcd_putsf("saving data");
                +
0001da e7ad     +LDI R26 , LOW ( 2 * _0x0 + ( 9 ) )
0001db e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 9 ) )
                 	__POINTW2FN _0x0,9
0001dc 940e 069d 	CALL _lcd_putsf
                 ; 0000 00E0       }
0001de cff6      	RJMP _0x29
                 _0x2B:
                 ; 0000 00E1     }
                 ; 0000 00E2 
                 ; 0000 00E3     sprintf(line, "Cap=%d %d/%d/%d", capacity, year, month, day);
                 _0x27:
0001df 01fe      	MOVW R30,R28
0001e0 9671      	ADIW R30,17
0001e1 93fa      	ST   -Y,R31
0001e2 93ea      	ST   -Y,R30
                +
0001e3 e8e9     +LDI R30 , LOW ( 2 * _0x0 + ( 21 ) )
0001e4 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 21 ) )
                 	__POINTW1FN _0x0,21
0001e5 93fa      	ST   -Y,R31
0001e6 93ea      	ST   -Y,R30
0001e7 2de9      	MOV  R30,R9
0001e8 940e 0740 	CALL SUBOPT_0x8
0001ea 940e 0745 	CALL SUBOPT_0x9
0001ec 91e0 0260 	LDS  R30,_month
0001ee 940e 0740 	CALL SUBOPT_0x8
0001f0 2dec      	MOV  R30,R12
0001f1 940e 0740 	CALL SUBOPT_0x8
0001f3 e180      	LDI  R24,16
0001f4 940e 05ea 	CALL _sprintf
0001f6 9664      	ADIW R28,20
                 ; 0000 00E4     sprintf(line2, "%d:%d:%d  Res=%d ", hour, minute, second, reserved);
0001f7 940e 074e 	CALL SUBOPT_0xA
                +
0001f9 e9e9     +LDI R30 , LOW ( 2 * _0x0 + ( 37 ) )
0001fa e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 37 ) )
                 	__POINTW1FN _0x0,37
0001fb 93fa      	ST   -Y,R31
0001fc 93ea      	ST   -Y,R30
0001fd 2dea      	MOV  R30,R10
0001fe 940e 0740 	CALL SUBOPT_0x8
000200 2deb      	MOV  R30,R11
000201 940e 0740 	CALL SUBOPT_0x8
000203 2ded      	MOV  R30,R13
000204 940e 0740 	CALL SUBOPT_0x8
000206 2de8      	MOV  R30,R8
000207 940e 0740 	CALL SUBOPT_0x8
000209 e180      	LDI  R24,16
00020a 940e 05ea 	CALL _sprintf
00020c 9664      	ADIW R28,20
                 ; 0000 00E5 
                 ; 0000 00E6     lcd_clear();
00020d 940e 0660 	CALL _lcd_clear
                 ; 0000 00E7     lcd_puts(line);
00020f 01de      	MOVW R26,R28
000210 9651      	ADIW R26,17
000211 940e 068e 	CALL _lcd_puts
                 ; 0000 00E8     lcd_gotoxy(0, 1);
000213 940e 0726 	CALL SUBOPT_0x5
                 ; 0000 00E9     lcd_puts(line2);
000215 940e 0752 	CALL SUBOPT_0xB
                 ; 0000 00EA     delay_ms(25);
000217 940e 0755 	CALL SUBOPT_0xC
                 ; 0000 00EB   }
000219 cf8d      	RJMP _0x20
                 ; 0000 00EC }
                 _0x2C:
00021a cfff      	RJMP _0x2C
                 ; .FEND
                 ;
                 ;/// Functions 4 ok and...
                 ;char ok(void)
                 ; 0000 00F0 {
                 _ok:
                 ; .FSTART _ok
                 ; 0000 00F1   char _chose = 0;
                 ; 0000 00F2   while (1)
00021b 931a      	ST   -Y,R17
                 ;	_chose -> R17
00021c e010      	LDI  R17,0
                 _0x2D:
                 ; 0000 00F3   {
                 ; 0000 00F4     if (_chose == 0)
00021d 3010      	CPI  R17,0
00021e f431      	BRNE _0x30
                 ; 0000 00F5     {
                 ; 0000 00F6       lcd_clear();
00021f 940e 0660 	CALL _lcd_clear
                 ; 0000 00F7       lcd_putsf("Time Setting >>");
                +
000221 eaab     +LDI R26 , LOW ( 2 * _0x0 + ( 55 ) )
000222 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 55 ) )
                 	__POINTW2FN _0x0,55
000223 940e 069d 	CALL _lcd_putsf
                 ; 0000 00F8     }
                 ; 0000 00F9 
                 ; 0000 00FA     if (_chose == 1)
                 _0x30:
000225 3011      	CPI  R17,1
000226 f431      	BRNE _0x31
                 ; 0000 00FB     {
                 ; 0000 00FC       lcd_clear();
000227 940e 0660 	CALL _lcd_clear
                 ; 0000 00FD       lcd_putsf("IN&OUT Search >>");
                +
000229 ebab     +LDI R26 , LOW ( 2 * _0x0 + ( 71 ) )
00022a e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 71 ) )
                 	__POINTW2FN _0x0,71
00022b 940e 069d 	CALL _lcd_putsf
                 ; 0000 00FE     }
                 ; 0000 00FF 
                 ; 0000 0100     if (_chose == 2)
                 _0x31:
00022d 3012      	CPI  R17,2
00022e f431      	BRNE _0x32
                 ; 0000 0101     {
                 ; 0000 0102       lcd_clear();
00022f 940e 0660 	CALL _lcd_clear
                 ; 0000 0103       lcd_putsf("Reserve_Park >>");
                +
000231 ecac     +LDI R26 , LOW ( 2 * _0x0 + ( 88 ) )
000232 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 88 ) )
                 	__POINTW2FN _0x0,88
000233 940e 069d 	CALL _lcd_putsf
                 ; 0000 0104     }
                 ; 0000 0105 
                 ; 0000 0106     if (_chose == 3)
                 _0x32:
000235 3013      	CPI  R17,3
000236 f431      	BRNE _0x33
                 ; 0000 0107     {
                 ; 0000 0108       lcd_clear();
000237 940e 0660 	CALL _lcd_clear
                 ; 0000 0109       lcd_putsf("Set data >>");
                +
000239 edac     +LDI R26 , LOW ( 2 * _0x0 + ( 104 ) )
00023a e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 104 ) )
                 	__POINTW2FN _0x0,104
00023b 940e 069d 	CALL _lcd_putsf
                 ; 0000 010A     }
                 ; 0000 010B 
                 ; 0000 010C     if (PINA .3 == 0)
                 _0x33:
00023d 99cb      	SBIC 0x19,3
00023e c006      	RJMP _0x34
                 ; 0000 010D     { // NEXT
                 ; 0000 010E       while (PINA .3 == 0)
                 _0x35:
00023f 9bcb      	SBIS 0x19,3
                 ; 0000 010F         ;
000240 cffe      	RJMP _0x35
                 ; 0000 0110       _chose++;
000241 5f1f      	SUBI R17,-1
                 ; 0000 0111       if (_chose >= 4)
000242 3014      	CPI  R17,4
000243 f008      	BRLO _0x38
                 ; 0000 0112         _chose = 0;
000244 e010      	LDI  R17,LOW(0)
                 ; 0000 0113     }
                 _0x38:
                 ; 0000 0114 
                 ; 0000 0115     if (PINA .4 == 0)
                 _0x34:
000245 99cc      	SBIC 0x19,4
000246 c004      	RJMP _0x39
                 ; 0000 0116     { // Back
                 ; 0000 0117       while (PINA .4 == 0)
                 _0x3A:
000247 9bcc      	SBIS 0x19,4
                 ; 0000 0118         ;
000248 cffe      	RJMP _0x3A
                 ; 0000 0119       return 0;
000249 e0e0      	LDI  R30,LOW(0)
00024a c025      	RJMP _0x2080008
                 ; 0000 011A     }
                 ; 0000 011B 
                 ; 0000 011C     if (PINA .2 == 0 & _chose == 0)
                 _0x39:
00024b 940e 0759 	CALL SUBOPT_0xD
00024d 940e 0762 	CALL SUBOPT_0xE
00024f f019      	BREQ _0x3D
                 ; 0000 011D     { // chose time_setting
                 ; 0000 011E       while (PINA .2 == 0)
                 _0x3E:
000250 9bca      	SBIS 0x19,2
                 ; 0000 011F         ;
000251 cffe      	RJMP _0x3E
                 ; 0000 0120       time_set();
000252 d01f      	RCALL _time_set
                 ; 0000 0121     }
                 ; 0000 0122 
                 ; 0000 0123     if (PINA .2 == 0 & _chose == 1)
                 _0x3D:
000253 940e 0759 	CALL SUBOPT_0xD
000255 940e 0767 	CALL SUBOPT_0xF
000257 f019      	BREQ _0x41
                 ; 0000 0124     { // chose in_out_search
                 ; 0000 0125       while (PINA .2 == 0)
                 _0x42:
000258 9bca      	SBIS 0x19,2
                 ; 0000 0126         ;
000259 cffe      	RJMP _0x42
                 ; 0000 0127       in_out_search();
00025a d078      	RCALL _in_out_search
                 ; 0000 0128     }
                 ; 0000 0129 
                 ; 0000 012A     if (PINA .2 == 0 & _chose == 2)
                 _0x41:
00025b 940e 0759 	CALL SUBOPT_0xD
00025d 940e 076c 	CALL SUBOPT_0x10
00025f f019      	BREQ _0x45
                 ; 0000 012B     { // chose reserve
                 ; 0000 012C       while (PINA .2 == 0)
                 _0x46:
000260 9bca      	SBIS 0x19,2
                 ; 0000 012D         ;
000261 cffe      	RJMP _0x46
                 ; 0000 012E       reserve_park();
000262 d137      	RCALL _reserve_park
                 ; 0000 012F     }
                 ; 0000 0130 
                 ; 0000 0131     if (PINA .2 == 0 & _chose == 3)
                 _0x45:
000263 940e 0759 	CALL SUBOPT_0xD
000265 e0e3      	LDI  R30,LOW(3)
000266 940e 0823 	CALL __EQB12
000268 21e0      	AND  R30,R0
000269 f019      	BREQ _0x49
                 ; 0000 0132     { // chose set data
                 ; 0000 0133       while (PINA .2 == 0)
                 _0x4A:
00026a 9bca      	SBIS 0x19,2
                 ; 0000 0134         ;
00026b cffe      	RJMP _0x4A
                 ; 0000 0135       set_data();
00026c d15d      	RCALL _set_data
                 ; 0000 0136     }
                 ; 0000 0137 
                 ; 0000 0138     delay_ms(25);
                 _0x49:
00026d 940e 0755 	CALL SUBOPT_0xC
                 ; 0000 0139   }
00026f cfad      	RJMP _0x2D
                 ; 0000 013A }
                 _0x2080008:
000270 9119      	LD   R17,Y+
000271 9508      	RET
                 ; .FEND
                 ;
                 ;/// Time setting
                 ;char time_set(void)
                 ; 0000 013E {
                 _time_set:
                 ; .FSTART _time_set
000272 92ff      	PUSH R15
                 ; 0000 013F   bit _chose = 0;
                 ; 0000 0140   char buff[17];
                 ; 0000 0141   while (1)
000273 9761      	SBIW R28,17
                 ;	_chose -> R15.0
                 ;	buff -> Y+0
000274 24ff      	CLR  R15
                 _0x4D:
                 ; 0000 0142   {
                 ; 0000 0143     if (_chose == 0)
000275 fcf0      	SBRC R15,0
000276 c00b      	RJMP _0x50
                 ; 0000 0144     {
                 ; 0000 0145       sprintf(buff, "Set min=%d  >", minute);
000277 940e 074e 	CALL SUBOPT_0xA
                +
000279 eee8     +LDI R30 , LOW ( 2 * _0x0 + ( 116 ) )
00027a e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 116 ) )
                 	__POINTW1FN _0x0,116
00027b 93fa      	ST   -Y,R31
00027c 93ea      	ST   -Y,R30
00027d 2deb      	MOV  R30,R11
00027e 940e 0740 	CALL SUBOPT_0x8
000280 940e 0771 	CALL SUBOPT_0x11
                 ; 0000 0146       lcd_clear();
                 ; 0000 0147       lcd_puts(buff);
                 ; 0000 0148     }
                 ; 0000 0149 
                 ; 0000 014A     if (_chose == 1)
                 _0x50:
000282 fef0      	SBRS R15,0
000283 c00b      	RJMP _0x51
                 ; 0000 014B     {
                 ; 0000 014C       sprintf(buff, "Set hour=%d  >", hour);
000284 940e 074e 	CALL SUBOPT_0xA
                +
000286 efe6     +LDI R30 , LOW ( 2 * _0x0 + ( 130 ) )
000287 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 130 ) )
                 	__POINTW1FN _0x0,130
000288 93fa      	ST   -Y,R31
000289 93ea      	ST   -Y,R30
00028a 2dea      	MOV  R30,R10
00028b 940e 0740 	CALL SUBOPT_0x8
00028d 940e 0771 	CALL SUBOPT_0x11
                 ; 0000 014D       lcd_clear();
                 ; 0000 014E       lcd_puts(buff);
                 ; 0000 014F     }
                 ; 0000 0150 
                 ; 0000 0151     if (PINA .1 == 0 & _chose == 0)
                 _0x51:
00028f 940e 0778 	CALL SUBOPT_0x12
000291 940e 0762 	CALL SUBOPT_0xE
000293 f039      	BREQ _0x52
                 ; 0000 0152     { // UP     min
                 ; 0000 0153       while (PINA .1 == 0)
                 _0x53:
000294 9bc9      	SBIS 0x19,1
                 ; 0000 0154         ;
000295 cffe      	RJMP _0x53
                 ; 0000 0155       minute++;
000296 94b3      	INC  R11
                 ; 0000 0156       if (minute > 59)
000297 e3eb      	LDI  R30,LOW(59)
000298 15eb      	CP   R30,R11
000299 f40c      	BRGE _0x56
                 ; 0000 0157         minute = 0;
00029a 24bb      	CLR  R11
                 ; 0000 0158     }
                 _0x56:
                 ; 0000 0159 
                 ; 0000 015A     if (PINA .0 == 0 & _chose == 0)
                 _0x52:
00029b 940e 0783 	CALL SUBOPT_0x13
00029d 940e 0762 	CALL SUBOPT_0xE
00029f f041      	BREQ _0x57
                 ; 0000 015B     { // DOWN    min
                 ; 0000 015C       while (PINA .0 == 0)
                 _0x58:
0002a0 9bc8      	SBIS 0x19,0
                 ; 0000 015D         ;
0002a1 cffe      	RJMP _0x58
                 ; 0000 015E       minute--;
0002a2 94ba      	DEC  R11
                 ; 0000 015F       if (minute < 0)
0002a3 e0e0      	LDI  R30,LOW(0)
0002a4 16be      	CP   R11,R30
0002a5 f414      	BRGE _0x5B
                 ; 0000 0160         minute = 59;
0002a6 e3eb      	LDI  R30,LOW(59)
0002a7 2ebe      	MOV  R11,R30
                 ; 0000 0161     }
                 _0x5B:
                 ; 0000 0162 
                 ; 0000 0163     if (PINA .1 == 0 & _chose == 1)
                 _0x57:
0002a8 940e 0778 	CALL SUBOPT_0x12
0002aa 940e 0767 	CALL SUBOPT_0xF
0002ac f039      	BREQ _0x5C
                 ; 0000 0164     { // UP    hour
                 ; 0000 0165       while (PINA .1 == 0)
                 _0x5D:
0002ad 9bc9      	SBIS 0x19,1
                 ; 0000 0166         ;
0002ae cffe      	RJMP _0x5D
                 ; 0000 0167       hour++;
0002af 94a3      	INC  R10
                 ; 0000 0168       if (hour > 23)
0002b0 e1e7      	LDI  R30,LOW(23)
0002b1 15ea      	CP   R30,R10
0002b2 f40c      	BRGE _0x60
                 ; 0000 0169         hour = 0;
0002b3 24aa      	CLR  R10
                 ; 0000 016A     }
                 _0x60:
                 ; 0000 016B 
                 ; 0000 016C     if (PINA .0 == 0 & _chose == 1)
                 _0x5C:
0002b4 940e 0783 	CALL SUBOPT_0x13
0002b6 940e 0767 	CALL SUBOPT_0xF
0002b8 f041      	BREQ _0x61
                 ; 0000 016D     { // DOWN    hour
                 ; 0000 016E       while (PINA .0 == 0)
                 _0x62:
0002b9 9bc8      	SBIS 0x19,0
                 ; 0000 016F         ;
0002ba cffe      	RJMP _0x62
                 ; 0000 0170       hour--;
0002bb 94aa      	DEC  R10
                 ; 0000 0171       if (hour < 0)
0002bc e0e0      	LDI  R30,LOW(0)
0002bd 16ae      	CP   R10,R30
0002be f414      	BRGE _0x65
                 ; 0000 0172         hour = 23;
0002bf e1e7      	LDI  R30,LOW(23)
0002c0 2eae      	MOV  R10,R30
                 ; 0000 0173     }
                 _0x65:
                 ; 0000 0174 
                 ; 0000 0175     if (PINA .3 == 0)
                 _0x61:
0002c1 99cb      	SBIC 0x19,3
0002c2 c004      	RJMP _0x66
                 ; 0000 0176     { // NEXT
                 ; 0000 0177       while (PINA .3 == 0)
                 _0x67:
0002c3 9bcb      	SBIS 0x19,3
                 ; 0000 0178         ;
0002c4 cffe      	RJMP _0x67
                 ; 0000 0179       _chose = !_chose;
0002c5 e0e1      	LDI  R30,LOW(1)
0002c6 26fe      	EOR  R15,R30
                 ; 0000 017A     }
                 ; 0000 017B 
                 ; 0000 017C     if (PINA .4 == 0)
                 _0x66:
0002c7 99cc      	SBIC 0x19,4
0002c8 c004      	RJMP _0x6A
                 ; 0000 017D     { // Back
                 ; 0000 017E       while (PINA .4 == 0)
                 _0x6B:
0002c9 9bcc      	SBIS 0x19,4
                 ; 0000 017F         ;
0002ca cffe      	RJMP _0x6B
                 ; 0000 0180       return 0;
0002cb e0e0      	LDI  R30,LOW(0)
0002cc c003      	RJMP _0x2080007
                 ; 0000 0181     }
                 ; 0000 0182 
                 ; 0000 0183     delay_ms(25);
                 _0x6A:
0002cd 940e 0755 	CALL SUBOPT_0xC
                 ; 0000 0184   }
0002cf cfa5      	RJMP _0x4D
                 ; 0000 0185 }
                 _0x2080007:
0002d0 9661      	ADIW R28,17
0002d1 90ff      	POP  R15
0002d2 9508      	RET
                 ; .FEND
                 ;
                 ;/// IN&OUT Search
                 ;char in_out_search(void)
                 ; 0000 0189 {
                 _in_out_search:
                 ; .FSTART _in_out_search
0002d3 92ff      	PUSH R15
                 ; 0000 018A   char t_month = month, buff[17], buff2[17];
                 ; 0000 018B   char i_temp = i;
                 ; 0000 018C   bit bit_m = 0;
                 ; 0000 018D   while (1)
0002d4 97a2      	SBIW R28,34
0002d5 931a      	ST   -Y,R17
0002d6 930a      	ST   -Y,R16
                 ;	t_month -> R17
                 ;	buff -> Y+19
                 ;	buff2 -> Y+2
                 ;	i_temp -> R16
                 ;	bit_m -> R15.0
0002d7 24ff      	CLR  R15
0002d8 9110 0260 	LDS  R17,_month
0002da 940e 072b 	CALL SUBOPT_0x6
0002dc 2f0e      	MOV  R16,R30
                 _0x6E:
                 ; 0000 018E   {
                 ; 0000 018F 
                 ; 0000 0190     if (PINA .1 == 0)
0002dd 99c9      	SBIC 0x19,1
0002de c03b      	RJMP _0x71
                 ; 0000 0191     { // UP
                 ; 0000 0192       while (PINA .1 == 0)
                 _0x72:
0002df 9bc9      	SBIS 0x19,1
                 ; 0000 0193         ;
0002e0 cffe      	RJMP _0x72
                 ; 0000 0194       i_temp++;
0002e1 5f0f      	SUBI R16,-1
                 ; 0000 0195 
                 ; 0000 0196       if (i_temp > i & bit_m == 0)
0002e2 940e 072b 	CALL SUBOPT_0x6
0002e4 2fa0      	MOV  R26,R16
0002e5 940e 0832 	CALL __GTB12U
0002e7 940e 078e 	CALL SUBOPT_0x14
0002e9 f031      	BREQ _0x75
                 ; 0000 0197       {
                 ; 0000 0198         i_temp = i;
0002ea 940e 072b 	CALL SUBOPT_0x6
0002ec 2f0e      	MOV  R16,R30
                 ; 0000 0199         t_month--;
0002ed 5011      	SUBI R17,1
                 ; 0000 019A         bit_m = 1;
0002ee 9468      	SET
0002ef f8f0      	BLD  R15,0
                 ; 0000 019B       }
                 ; 0000 019C 
                 ; 0000 019D       if (t_month <= 6 & i_temp > 31 & bit_m == 1)
                 _0x75:
0002f0 2fa1      	MOV  R26,R17
0002f1 e0e6      	LDI  R30,LOW(6)
0002f2 940e 0828 	CALL __LEB12U
0002f4 2e0e      	MOV  R0,R30
0002f5 2fa0      	MOV  R26,R16
0002f6 e1ef      	LDI  R30,LOW(31)
0002f7 940e 0793 	CALL SUBOPT_0x15
0002f9 f011      	BREQ _0x76
                 ; 0000 019E       {
                 ; 0000 019F         i_temp = 1;
0002fa 940e 079a 	CALL SUBOPT_0x16
                 ; 0000 01A0         t_month++;
                 ; 0000 01A1         bit_m = 0;
                 ; 0000 01A2       }
                 ; 0000 01A3 
                 ; 0000 01A4       if (t_month > 6 & i_temp > 30 & bit_m == 1)
                 _0x76:
0002fc 2fa1      	MOV  R26,R17
0002fd e0e6      	LDI  R30,LOW(6)
0002fe 940e 0832 	CALL __GTB12U
000300 2e0e      	MOV  R0,R30
000301 2fa0      	MOV  R26,R16
000302 e1ee      	LDI  R30,LOW(30)
000303 940e 0793 	CALL SUBOPT_0x15
000305 f011      	BREQ _0x77
                 ; 0000 01A5       {
                 ; 0000 01A6         i_temp = 1;
000306 940e 079a 	CALL SUBOPT_0x16
                 ; 0000 01A7         t_month++;
                 ; 0000 01A8         bit_m = 0;
                 ; 0000 01A9       }
                 ; 0000 01AA 
                 ; 0000 01AB       if (t_month == 12 & i_temp > 29 & bit_m == 1)
                 _0x77:
000308 2fa1      	MOV  R26,R17
000309 e0ec      	LDI  R30,LOW(12)
00030a 940e 0823 	CALL __EQB12
00030c 2e0e      	MOV  R0,R30
00030d 2fa0      	MOV  R26,R16
00030e e1ed      	LDI  R30,LOW(29)
00030f 940e 0793 	CALL SUBOPT_0x15
000311 f011      	BREQ _0x78
                 ; 0000 01AC       {
                 ; 0000 01AD         i_temp = 1;
000312 940e 079a 	CALL SUBOPT_0x16
                 ; 0000 01AE         t_month++;
                 ; 0000 01AF         bit_m = 0;
                 ; 0000 01B0       }
                 ; 0000 01B1 
                 ; 0000 01B2       if (t_month == 0)
                 _0x78:
000314 3010      	CPI  R17,0
000315 f409      	BRNE _0x79
                 ; 0000 01B3         t_month = 12;
000316 e01c      	LDI  R17,LOW(12)
                 ; 0000 01B4 
                 ; 0000 01B5       if (t_month > 12)
                 _0x79:
000317 301d      	CPI  R17,13
000318 f008      	BRLO _0x7A
                 ; 0000 01B6         t_month = 1;
000319 e011      	LDI  R17,LOW(1)
                 ; 0000 01B7     }
                 _0x7A:
                 ; 0000 01B8 
                 ; 0000 01B9     if (PINA .0 == 0)
                 _0x71:
00031a 99c8      	SBIC 0x19,0
00031b c034      	RJMP _0x7B
                 ; 0000 01BA     { // DOWN
                 ; 0000 01BB       while (PINA .0 == 0)
                 _0x7C:
00031c 9bc8      	SBIS 0x19,0
                 ; 0000 01BC         ;
00031d cffe      	RJMP _0x7C
                 ; 0000 01BD       i_temp--;
00031e 5001      	SUBI R16,1
                 ; 0000 01BE 
                 ; 0000 01BF       if (i_temp == 0 & bit_m == 0)
00031f 2fa0      	MOV  R26,R16
000320 e0e0      	LDI  R30,LOW(0)
000321 940e 0823 	CALL __EQB12
000323 940e 078e 	CALL SUBOPT_0x14
000325 f091      	BREQ _0x7F
                 ; 0000 01C0       {
                 ; 0000 01C1 
                 ; 0000 01C2         t_month--;
000326 5011      	SUBI R17,1
                 ; 0000 01C3 
                 ; 0000 01C4         if (t_month == 0)
000327 3010      	CPI  R17,0
000328 f409      	BRNE _0x80
                 ; 0000 01C5           t_month = 12;
000329 e01c      	LDI  R17,LOW(12)
                 ; 0000 01C6 
                 ; 0000 01C7         if (t_month > 12)
                 _0x80:
00032a 301d      	CPI  R17,13
00032b f008      	BRLO _0x81
                 ; 0000 01C8           t_month = 1;
00032c e011      	LDI  R17,LOW(1)
                 ; 0000 01C9 
                 ; 0000 01CA         if (t_month <= 6)
                 _0x81:
00032d 3017      	CPI  R17,7
00032e f408      	BRSH _0x82
                 ; 0000 01CB           i_temp = 31;
00032f e10f      	LDI  R16,LOW(31)
                 ; 0000 01CC 
                 ; 0000 01CD         if (t_month > 6)
                 _0x82:
000330 3017      	CPI  R17,7
000331 f008      	BRLO _0x83
                 ; 0000 01CE           i_temp = 30;
000332 e10e      	LDI  R16,LOW(30)
                 ; 0000 01CF 
                 ; 0000 01D0         if (t_month == 12)
                 _0x83:
000333 301c      	CPI  R17,12
000334 f409      	BRNE _0x84
                 ; 0000 01D1           i_temp = 29;
000335 e10d      	LDI  R16,LOW(29)
                 ; 0000 01D2 
                 ; 0000 01D3         bit_m = 1;
                 _0x84:
000336 9468      	SET
000337 f8f0      	BLD  R15,0
                 ; 0000 01D4       }
                 ; 0000 01D5 
                 ; 0000 01D6       if (i_temp < i & bit_m == 1)
                 _0x7F:
000338 940e 072b 	CALL SUBOPT_0x6
00033a 2fa0      	MOV  R26,R16
00033b 940e 082d 	CALL __LTB12U
00033d 2e0e      	MOV  R0,R30
00033e e0a0      	LDI  R26,0
00033f fcf0      	SBRC R15,0
000340 e0a1      	LDI  R26,1
000341 940e 0767 	CALL SUBOPT_0xF
000343 f031      	BREQ _0x85
                 ; 0000 01D7       {
                 ; 0000 01D8         i_temp = i;
000344 940e 072b 	CALL SUBOPT_0x6
000346 2f0e      	MOV  R16,R30
                 ; 0000 01D9         t_month++;
000347 5f1f      	SUBI R17,-1
                 ; 0000 01DA         bit_m = 0;
000348 94e8      	CLT
000349 f8f0      	BLD  R15,0
                 ; 0000 01DB       }
                 ; 0000 01DC 
                 ; 0000 01DD       if (t_month == 0)
                 _0x85:
00034a 3010      	CPI  R17,0
00034b f409      	BRNE _0x86
                 ; 0000 01DE         t_month = 12;
00034c e01c      	LDI  R17,LOW(12)
                 ; 0000 01DF 
                 ; 0000 01E0       if (t_month > 12)
                 _0x86:
00034d 301d      	CPI  R17,13
00034e f008      	BRLO _0x87
                 ; 0000 01E1         t_month = 1;
00034f e011      	LDI  R17,LOW(1)
                 ; 0000 01E2     }
                 _0x87:
                 ; 0000 01E3 
                 ; 0000 01E4     sprintf(buff, "%d/%d/%d ", year, t_month, i_temp);
                 _0x7B:
000350 01fe      	MOVW R30,R28
000351 9673      	ADIW R30,19
000352 93fa      	ST   -Y,R31
000353 93ea      	ST   -Y,R30
                +
000354 e0e5     +LDI R30 , LOW ( 2 * _0x0 + ( 145 ) )
000355 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 145 ) )
                 	__POINTW1FN _0x0,145
000356 93fa      	ST   -Y,R31
000357 93ea      	ST   -Y,R30
000358 940e 0745 	CALL SUBOPT_0x9
00035a 2fe1      	MOV  R30,R17
00035b 27ff      	CLR  R31
00035c 2766      	CLR  R22
00035d 2777      	CLR  R23
00035e 940e 083f 	CALL __PUTPARD1
000360 2fe0      	MOV  R30,R16
000361 27ff      	CLR  R31
000362 2766      	CLR  R22
000363 2777      	CLR  R23
000364 940e 083f 	CALL __PUTPARD1
000366 e08c      	LDI  R24,12
000367 940e 05ea 	CALL _sprintf
000369 9660      	ADIW R28,16
                 ; 0000 01E5     sprintf(buff2, "in=%d out=%d", enter_array[i_temp], exit_array[i_temp]);
00036a 01fe      	MOVW R30,R28
00036b 9632      	ADIW R30,2
00036c 93fa      	ST   -Y,R31
00036d 93ea      	ST   -Y,R30
                +
00036e e0ef     +LDI R30 , LOW ( 2 * _0x0 + ( 155 ) )
00036f e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 155 ) )
                 	__POINTW1FN _0x0,155
000370 93fa      	ST   -Y,R31
000371 93ea      	ST   -Y,R30
000372 2fe0      	MOV  R30,R16
000373 e0a0      	LDI  R26,LOW(_enter_array)
000374 e0b0      	LDI  R27,HIGH(_enter_array)
000375 940e 079f 	CALL SUBOPT_0x17
000377 2fe0      	MOV  R30,R16
000378 e3ae      	LDI  R26,LOW(_exit_array)
000379 e0b0      	LDI  R27,HIGH(_exit_array)
00037a 940e 079f 	CALL SUBOPT_0x17
00037c e088      	LDI  R24,8
00037d 940e 05ea 	CALL _sprintf
00037f 962c      	ADIW R28,12
                 ; 0000 01E6 
                 ; 0000 01E7     lcd_clear();
000380 940e 0660 	CALL _lcd_clear
                 ; 0000 01E8     lcd_puts(buff);
000382 01de      	MOVW R26,R28
000383 9653      	ADIW R26,19
000384 940e 068e 	CALL _lcd_puts
                 ; 0000 01E9     lcd_gotoxy(0, 1);
000386 940e 0726 	CALL SUBOPT_0x5
                 ; 0000 01EA     lcd_puts(buff2);
000388 01de      	MOVW R26,R28
000389 9612      	ADIW R26,2
00038a 940e 068e 	CALL _lcd_puts
                 ; 0000 01EB 
                 ; 0000 01EC     if (PINA .4 == 0)
00038c 99cc      	SBIC 0x19,4
00038d c004      	RJMP _0x88
                 ; 0000 01ED     { // Back
                 ; 0000 01EE       while (PINA .4 == 0)
                 _0x89:
00038e 9bcc      	SBIS 0x19,4
                 ; 0000 01EF         ;
00038f cffe      	RJMP _0x89
                 ; 0000 01F0       return 0;
000390 e0e0      	LDI  R30,LOW(0)
000391 c003      	RJMP _0x2080006
                 ; 0000 01F1     }
                 ; 0000 01F2     delay_ms(25);
                 _0x88:
000392 940e 0755 	CALL SUBOPT_0xC
                 ; 0000 01F3   }
000394 cf48      	RJMP _0x6E
                 ; 0000 01F4 }
                 _0x2080006:
000395 8119      	LDD  R17,Y+1
000396 8108      	LDD  R16,Y+0
000397 96a4      	ADIW R28,36
000398 90ff      	POP  R15
000399 9508      	RET
                 ; .FEND
                 ;
                 ;// reserve_park
                 ;char reserve_park(void)
                 ; 0000 01F8 {
                 _reserve_park:
                 ; .FSTART _reserve_park
                 ; 0000 01F9   char buff[17];
                 ; 0000 01FA 
                 ; 0000 01FB   while (1)
00039a 9761      	SBIW R28,17
                 ;	buff -> Y+0
                 _0x8C:
                 ; 0000 01FC   {
                 ; 0000 01FD     sprintf(buff, "Reserved=%d", reserved);
00039b 940e 074e 	CALL SUBOPT_0xA
                +
00039d e1ec     +LDI R30 , LOW ( 2 * _0x0 + ( 168 ) )
00039e e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 168 ) )
                 	__POINTW1FN _0x0,168
00039f 93fa      	ST   -Y,R31
0003a0 93ea      	ST   -Y,R30
0003a1 2de8      	MOV  R30,R8
0003a2 940e 0740 	CALL SUBOPT_0x8
0003a4 940e 0771 	CALL SUBOPT_0x11
                 ; 0000 01FE     lcd_clear();
                 ; 0000 01FF     lcd_puts(buff);
                 ; 0000 0200 
                 ; 0000 0201     if (PINA .1 == 0)
0003a6 99c9      	SBIC 0x19,1
0003a7 c003      	RJMP _0x8F
                 ; 0000 0202     { // UP
                 ; 0000 0203       while (PINA .1 == 0)
                 _0x90:
0003a8 9bc9      	SBIS 0x19,1
                 ; 0000 0204         ;
0003a9 cffe      	RJMP _0x90
                 ; 0000 0205       reserved++;
0003aa 9483      	INC  R8
                 ; 0000 0206     }
                 ; 0000 0207 
                 ; 0000 0208     if (reserved >= init_capacity)
                 _0x8F:
0003ab 2da8      	MOV  R26,R8
0003ac e0ea      	LDI  R30,LOW(10)
0003ad e0b0      	LDI  R27,0
0003ae fda7      	SBRC R26,7
0003af efbf      	SER  R27
0003b0 e0f0      	LDI  R31,0
0003b1 17ae      	CP   R26,R30
0003b2 07bf      	CPC  R27,R31
0003b3 f014      	BRLT _0x93
                 ; 0000 0209     {
                 ; 0000 020A       reserved = 99;
0003b4 e6e3      	LDI  R30,LOW(99)
0003b5 2e8e      	MOV  R8,R30
                 ; 0000 020B     }
                 ; 0000 020C 
                 ; 0000 020D     if (PINA .0 == 0)
                 _0x93:
0003b6 99c8      	SBIC 0x19,0
0003b7 c003      	RJMP _0x94
                 ; 0000 020E     { // DOWN
                 ; 0000 020F       while (PINA .0 == 0)
                 _0x95:
0003b8 9bc8      	SBIS 0x19,0
                 ; 0000 0210         ;
0003b9 cffe      	RJMP _0x95
                 ; 0000 0211       reserved--;
0003ba 948a      	DEC  R8
                 ; 0000 0212     }
                 ; 0000 0213 
                 ; 0000 0214     if (reserved <= 0)
                 _0x94:
0003bb e0e0      	LDI  R30,LOW(0)
0003bc 15e8      	CP   R30,R8
0003bd f00c      	BRLT _0x98
                 ; 0000 0215     {
                 ; 0000 0216       reserved = 0;
0003be 2488      	CLR  R8
                 ; 0000 0217     }
                 ; 0000 0218 
                 ; 0000 0219     if (PINA .4 == 0)
                 _0x98:
0003bf 99cc      	SBIC 0x19,4
0003c0 c004      	RJMP _0x99
                 ; 0000 021A     { // Back
                 ; 0000 021B       while (PINA .4 == 0)
                 _0x9A:
0003c1 9bcc      	SBIS 0x19,4
                 ; 0000 021C         ;
0003c2 cffe      	RJMP _0x9A
                 ; 0000 021D       return 0;
0003c3 e0e0      	LDI  R30,LOW(0)
0003c4 c003      	RJMP _0x2080005
                 ; 0000 021E     }
                 ; 0000 021F     delay_ms(25);
                 _0x99:
0003c5 940e 0755 	CALL SUBOPT_0xC
                 ; 0000 0220   }
0003c7 cfd3      	RJMP _0x8C
                 ; 0000 0221 }
                 _0x2080005:
0003c8 9661      	ADIW R28,17
0003c9 9508      	RET
                 ; .FEND
                 ;
                 ;//// data setting
                 ;char set_data(void)
                 ; 0000 0225 {
                 _set_data:
                 ; .FSTART _set_data
                 ; 0000 0226   char _chose = 0;
                 ; 0000 0227   char buff[17];
                 ; 0000 0228   while (1)
0003ca 9761      	SBIW R28,17
0003cb 931a      	ST   -Y,R17
                 ;	_chose -> R17
                 ;	buff -> Y+1
0003cc e010      	LDI  R17,0
                 _0x9D:
                 ; 0000 0229   {
                 ; 0000 022A     if (_chose == 1)
0003cd 3011      	CPI  R17,1
0003ce f461      	BRNE _0xA0
                 ; 0000 022B     {
                 ; 0000 022C       sprintf(buff, "Set month=%d  >", month);
0003cf 940e 07ab 	CALL SUBOPT_0x18
                +
0003d1 e2e8     +LDI R30 , LOW ( 2 * _0x0 + ( 180 ) )
0003d2 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 180 ) )
                 	__POINTW1FN _0x0,180
0003d3 93fa      	ST   -Y,R31
0003d4 93ea      	ST   -Y,R30
0003d5 91e0 0260 	LDS  R30,_month
0003d7 940e 0740 	CALL SUBOPT_0x8
0003d9 940e 07b0 	CALL SUBOPT_0x19
                 ; 0000 022D       lcd_clear();
                 ; 0000 022E       lcd_puts(buff);
                 ; 0000 022F     }
                 ; 0000 0230 
                 ; 0000 0231     if (_chose == 0)
                 _0xA0:
0003db 3010      	CPI  R17,0
0003dc f459      	BRNE _0xA1
                 ; 0000 0232     {
                 ; 0000 0233       sprintf(buff, "Set day=%d  >", day);
0003dd 940e 07ab 	CALL SUBOPT_0x18
                +
0003df e3e8     +LDI R30 , LOW ( 2 * _0x0 + ( 196 ) )
0003e0 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 196 ) )
                 	__POINTW1FN _0x0,196
0003e1 93fa      	ST   -Y,R31
0003e2 93ea      	ST   -Y,R30
0003e3 2dec      	MOV  R30,R12
0003e4 940e 0740 	CALL SUBOPT_0x8
0003e6 940e 07b0 	CALL SUBOPT_0x19
                 ; 0000 0234       lcd_clear();
                 ; 0000 0235       lcd_puts(buff);
                 ; 0000 0236     }
                 ; 0000 0237 
                 ; 0000 0238     if (_chose == 2)
                 _0xA1:
0003e8 3012      	CPI  R17,2
0003e9 f451      	BRNE _0xA2
                 ; 0000 0239     {
                 ; 0000 023A       sprintf(buff, "Set year=%d  >", year);
0003ea 940e 07ab 	CALL SUBOPT_0x18
                +
0003ec e4e6     +LDI R30 , LOW ( 2 * _0x0 + ( 210 ) )
0003ed e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 210 ) )
                 	__POINTW1FN _0x0,210
0003ee 93fa      	ST   -Y,R31
0003ef 93ea      	ST   -Y,R30
0003f0 940e 0745 	CALL SUBOPT_0x9
0003f2 940e 07b0 	CALL SUBOPT_0x19
                 ; 0000 023B       lcd_clear();
                 ; 0000 023C       lcd_puts(buff);
                 ; 0000 023D     }
                 ; 0000 023E 
                 ; 0000 023F     if (PINA .1 == 0 & _chose == 1)
                 _0xA2:
0003f4 940e 07ba 	CALL SUBOPT_0x1A
0003f6 940e 0767 	CALL SUBOPT_0xF
0003f8 f071      	BREQ _0xA3
                 ; 0000 0240     { // UP     month
                 ; 0000 0241       while (PINA .1 == 0)
                 _0xA4:
0003f9 9bc9      	SBIS 0x19,1
                 ; 0000 0242         ;
0003fa cffe      	RJMP _0xA4
                 ; 0000 0243       month++;
0003fb 91e0 0260 	LDS  R30,_month
0003fd 5fef      	SUBI R30,-LOW(1)
0003fe 93e0 0260 	STS  _month,R30
                 ; 0000 0244       if (month > 12)
000400 91a0 0260 	LDS  R26,_month
000402 30ad      	CPI  R26,LOW(0xD)
000403 f01c      	BRLT _0xA7
                 ; 0000 0245         month = 1;
000404 e0e1      	LDI  R30,LOW(1)
000405 93e0 0260 	STS  _month,R30
                 ; 0000 0246     }
                 _0xA7:
                 ; 0000 0247 
                 ; 0000 0248     if (PINA .0 == 0 & _chose == 1)
                 _0xA3:
000407 940e 07c3 	CALL SUBOPT_0x1B
000409 940e 0767 	CALL SUBOPT_0xF
00040b f071      	BREQ _0xA8
                 ; 0000 0249     { // DOWN    month
                 ; 0000 024A       while (PINA .0 == 0)
                 _0xA9:
00040c 9bc8      	SBIS 0x19,0
                 ; 0000 024B         ;
00040d cffe      	RJMP _0xA9
                 ; 0000 024C       month--;
00040e 91e0 0260 	LDS  R30,_month
000410 50e1      	SUBI R30,LOW(1)
000411 93e0 0260 	STS  _month,R30
                 ; 0000 024D       if (month < 1)
000413 91a0 0260 	LDS  R26,_month
000415 30a1      	CPI  R26,LOW(0x1)
000416 f41c      	BRGE _0xAC
                 ; 0000 024E         month = 12;
000417 e0ec      	LDI  R30,LOW(12)
000418 93e0 0260 	STS  _month,R30
                 ; 0000 024F     }
                 _0xAC:
                 ; 0000 0250 
                 ; 0000 0251     if (PINA .1 == 0 & _chose == 0)
                 _0xA8:
00041a 940e 07ba 	CALL SUBOPT_0x1A
00041c 940e 0762 	CALL SUBOPT_0xE
00041e f069      	BREQ _0xAD
                 ; 0000 0252     { // UP    day
                 ; 0000 0253       while (PINA .1 == 0)
                 _0xAE:
00041f 9bc9      	SBIS 0x19,1
                 ; 0000 0254         ;
000420 cffe      	RJMP _0xAE
                 ; 0000 0255       day++;
000421 94c3      	INC  R12
                 ; 0000 0256       i = day;
000422 2dec      	MOV  R30,R12
000423 e7ac      	LDI  R26,LOW(_i)
000424 e0b0      	LDI  R27,HIGH(_i)
000425 940e 085c 	CALL __EEPROMWRB
                 ; 0000 0257       if (day > 31)
000427 e1ef      	LDI  R30,LOW(31)
000428 15ec      	CP   R30,R12
000429 f414      	BRGE _0xB1
                 ; 0000 0258         day = 1;
00042a e0e1      	LDI  R30,LOW(1)
00042b 2ece      	MOV  R12,R30
                 ; 0000 0259     }
                 _0xB1:
                 ; 0000 025A 
                 ; 0000 025B     if (PINA .0 == 0 & _chose == 0)
                 _0xAD:
00042c 940e 07c3 	CALL SUBOPT_0x1B
00042e 940e 0762 	CALL SUBOPT_0xE
000430 f069      	BREQ _0xB2
                 ; 0000 025C     { // DOWN    day
                 ; 0000 025D       while (PINA .0 == 0)
                 _0xB3:
000431 9bc8      	SBIS 0x19,0
                 ; 0000 025E         ;
000432 cffe      	RJMP _0xB3
                 ; 0000 025F       day--;
000433 94ca      	DEC  R12
                 ; 0000 0260       i = day;
000434 2dec      	MOV  R30,R12
000435 e7ac      	LDI  R26,LOW(_i)
000436 e0b0      	LDI  R27,HIGH(_i)
000437 940e 085c 	CALL __EEPROMWRB
                 ; 0000 0261       if (day < 1)
000439 e0e1      	LDI  R30,LOW(1)
00043a 16ce      	CP   R12,R30
00043b f414      	BRGE _0xB6
                 ; 0000 0262         day = 31;
00043c e1ef      	LDI  R30,LOW(31)
00043d 2ece      	MOV  R12,R30
                 ; 0000 0263     }
                 _0xB6:
                 ; 0000 0264 
                 ; 0000 0265     if (PINA .0 == 0 & _chose == 2)
                 _0xB2:
00043e 940e 07c3 	CALL SUBOPT_0x1B
000440 940e 076c 	CALL SUBOPT_0x10
000442 f099      	BREQ _0xB7
                 ; 0000 0266     { // DOWN    year
                 ; 0000 0267       while (PINA .0 == 0)
                 _0xB8:
000443 9bc8      	SBIS 0x19,0
                 ; 0000 0268         ;
000444 cffe      	RJMP _0xB8
                 ; 0000 0269       year--;
000445 940e 0701 	CALL SUBOPT_0x1
000447 9731      	SBIW R30,1
000448 93fe      	ST   -X,R31
000449 93ee      	ST   -X,R30
                 ; 0000 026A       if (year < 1)
00044a 91a0 0261 	LDS  R26,_year
00044c 91b0 0262 	LDS  R27,_year+1
00044e 9711      	SBIW R26,1
00044f f434      	BRGE _0xBB
                 ; 0000 026B         year = 1300;
000450 e1e4      	LDI  R30,LOW(1300)
000451 e0f5      	LDI  R31,HIGH(1300)
000452 93e0 0261 	STS  _year,R30
000454 93f0 0262 	STS  _year+1,R31
                 ; 0000 026C     }
                 _0xBB:
                 ; 0000 026D 
                 ; 0000 026E     if (PINA .1 == 0 & _chose == 2)
                 _0xB7:
000456 940e 07ba 	CALL SUBOPT_0x1A
000458 940e 076c 	CALL SUBOPT_0x10
00045a f039      	BREQ _0xBC
                 ; 0000 026F     { // UP    year
                 ; 0000 0270       while (PINA .1 == 0)
                 _0xBD:
00045b 9bc9      	SBIS 0x19,1
                 ; 0000 0271         ;
00045c cffe      	RJMP _0xBD
                 ; 0000 0272       year++;
00045d 940e 0701 	CALL SUBOPT_0x1
00045f 9631      	ADIW R30,1
000460 93fe      	ST   -X,R31
000461 93ee      	ST   -X,R30
                 ; 0000 0273       // if(year>1404)
                 ; 0000 0274       // year=0;
                 ; 0000 0275     }
                 ; 0000 0276 
                 ; 0000 0277     if (PINA .3 == 0)
                 _0xBC:
000462 99cb      	SBIC 0x19,3
000463 c006      	RJMP _0xC0
                 ; 0000 0278     { // NEXT
                 ; 0000 0279       while (PINA .3 == 0)
                 _0xC1:
000464 9bcb      	SBIS 0x19,3
                 ; 0000 027A         ;
000465 cffe      	RJMP _0xC1
                 ; 0000 027B       _chose++;
000466 5f1f      	SUBI R17,-1
                 ; 0000 027C       if (_chose >= 3)
000467 3013      	CPI  R17,3
000468 f008      	BRLO _0xC4
                 ; 0000 027D         _chose = 0;
000469 e010      	LDI  R17,LOW(0)
                 ; 0000 027E     }
                 _0xC4:
                 ; 0000 027F 
                 ; 0000 0280     if (PINA .4 == 0)
                 _0xC0:
00046a 99cc      	SBIC 0x19,4
00046b c004      	RJMP _0xC5
                 ; 0000 0281     { // Back
                 ; 0000 0282       while (PINA .4 == 0)
                 _0xC6:
00046c 9bcc      	SBIS 0x19,4
                 ; 0000 0283         ;
00046d cffe      	RJMP _0xC6
                 ; 0000 0284       return 0;
00046e e0e0      	LDI  R30,LOW(0)
00046f c003      	RJMP _0x2080004
                 ; 0000 0285     }
                 ; 0000 0286 
                 ; 0000 0287     delay_ms(25);
                 _0xC5:
000470 940e 0755 	CALL SUBOPT_0xC
                 ; 0000 0288   }
000472 cf5a      	RJMP _0x9D
                 ; 0000 0289 }
                 _0x2080004:
000473 8118      	LDD  R17,Y+0
000474 9662      	ADIW R28,18
000475 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G100:
                 ; .FSTART _put_buff_G100
000476 93ba      	ST   -Y,R27
000477 93aa      	ST   -Y,R26
000478 931a      	ST   -Y,R17
000479 930a      	ST   -Y,R16
00047a 81aa      	LDD  R26,Y+2
00047b 81bb      	LDD  R27,Y+2+1
00047c 9612      	ADIW R26,2
00047d 940e 0837 	CALL __GETW1P
00047f 9730      	SBIW R30,0
000480 f159      	BREQ _0x2000010
000481 81aa      	LDD  R26,Y+2
000482 81bb      	LDD  R27,Y+2+1
000483 9614      	ADIW R26,4
000484 940e 0837 	CALL __GETW1P
000486 018f      	MOVW R16,R30
000487 9730      	SBIW R30,0
000488 f061      	BREQ _0x2000012
                +
000489 3002     +CPI R16 , LOW ( 2 )
00048a e0e0     +LDI R30 , HIGH ( 2 )
00048b 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
00048c f098      	BRLO _0x2000013
00048d 01f8      	MOVW R30,R16
00048e 9731      	SBIW R30,1
00048f 018f      	MOVW R16,R30
                +
000490 81aa     +LDD R26 , Y + 2
000491 81bb     +LDD R27 , Y + 2 + 1
000492 9614     +ADIW R26 , 4
000493 93ed     +ST X + , R30
000494 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2000012:
000495 81aa      	LDD  R26,Y+2
000496 81bb      	LDD  R27,Y+2+1
000497 9612      	ADIW R26,2
000498 91ed      	LD   R30,X+
000499 91fd      	LD   R31,X+
00049a 9631      	ADIW R30,1
00049b 93fe      	ST   -X,R31
00049c 93ee      	ST   -X,R30
00049d 9731      	SBIW R30,1
00049e 81ac      	LDD  R26,Y+4
00049f 83a0      	STD  Z+0,R26
                 _0x2000013:
0004a0 81aa      	LDD  R26,Y+2
0004a1 81bb      	LDD  R27,Y+2+1
0004a2 940e 0837 	CALL __GETW1P
0004a4 23ff      	TST  R31
0004a5 f02a      	BRMI _0x2000014
0004a6 91ed      	LD   R30,X+
0004a7 91fd      	LD   R31,X+
0004a8 9631      	ADIW R30,1
0004a9 93fe      	ST   -X,R31
0004aa 93ee      	ST   -X,R30
                 _0x2000014:
0004ab c006      	RJMP _0x2000015
                 _0x2000010:
0004ac 81aa      	LDD  R26,Y+2
0004ad 81bb      	LDD  R27,Y+2+1
0004ae efef      	LDI  R30,LOW(65535)
0004af efff      	LDI  R31,HIGH(65535)
0004b0 93ed      	ST   X+,R30
0004b1 93fc      	ST   X,R31
                 _0x2000015:
0004b2 8119      	LDD  R17,Y+1
0004b3 8108      	LDD  R16,Y+0
0004b4 9625      	ADIW R28,5
0004b5 9508      	RET
                 ; .FEND
                 __print_G100:
                 ; .FSTART __print_G100
0004b6 93ba      	ST   -Y,R27
0004b7 93aa      	ST   -Y,R26
0004b8 9726      	SBIW R28,6
0004b9 940e 086d 	CALL __SAVELOCR6
0004bb e010      	LDI  R17,0
0004bc 85ac      	LDD  R26,Y+12
0004bd 85bd      	LDD  R27,Y+12+1
0004be e0e0      	LDI  R30,LOW(0)
0004bf e0f0      	LDI  R31,HIGH(0)
0004c0 93ed      	ST   X+,R30
0004c1 93fc      	ST   X,R31
                 _0x2000016:
0004c2 89ea      	LDD  R30,Y+18
0004c3 89fb      	LDD  R31,Y+18+1
0004c4 9631      	ADIW R30,1
0004c5 8bea      	STD  Y+18,R30
0004c6 8bfb      	STD  Y+18+1,R31
0004c7 9731      	SBIW R30,1
0004c8 91e4      	LPM  R30,Z
0004c9 2f2e      	MOV  R18,R30
0004ca 30e0      	CPI  R30,0
0004cb f409      	BRNE PC+2
0004cc c115      	RJMP _0x2000018
0004cd 2fe1      	MOV  R30,R17
0004ce 30e0      	CPI  R30,0
0004cf f439      	BRNE _0x200001C
0004d0 3225      	CPI  R18,37
0004d1 f411      	BRNE _0x200001D
0004d2 e011      	LDI  R17,LOW(1)
0004d3 c002      	RJMP _0x200001E
                 _0x200001D:
0004d4 940e 07cc 	CALL SUBOPT_0x1C
                 _0x200001E:
0004d6 c10a      	RJMP _0x200001B
                 _0x200001C:
0004d7 30e1      	CPI  R30,LOW(0x1)
0004d8 f4a9      	BRNE _0x200001F
0004d9 3225      	CPI  R18,37
0004da f419      	BRNE _0x2000020
0004db 940e 07cc 	CALL SUBOPT_0x1C
0004dd c102      	RJMP _0x20000CC
                 _0x2000020:
0004de e012      	LDI  R17,LOW(2)
0004df e040      	LDI  R20,LOW(0)
0004e0 e000      	LDI  R16,LOW(0)
0004e1 322d      	CPI  R18,45
0004e2 f411      	BRNE _0x2000021
0004e3 e001      	LDI  R16,LOW(1)
0004e4 c0fc      	RJMP _0x200001B
                 _0x2000021:
0004e5 322b      	CPI  R18,43
0004e6 f411      	BRNE _0x2000022
0004e7 e24b      	LDI  R20,LOW(43)
0004e8 c0f8      	RJMP _0x200001B
                 _0x2000022:
0004e9 3220      	CPI  R18,32
0004ea f411      	BRNE _0x2000023
0004eb e240      	LDI  R20,LOW(32)
0004ec c0f4      	RJMP _0x200001B
                 _0x2000023:
0004ed c002      	RJMP _0x2000024
                 _0x200001F:
0004ee 30e2      	CPI  R30,LOW(0x2)
0004ef f439      	BRNE _0x2000025
                 _0x2000024:
0004f0 e050      	LDI  R21,LOW(0)
0004f1 e013      	LDI  R17,LOW(3)
0004f2 3320      	CPI  R18,48
0004f3 f411      	BRNE _0x2000026
0004f4 6800      	ORI  R16,LOW(128)
0004f5 c0eb      	RJMP _0x200001B
                 _0x2000026:
0004f6 c003      	RJMP _0x2000027
                 _0x2000025:
0004f7 30e3      	CPI  R30,LOW(0x3)
0004f8 f009      	BREQ PC+2
0004f9 c0e7      	RJMP _0x200001B
                 _0x2000027:
0004fa 3320      	CPI  R18,48
0004fb f010      	BRLO _0x200002A
0004fc 332a      	CPI  R18,58
0004fd f008      	BRLO _0x200002B
                 _0x200002A:
0004fe c007      	RJMP _0x2000029
                 _0x200002B:
0004ff e0aa      	LDI  R26,LOW(10)
000500 9f5a      	MUL  R21,R26
000501 2d50      	MOV  R21,R0
000502 2fe2      	MOV  R30,R18
000503 53e0      	SUBI R30,LOW(48)
000504 0f5e      	ADD  R21,R30
000505 c0db      	RJMP _0x200001B
                 _0x2000029:
000506 2fe2      	MOV  R30,R18
000507 36e3      	CPI  R30,LOW(0x63)
000508 f449      	BRNE _0x200002F
000509 940e 07d3 	CALL SUBOPT_0x1D
00050b 89e8      	LDD  R30,Y+16
00050c 89f9      	LDD  R31,Y+16+1
00050d 81a4      	LDD  R26,Z+4
00050e 93aa      	ST   -Y,R26
00050f 940e 07d9 	CALL SUBOPT_0x1E
000511 c0ce      	RJMP _0x2000030
                 _0x200002F:
000512 37e3      	CPI  R30,LOW(0x73)
000513 f441      	BRNE _0x2000032
000514 940e 07d3 	CALL SUBOPT_0x1D
000516 940e 07df 	CALL SUBOPT_0x1F
000518 940e 06e0 	CALL _strlen
00051a 2f1e      	MOV  R17,R30
00051b c00a      	RJMP _0x2000033
                 _0x2000032:
00051c 37e0      	CPI  R30,LOW(0x70)
00051d f461      	BRNE _0x2000035
00051e 940e 07d3 	CALL SUBOPT_0x1D
000520 940e 07df 	CALL SUBOPT_0x1F
000522 940e 06ec 	CALL _strlenf
000524 2f1e      	MOV  R17,R30
000525 6008      	ORI  R16,LOW(8)
                 _0x2000033:
000526 6002      	ORI  R16,LOW(2)
000527 770f      	ANDI R16,LOW(127)
000528 e030      	LDI  R19,LOW(0)
000529 c034      	RJMP _0x2000036
                 _0x2000035:
00052a 36e4      	CPI  R30,LOW(0x64)
00052b f011      	BREQ _0x2000039
00052c 36e9      	CPI  R30,LOW(0x69)
00052d f411      	BRNE _0x200003A
                 _0x2000039:
00052e 6004      	ORI  R16,LOW(4)
00052f c002      	RJMP _0x200003B
                 _0x200003A:
000530 37e5      	CPI  R30,LOW(0x75)
000531 f431      	BRNE _0x200003C
                 _0x200003B:
000532 e5e4      	LDI  R30,LOW(_tbl10_G100*2)
000533 e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
000534 83ee      	STD  Y+6,R30
000535 83ff      	STD  Y+6+1,R31
000536 e015      	LDI  R17,LOW(5)
000537 c00c      	RJMP _0x200003D
                 _0x200003C:
000538 35e8      	CPI  R30,LOW(0x58)
000539 f411      	BRNE _0x200003F
00053a 6008      	ORI  R16,LOW(8)
00053b c003      	RJMP _0x2000040
                 _0x200003F:
00053c 37e8      	CPI  R30,LOW(0x78)
00053d f009      	BREQ PC+2
00053e c0a1      	RJMP _0x2000071
                 _0x2000040:
00053f e5ee      	LDI  R30,LOW(_tbl16_G100*2)
000540 e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
000541 83ee      	STD  Y+6,R30
000542 83ff      	STD  Y+6+1,R31
000543 e014      	LDI  R17,LOW(4)
                 _0x200003D:
000544 ff02      	SBRS R16,2
000545 c014      	RJMP _0x2000042
000546 940e 07d3 	CALL SUBOPT_0x1D
000548 940e 07e9 	CALL SUBOPT_0x20
00054a 85ab      	LDD  R26,Y+11
00054b 23aa      	TST  R26
00054c f43a      	BRPL _0x2000043
00054d 85ea      	LDD  R30,Y+10
00054e 85fb      	LDD  R31,Y+10+1
00054f 940e 0814 	CALL __ANEGW1
000551 87ea      	STD  Y+10,R30
000552 87fb      	STD  Y+10+1,R31
000553 e24d      	LDI  R20,LOW(45)
                 _0x2000043:
000554 3040      	CPI  R20,0
000555 f011      	BREQ _0x2000044
000556 5f1f      	SUBI R17,-LOW(1)
000557 c001      	RJMP _0x2000045
                 _0x2000044:
000558 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
000559 c004      	RJMP _0x2000046
                 _0x2000042:
00055a 940e 07d3 	CALL SUBOPT_0x1D
00055c 940e 07e9 	CALL SUBOPT_0x20
                 _0x2000046:
                 _0x2000036:
00055e fd00      	SBRC R16,0
00055f c011      	RJMP _0x2000047
                 _0x2000048:
000560 1715      	CP   R17,R21
000561 f478      	BRSH _0x200004A
000562 ff07      	SBRS R16,7
000563 c008      	RJMP _0x200004B
000564 ff02      	SBRS R16,2
000565 c004      	RJMP _0x200004C
000566 7f0b      	ANDI R16,LOW(251)
000567 2f24      	MOV  R18,R20
000568 5011      	SUBI R17,LOW(1)
000569 c001      	RJMP _0x200004D
                 _0x200004C:
00056a e320      	LDI  R18,LOW(48)
                 _0x200004D:
00056b c001      	RJMP _0x200004E
                 _0x200004B:
00056c e220      	LDI  R18,LOW(32)
                 _0x200004E:
00056d 940e 07cc 	CALL SUBOPT_0x1C
00056f 5051      	SUBI R21,LOW(1)
000570 cfef      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
000571 2f31      	MOV  R19,R17
000572 ff01      	SBRS R16,1
000573 c017      	RJMP _0x200004F
                 _0x2000050:
000574 3030      	CPI  R19,0
000575 f0a1      	BREQ _0x2000052
000576 ff03      	SBRS R16,3
000577 c006      	RJMP _0x2000053
000578 81ee      	LDD  R30,Y+6
000579 81ff      	LDD  R31,Y+6+1
00057a 9125      	LPM  R18,Z+
00057b 83ee      	STD  Y+6,R30
00057c 83ff      	STD  Y+6+1,R31
00057d c005      	RJMP _0x2000054
                 _0x2000053:
00057e 81ae      	LDD  R26,Y+6
00057f 81bf      	LDD  R27,Y+6+1
000580 912d      	LD   R18,X+
000581 83ae      	STD  Y+6,R26
000582 83bf      	STD  Y+6+1,R27
                 _0x2000054:
000583 940e 07cc 	CALL SUBOPT_0x1C
000585 3050      	CPI  R21,0
000586 f009      	BREQ _0x2000055
000587 5051      	SUBI R21,LOW(1)
                 _0x2000055:
000588 5031      	SUBI R19,LOW(1)
000589 cfea      	RJMP _0x2000050
                 _0x2000052:
00058a c04b      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
00058b e320      	LDI  R18,LOW(48)
00058c 81ee      	LDD  R30,Y+6
00058d 81ff      	LDD  R31,Y+6+1
00058e 940e 083b 	CALL __GETW1PF
000590 87e8      	STD  Y+8,R30
000591 87f9      	STD  Y+8+1,R31
000592 81ee      	LDD  R30,Y+6
000593 81ff      	LDD  R31,Y+6+1
000594 9632      	ADIW R30,2
000595 83ee      	STD  Y+6,R30
000596 83ff      	STD  Y+6+1,R31
                 _0x200005A:
000597 85e8      	LDD  R30,Y+8
000598 85f9      	LDD  R31,Y+8+1
000599 85aa      	LDD  R26,Y+10
00059a 85bb      	LDD  R27,Y+10+1
00059b 17ae      	CP   R26,R30
00059c 07bf      	CPC  R27,R31
00059d f050      	BRLO _0x200005C
00059e 5f2f      	SUBI R18,-LOW(1)
00059f 85a8      	LDD  R26,Y+8
0005a0 85b9      	LDD  R27,Y+8+1
0005a1 85ea      	LDD  R30,Y+10
0005a2 85fb      	LDD  R31,Y+10+1
0005a3 1bea      	SUB  R30,R26
0005a4 0bfb      	SBC  R31,R27
0005a5 87ea      	STD  Y+10,R30
0005a6 87fb      	STD  Y+10+1,R31
0005a7 cfef      	RJMP _0x200005A
                 _0x200005C:
0005a8 332a      	CPI  R18,58
0005a9 f028      	BRLO _0x200005D
0005aa ff03      	SBRS R16,3
0005ab c002      	RJMP _0x200005E
0005ac 5f29      	SUBI R18,-LOW(7)
0005ad c001      	RJMP _0x200005F
                 _0x200005E:
0005ae 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
0005af fd04      	SBRC R16,4
0005b0 c01a      	RJMP _0x2000061
0005b1 3321      	CPI  R18,49
0005b2 f420      	BRSH _0x2000063
0005b3 85a8      	LDD  R26,Y+8
0005b4 85b9      	LDD  R27,Y+8+1
0005b5 9711      	SBIW R26,1
0005b6 f409      	BRNE _0x2000062
                 _0x2000063:
0005b7 c009      	RJMP _0x20000CD
                 _0x2000062:
0005b8 1753      	CP   R21,R19
0005b9 f010      	BRLO _0x2000067
0005ba ff00      	SBRS R16,0
0005bb c001      	RJMP _0x2000068
                 _0x2000067:
0005bc c013      	RJMP _0x2000066
                 _0x2000068:
0005bd e220      	LDI  R18,LOW(32)
0005be ff07      	SBRS R16,7
0005bf c00b      	RJMP _0x2000069
0005c0 e320      	LDI  R18,LOW(48)
                 _0x20000CD:
0005c1 6100      	ORI  R16,LOW(16)
0005c2 ff02      	SBRS R16,2
0005c3 c007      	RJMP _0x200006A
0005c4 7f0b      	ANDI R16,LOW(251)
0005c5 934a      	ST   -Y,R20
0005c6 940e 07d9 	CALL SUBOPT_0x1E
0005c8 3050      	CPI  R21,0
0005c9 f009      	BREQ _0x200006B
0005ca 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
0005cb 940e 07cc 	CALL SUBOPT_0x1C
0005cd 3050      	CPI  R21,0
0005ce f009      	BREQ _0x200006C
0005cf 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
0005d0 5031      	SUBI R19,LOW(1)
0005d1 85a8      	LDD  R26,Y+8
0005d2 85b9      	LDD  R27,Y+8+1
0005d3 9712      	SBIW R26,2
0005d4 f008      	BRLO _0x2000059
0005d5 cfb5      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
0005d6 ff00      	SBRS R16,0
0005d7 c008      	RJMP _0x200006D
                 _0x200006E:
0005d8 3050      	CPI  R21,0
0005d9 f031      	BREQ _0x2000070
0005da 5051      	SUBI R21,LOW(1)
0005db e2e0      	LDI  R30,LOW(32)
0005dc 93ea      	ST   -Y,R30
0005dd 940e 07d9 	CALL SUBOPT_0x1E
0005df cff8      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000CC:
0005e0 e010      	LDI  R17,LOW(0)
                 _0x200001B:
0005e1 cee0      	RJMP _0x2000016
                 _0x2000018:
0005e2 85ac      	LDD  R26,Y+12
0005e3 85bd      	LDD  R27,Y+12+1
0005e4 940e 0837 	CALL __GETW1P
0005e6 940e 0874 	CALL __LOADLOCR6
0005e8 9664      	ADIW R28,20
0005e9 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
0005ea 92ff      	PUSH R15
0005eb 2ef8      	MOV  R15,R24
0005ec 9726      	SBIW R28,6
0005ed 940e 086f 	CALL __SAVELOCR4
0005ef 940e 07f1 	CALL SUBOPT_0x21
0005f1 9730      	SBIW R30,0
0005f2 f419      	BRNE _0x2000072
0005f3 efef      	LDI  R30,LOW(65535)
0005f4 efff      	LDI  R31,HIGH(65535)
0005f5 c023      	RJMP _0x2080003
                 _0x2000072:
0005f6 01de      	MOVW R26,R28
0005f7 9616      	ADIW R26,6
0005f8 940e 0810 	CALL __ADDW2R15
0005fa 018d      	MOVW R16,R26
0005fb 940e 07f1 	CALL SUBOPT_0x21
0005fd 83ee      	STD  Y+6,R30
0005fe 83ff      	STD  Y+6+1,R31
0005ff e0e0      	LDI  R30,LOW(0)
000600 87e8      	STD  Y+8,R30
000601 87e9      	STD  Y+8+1,R30
000602 01de      	MOVW R26,R28
000603 961a      	ADIW R26,10
000604 940e 0810 	CALL __ADDW2R15
000606 940e 0837 	CALL __GETW1P
000608 93fa      	ST   -Y,R31
000609 93ea      	ST   -Y,R30
00060a 931a      	ST   -Y,R17
00060b 930a      	ST   -Y,R16
00060c e7e6      	LDI  R30,LOW(_put_buff_G100)
00060d e0f4      	LDI  R31,HIGH(_put_buff_G100)
00060e 93fa      	ST   -Y,R31
00060f 93ea      	ST   -Y,R30
000610 01de      	MOVW R26,R28
000611 961a      	ADIW R26,10
000612 dea3      	RCALL __print_G100
000613 019f      	MOVW R18,R30
000614 81ae      	LDD  R26,Y+6
000615 81bf      	LDD  R27,Y+6+1
000616 e0e0      	LDI  R30,LOW(0)
000617 93ec      	ST   X,R30
000618 01f9      	MOVW R30,R18
                 _0x2080003:
000619 940e 0876 	CALL __LOADLOCR4
00061b 962a      	ADIW R28,10
00061c 90ff      	POP  R15
00061d 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G101:
                 ; .FSTART __lcd_write_nibble_G101
00061e 93aa      	ST   -Y,R26
00061f 81e8      	LD   R30,Y
000620 71e0      	ANDI R30,LOW(0x10)
000621 f011      	BREQ _0x2020004
000622 9ac3      	SBI  0x18,3
000623 c001      	RJMP _0x2020005
                 _0x2020004:
000624 98c3      	CBI  0x18,3
                 _0x2020005:
000625 81e8      	LD   R30,Y
000626 72e0      	ANDI R30,LOW(0x20)
000627 f011      	BREQ _0x2020006
000628 9ac4      	SBI  0x18,4
000629 c001      	RJMP _0x2020007
                 _0x2020006:
00062a 98c4      	CBI  0x18,4
                 _0x2020007:
00062b 81e8      	LD   R30,Y
00062c 74e0      	ANDI R30,LOW(0x40)
00062d f011      	BREQ _0x2020008
00062e 9ac5      	SBI  0x18,5
00062f c001      	RJMP _0x2020009
                 _0x2020008:
000630 98c5      	CBI  0x18,5
                 _0x2020009:
000631 81e8      	LD   R30,Y
000632 78e0      	ANDI R30,LOW(0x80)
000633 f011      	BREQ _0x202000A
000634 9ac6      	SBI  0x18,6
000635 c001      	RJMP _0x202000B
                 _0x202000A:
000636 98c6      	CBI  0x18,6
                 _0x202000B:
                +
000637 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000638 958a     +DEC R24
000639 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00063a 9ac2      	SBI  0x18,2
                +
00063b e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00063c 958a     +DEC R24
00063d f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00063e 98c2      	CBI  0x18,2
                +
00063f e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000640 958a     +DEC R24
000641 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000642 c09b      	RJMP _0x2080001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000643 93aa      	ST   -Y,R26
000644 81a8      	LD   R26,Y
000645 dfd8      	RCALL __lcd_write_nibble_G101
000646 81e8          ld    r30,y
000647 95e2          swap  r30
000648 83e8          st    y,r30
000649 81a8      	LD   R26,Y
00064a dfd3      	RCALL __lcd_write_nibble_G101
                +
00064b e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
00064c 958a     +DEC R24
00064d f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
00064e c08f      	RJMP _0x2080001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
00064f 93aa      	ST   -Y,R26
000650 81e8      	LD   R30,Y
000651 e0f0      	LDI  R31,0
000652 59ed      	SUBI R30,LOW(-__base_y_G101)
000653 4ffd      	SBCI R31,HIGH(-__base_y_G101)
000654 81e0      	LD   R30,Z
000655 81a9      	LDD  R26,Y+1
000656 0fae      	ADD  R26,R30
000657 dfeb      	RCALL __lcd_write_data
000658 81e9      	LDD  R30,Y+1
000659 93e0 0267 	STS  __lcd_x,R30
00065b 81e8      	LD   R30,Y
00065c 93e0 0268 	STS  __lcd_y,R30
00065e 9622      	ADIW R28,2
00065f 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000660 e0a2      	LDI  R26,LOW(2)
000661 940e 07f8 	CALL SUBOPT_0x22
000663 e0ac      	LDI  R26,LOW(12)
000664 dfde      	RCALL __lcd_write_data
000665 e0a1      	LDI  R26,LOW(1)
000666 940e 07f8 	CALL SUBOPT_0x22
000668 e0e0      	LDI  R30,LOW(0)
000669 93e0 0268 	STS  __lcd_y,R30
00066b 93e0 0267 	STS  __lcd_x,R30
00066d 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
00066e 93aa      	ST   -Y,R26
00066f 81a8      	LD   R26,Y
000670 30aa      	CPI  R26,LOW(0xA)
000671 f031      	BREQ _0x2020011
000672 91e0 0269 	LDS  R30,__lcd_maxx
000674 91a0 0267 	LDS  R26,__lcd_x
000676 17ae      	CP   R26,R30
000677 f060      	BRLO _0x2020010
                 _0x2020011:
000678 e0e0      	LDI  R30,LOW(0)
000679 93ea      	ST   -Y,R30
00067a 91a0 0268 	LDS  R26,__lcd_y
00067c 5faf      	SUBI R26,-LOW(1)
00067d 93a0 0268 	STS  __lcd_y,R26
00067f dfcf      	RCALL _lcd_gotoxy
000680 81a8      	LD   R26,Y
000681 30aa      	CPI  R26,LOW(0xA)
000682 f409      	BRNE _0x2020013
000683 c05a      	RJMP _0x2080001
                 _0x2020013:
                 _0x2020010:
000684 91e0 0267 	LDS  R30,__lcd_x
000686 5fef      	SUBI R30,-LOW(1)
000687 93e0 0267 	STS  __lcd_x,R30
000689 9ac0      	SBI  0x18,0
00068a 81a8      	LD   R26,Y
00068b dfb7      	RCALL __lcd_write_data
00068c 98c0      	CBI  0x18,0
00068d c050      	RJMP _0x2080001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
00068e 93ba      	ST   -Y,R27
00068f 93aa      	ST   -Y,R26
000690 931a      	ST   -Y,R17
                 _0x2020014:
000691 81a9      	LDD  R26,Y+1
000692 81ba      	LDD  R27,Y+1+1
000693 91ed      	LD   R30,X+
000694 83a9      	STD  Y+1,R26
000695 83ba      	STD  Y+1+1,R27
000696 2f1e      	MOV  R17,R30
000697 30e0      	CPI  R30,0
000698 f019      	BREQ _0x2020016
000699 2fa1      	MOV  R26,R17
00069a dfd3      	RCALL _lcd_putchar
00069b cff5      	RJMP _0x2020014
                 _0x2020016:
00069c c010      	RJMP _0x2080002
                 ; .FEND
                 _lcd_putsf:
                 ; .FSTART _lcd_putsf
00069d 93ba      	ST   -Y,R27
00069e 93aa      	ST   -Y,R26
00069f 931a      	ST   -Y,R17
                 _0x2020017:
0006a0 81e9      	LDD  R30,Y+1
0006a1 81fa      	LDD  R31,Y+1+1
0006a2 9631      	ADIW R30,1
0006a3 83e9      	STD  Y+1,R30
0006a4 83fa      	STD  Y+1+1,R31
0006a5 9731      	SBIW R30,1
0006a6 91e4      	LPM  R30,Z
0006a7 2f1e      	MOV  R17,R30
0006a8 30e0      	CPI  R30,0
0006a9 f019      	BREQ _0x2020019
0006aa 2fa1      	MOV  R26,R17
0006ab dfc2      	RCALL _lcd_putchar
0006ac cff3      	RJMP _0x2020017
                 _0x2020019:
                 _0x2080002:
0006ad 8118      	LDD  R17,Y+0
0006ae 9623      	ADIW R28,3
0006af 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
0006b0 93aa      	ST   -Y,R26
0006b1 9abb      	SBI  0x17,3
0006b2 9abc      	SBI  0x17,4
0006b3 9abd      	SBI  0x17,5
0006b4 9abe      	SBI  0x17,6
0006b5 9aba      	SBI  0x17,2
0006b6 9ab8      	SBI  0x17,0
0006b7 9ab9      	SBI  0x17,1
0006b8 98c2      	CBI  0x18,2
0006b9 98c0      	CBI  0x18,0
0006ba 98c1      	CBI  0x18,1
0006bb 81e8      	LD   R30,Y
0006bc 93e0 0269 	STS  __lcd_maxx,R30
0006be 58e0      	SUBI R30,-LOW(128)
                +
0006bf 93e0 0265+STS __base_y_G101 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G101,2
0006c1 81e8      	LD   R30,Y
0006c2 54e0      	SUBI R30,-LOW(192)
                +
0006c3 93e0 0266+STS __base_y_G101 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G101,3
0006c5 e1a4      	LDI  R26,LOW(20)
0006c6 e0b0      	LDI  R27,0
0006c7 940e 0806 	CALL _delay_ms
0006c9 940e 07fe 	CALL SUBOPT_0x23
0006cb 940e 07fe 	CALL SUBOPT_0x23
0006cd 940e 07fe 	CALL SUBOPT_0x23
0006cf e2a0      	LDI  R26,LOW(32)
0006d0 df4d      	RCALL __lcd_write_nibble_G101
                +
0006d1 ec88     +LDI R24 , LOW ( 200 )
0006d2 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0006d3 9701     +SBIW R24 , 1
0006d4 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0006d5 e2a8      	LDI  R26,LOW(40)
0006d6 df6c      	RCALL __lcd_write_data
0006d7 e0a4      	LDI  R26,LOW(4)
0006d8 df6a      	RCALL __lcd_write_data
0006d9 e8a5      	LDI  R26,LOW(133)
0006da df68      	RCALL __lcd_write_data
0006db e0a6      	LDI  R26,LOW(6)
0006dc df66      	RCALL __lcd_write_data
0006dd df82      	RCALL _lcd_clear
                 _0x2080001:
0006de 9621      	ADIW R28,1
0006df 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
0006e0 93ba      	ST   -Y,R27
0006e1 93aa      	ST   -Y,R26
0006e2 91a9          ld   r26,y+
0006e3 91b9          ld   r27,y+
0006e4 27ee          clr  r30
0006e5 27ff          clr  r31
                 strlen0:
0006e6 916d          ld   r22,x+
0006e7 2366          tst  r22
0006e8 f011          breq strlen1
0006e9 9631          adiw r30,1
0006ea cffb          rjmp strlen0
                 strlen1:
0006eb 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
0006ec 93ba      	ST   -Y,R27
0006ed 93aa      	ST   -Y,R26
0006ee 27aa          clr  r26
0006ef 27bb          clr  r27
0006f0 91e9          ld   r30,y+
0006f1 91f9          ld   r31,y+
                 strlenf0:
0006f2 9005      	lpm  r0,z+
0006f3 2000          tst  r0
0006f4 f011          breq strlenf1
0006f5 9611          adiw r26,1
0006f6 cffb          rjmp strlenf0
                 strlenf1:
0006f7 01fd          movw r30,r26
0006f8 9508          ret
                 ; .FEND
                 
                 	.ESEG
                 _enter_array:
000000           	.BYTE 0x3E
                 _exit_array:
00003e           	.BYTE 0x3E
                 _i:
00007c           	.BYTE 0x1
                 
                 	.DSEG
                 _month:
000260           	.BYTE 0x1
                 _year:
000261           	.BYTE 0x2
                 __base_y_G101:
000263           	.BYTE 0x4
                 __lcd_x:
000267           	.BYTE 0x1
                 __lcd_y:
000268           	.BYTE 0x1
                 __lcd_maxx:
000269           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x0:
0006f9 e0e1      	LDI  R30,LOW(1)
0006fa 2ece      	MOV  R12,R30
0006fb 91e0 0260 	LDS  R30,_month
0006fd 5fef      	SUBI R30,-LOW(1)
0006fe 93e0 0260 	STS  _month,R30
000700 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
000701 e6a1      	LDI  R26,LOW(_year)
000702 e0b2      	LDI  R27,HIGH(_year)
000703 91ed      	LD   R30,X+
000704 91fd      	LD   R31,X+
000705 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x2:
000706 920a      	ST   -Y,R0
000707 921a      	ST   -Y,R1
000708 92fa      	ST   -Y,R15
000709 936a      	ST   -Y,R22
00070a 937a      	ST   -Y,R23
00070b 938a      	ST   -Y,R24
00070c 939a      	ST   -Y,R25
00070d 93aa      	ST   -Y,R26
00070e 93ba      	ST   -Y,R27
00070f 93ea      	ST   -Y,R30
000710 93fa      	ST   -Y,R31
000711 b7ef      	IN   R30,SREG
000712 93ea      	ST   -Y,R30
000713 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
000714 940e 069d 	CALL _lcd_putsf
000716 efa4      	LDI  R26,LOW(500)
000717 e0b1      	LDI  R27,HIGH(500)
000718 940c 0806 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x4:
00071a 2da9      	MOV  R26,R9
00071b e0b0      	LDI  R27,0
00071c fda7      	SBRC R26,7
00071d efbf      	SER  R27
00071e 2de8      	MOV  R30,R8
00071f e0f0      	LDI  R31,0
000720 fde7      	SBRC R30,7
000721 efff      	SER  R31
000722 0fae      	ADD  R26,R30
000723 1fbf      	ADC  R27,R31
000724 971a      	SBIW R26,10
000725 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x5:
000726 e0e0      	LDI  R30,LOW(0)
000727 93ea      	ST   -Y,R30
000728 e0a1      	LDI  R26,LOW(1)
000729 940c 064f 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x6:
00072b e7ac      	LDI  R26,LOW(_i)
00072c e0b0      	LDI  R27,HIGH(_i)
00072d 940e 0848 	CALL __EEPROMRDB
00072f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x7:
000730 2daa      	MOV  R26,R10
000731 e0e0      	LDI  R30,LOW(0)
000732 940e 0823 	CALL __EQB12
000734 2e0e      	MOV  R0,R30
000735 2dab      	MOV  R26,R11
000736 e0e0      	LDI  R30,LOW(0)
000737 940e 0823 	CALL __EQB12
000739 220e      	AND  R0,R30
00073a 2dad      	MOV  R26,R13
00073b e0e0      	LDI  R30,LOW(0)
00073c 940e 0823 	CALL __EQB12
00073e 21e0      	AND  R30,R0
00073f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 12 TIMES, CODE SIZE REDUCTION:30 WORDS
                 SUBOPT_0x8:
000740 940e 0818 	CALL __CBD1
000742 940e 083f 	CALL __PUTPARD1
000744 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x9:
000745 91e0 0261 	LDS  R30,_year
000747 91f0 0262 	LDS  R31,_year+1
000749 940e 081e 	CALL __CWD1
00074b 940e 083f 	CALL __PUTPARD1
00074d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xA:
00074e 01fe      	MOVW R30,R28
00074f 93fa      	ST   -Y,R31
000750 93ea      	ST   -Y,R30
000751 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xB:
000752 01de      	MOVW R26,R28
000753 940c 068e 	JMP  _lcd_puts
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0xC:
000755 e1a9      	LDI  R26,LOW(25)
000756 e0b0      	LDI  R27,0
000757 940c 0806 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0xD:
000759 e0a0      	LDI  R26,0
00075a 99ca      	SBIC 0x19,2
00075b e0a1      	LDI  R26,1
00075c e0e0      	LDI  R30,LOW(0)
00075d 940e 0823 	CALL __EQB12
00075f 2e0e      	MOV  R0,R30
000760 2fa1      	MOV  R26,R17
000761 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0xE:
000762 e0e0      	LDI  R30,LOW(0)
000763 940e 0823 	CALL __EQB12
000765 21e0      	AND  R30,R0
000766 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0xF:
000767 e0e1      	LDI  R30,LOW(1)
000768 940e 0823 	CALL __EQB12
00076a 21e0      	AND  R30,R0
00076b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x10:
00076c e0e2      	LDI  R30,LOW(2)
00076d 940e 0823 	CALL __EQB12
00076f 21e0      	AND  R30,R0
000770 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x11:
000771 e084      	LDI  R24,4
000772 940e 05ea 	CALL _sprintf
000774 9628      	ADIW R28,8
000775 940e 0660 	CALL _lcd_clear
000777 cfda      	RJMP SUBOPT_0xB
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x12:
000778 e0a0      	LDI  R26,0
000779 99c9      	SBIC 0x19,1
00077a e0a1      	LDI  R26,1
00077b e0e0      	LDI  R30,LOW(0)
00077c 940e 0823 	CALL __EQB12
00077e 2e0e      	MOV  R0,R30
00077f e0a0      	LDI  R26,0
000780 fcf0      	SBRC R15,0
000781 e0a1      	LDI  R26,1
000782 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x13:
000783 e0a0      	LDI  R26,0
000784 99c8      	SBIC 0x19,0
000785 e0a1      	LDI  R26,1
000786 e0e0      	LDI  R30,LOW(0)
000787 940e 0823 	CALL __EQB12
000789 2e0e      	MOV  R0,R30
00078a e0a0      	LDI  R26,0
00078b fcf0      	SBRC R15,0
00078c e0a1      	LDI  R26,1
00078d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x14:
00078e 2e0e      	MOV  R0,R30
00078f e0a0      	LDI  R26,0
000790 fcf0      	SBRC R15,0
000791 e0a1      	LDI  R26,1
000792 cfcf      	RJMP SUBOPT_0xE
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x15:
000793 940e 0832 	CALL __GTB12U
000795 220e      	AND  R0,R30
000796 e0a0      	LDI  R26,0
000797 fcf0      	SBRC R15,0
000798 e0a1      	LDI  R26,1
000799 cfcd      	RJMP SUBOPT_0xF
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x16:
00079a e001      	LDI  R16,LOW(1)
00079b 5f1f      	SUBI R17,-1
00079c 94e8      	CLT
00079d f8f0      	BLD  R15,0
00079e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x17:
00079f e0f0      	LDI  R31,0
0007a0 0fee      	LSL  R30
0007a1 1fff      	ROL  R31
0007a2 0fae      	ADD  R26,R30
0007a3 1fbf      	ADC  R27,R31
0007a4 940e 0844 	CALL __EEPROMRDW
0007a6 2766      	CLR  R22
0007a7 2777      	CLR  R23
0007a8 940e 083f 	CALL __PUTPARD1
0007aa 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x18:
0007ab 01fe      	MOVW R30,R28
0007ac 9631      	ADIW R30,1
0007ad 93fa      	ST   -Y,R31
0007ae 93ea      	ST   -Y,R30
0007af 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x19:
0007b0 e084      	LDI  R24,4
0007b1 940e 05ea 	CALL _sprintf
0007b3 9628      	ADIW R28,8
0007b4 940e 0660 	CALL _lcd_clear
0007b6 01de      	MOVW R26,R28
0007b7 9611      	ADIW R26,1
0007b8 940c 068e 	JMP  _lcd_puts
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x1A:
0007ba e0a0      	LDI  R26,0
0007bb 99c9      	SBIC 0x19,1
0007bc e0a1      	LDI  R26,1
0007bd e0e0      	LDI  R30,LOW(0)
0007be 940e 0823 	CALL __EQB12
0007c0 2e0e      	MOV  R0,R30
0007c1 2fa1      	MOV  R26,R17
0007c2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x1B:
0007c3 e0a0      	LDI  R26,0
0007c4 99c8      	SBIC 0x19,0
0007c5 e0a1      	LDI  R26,1
0007c6 e0e0      	LDI  R30,LOW(0)
0007c7 940e 0823 	CALL __EQB12
0007c9 2e0e      	MOV  R0,R30
0007ca 2fa1      	MOV  R26,R17
0007cb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x1C:
0007cc 932a      	ST   -Y,R18
0007cd 85ad      	LDD  R26,Y+13
0007ce 85be      	LDD  R27,Y+13+1
0007cf 85ef      	LDD  R30,Y+15
0007d0 89f8      	LDD  R31,Y+15+1
0007d1 9509      	ICALL
0007d2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x1D:
0007d3 89e8      	LDD  R30,Y+16
0007d4 89f9      	LDD  R31,Y+16+1
0007d5 9734      	SBIW R30,4
0007d6 8be8      	STD  Y+16,R30
0007d7 8bf9      	STD  Y+16+1,R31
0007d8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1E:
0007d9 85ad      	LDD  R26,Y+13
0007da 85be      	LDD  R27,Y+13+1
0007db 85ef      	LDD  R30,Y+15
0007dc 89f8      	LDD  R31,Y+15+1
0007dd 9509      	ICALL
0007de 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x1F:
0007df 89a8      	LDD  R26,Y+16
0007e0 89b9      	LDD  R27,Y+16+1
0007e1 9614      	ADIW R26,4
0007e2 940e 0837 	CALL __GETW1P
0007e4 83ee      	STD  Y+6,R30
0007e5 83ff      	STD  Y+6+1,R31
0007e6 81ae      	LDD  R26,Y+6
0007e7 81bf      	LDD  R27,Y+6+1
0007e8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x20:
0007e9 89a8      	LDD  R26,Y+16
0007ea 89b9      	LDD  R27,Y+16+1
0007eb 9614      	ADIW R26,4
0007ec 940e 0837 	CALL __GETW1P
0007ee 87ea      	STD  Y+10,R30
0007ef 87fb      	STD  Y+10+1,R31
0007f0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x21:
0007f1 01de      	MOVW R26,R28
0007f2 961c      	ADIW R26,12
0007f3 940e 0810 	CALL __ADDW2R15
0007f5 940e 0837 	CALL __GETW1P
0007f7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x22:
0007f8 940e 0643 	CALL __lcd_write_data
0007fa e0a3      	LDI  R26,LOW(3)
0007fb e0b0      	LDI  R27,0
0007fc 940c 0806 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x23:
0007fe e3a0      	LDI  R26,LOW(48)
0007ff 940e 061e 	CALL __lcd_write_nibble_G101
                +
000801 ec88     +LDI R24 , LOW ( 200 )
000802 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000803 9701     +SBIW R24 , 1
000804 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000805 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000806 9610      	adiw r26,0
000807 f039      	breq __delay_ms1
                 __delay_ms0:
000808 95a8      	wdr
                +
000809 ed80     +LDI R24 , LOW ( 0x7D0 )
00080a e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
00080b 9701     +SBIW R24 , 1
00080c f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
00080d 9711      	sbiw r26,1
00080e f7c9      	brne __delay_ms0
                 __delay_ms1:
00080f 9508      	ret
                 
                 __ADDW2R15:
000810 2400      	CLR  R0
000811 0daf      	ADD  R26,R15
000812 1db0      	ADC  R27,R0
000813 9508      	RET
                 
                 __ANEGW1:
000814 95f1      	NEG  R31
000815 95e1      	NEG  R30
000816 40f0      	SBCI R31,0
000817 9508      	RET
                 
                 __CBD1:
000818 2ffe      	MOV  R31,R30
000819 0fff      	ADD  R31,R31
00081a 0bff      	SBC  R31,R31
00081b 2f6f      	MOV  R22,R31
00081c 2f7f      	MOV  R23,R31
00081d 9508      	RET
                 
                 __CWD1:
00081e 2f6f      	MOV  R22,R31
00081f 0f66      	ADD  R22,R22
000820 0b66      	SBC  R22,R22
000821 2f76      	MOV  R23,R22
000822 9508      	RET
                 
                 __EQB12:
000823 17ea      	CP   R30,R26
000824 e0e1      	LDI  R30,1
000825 f009      	BREQ __EQB12T
000826 27ee      	CLR  R30
                 __EQB12T:
000827 9508      	RET
                 
                 __LEB12U:
000828 17ea      	CP   R30,R26
000829 e0e1      	LDI  R30,1
00082a f408      	BRSH __LEB12U1
00082b 27ee      	CLR  R30
                 __LEB12U1:
00082c 9508      	RET
                 
                 __LTB12U:
00082d 17ae      	CP   R26,R30
00082e e0e1      	LDI  R30,1
00082f f008      	BRLO __LTB12U1
000830 27ee      	CLR  R30
                 __LTB12U1:
000831 9508      	RET
                 
                 __GTB12U:
000832 17ea      	CP   R30,R26
000833 e0e1      	LDI  R30,1
000834 f008      	BRLO __GTB12U1
000835 27ee      	CLR  R30
                 __GTB12U1:
000836 9508      	RET
                 
                 __GETW1P:
000837 91ed      	LD   R30,X+
000838 91fc      	LD   R31,X
000839 9711      	SBIW R26,1
00083a 9508      	RET
                 
                 __GETW1PF:
00083b 9005      	LPM  R0,Z+
00083c 91f4      	LPM  R31,Z
00083d 2de0      	MOV  R30,R0
00083e 9508      	RET
                 
                 __PUTPARD1:
00083f 937a      	ST   -Y,R23
000840 936a      	ST   -Y,R22
000841 93fa      	ST   -Y,R31
000842 93ea      	ST   -Y,R30
000843 9508      	RET
                 
                 __EEPROMRDW:
000844 9611      	ADIW R26,1
000845 d002      	RCALL __EEPROMRDB
000846 2ffe      	MOV  R31,R30
000847 9711      	SBIW R26,1
                 
                 __EEPROMRDB:
000848 99e1      	SBIC EECR,EEWE
000849 cffe      	RJMP __EEPROMRDB
00084a 93ff      	PUSH R31
00084b b7ff      	IN   R31,SREG
00084c 94f8      	CLI
00084d bbae      	OUT  EEARL,R26
00084e bbbf      	OUT  EEARH,R27
00084f 9ae0      	SBI  EECR,EERE
000850 b3ed      	IN   R30,EEDR
000851 bfff      	OUT  SREG,R31
000852 91ff      	POP  R31
000853 9508      	RET
                 
                 __EEPROMWRW:
000854 d007      	RCALL __EEPROMWRB
000855 9611      	ADIW R26,1
000856 93ef      	PUSH R30
000857 2fef      	MOV  R30,R31
000858 d003      	RCALL __EEPROMWRB
000859 91ef      	POP  R30
00085a 9711      	SBIW R26,1
00085b 9508      	RET
                 
                 __EEPROMWRB:
00085c 9be1      	SBIS EECR,EEWE
00085d c002      	RJMP __EEPROMWRB1
00085e 95a8      	WDR
00085f cffc      	RJMP __EEPROMWRB
                 __EEPROMWRB1:
000860 b79f      	IN   R25,SREG
000861 94f8      	CLI
000862 bbae      	OUT  EEARL,R26
000863 bbbf      	OUT  EEARH,R27
000864 9ae0      	SBI  EECR,EERE
000865 b38d      	IN   R24,EEDR
000866 17e8      	CP   R30,R24
000867 f019      	BREQ __EEPROMWRB0
000868 bbed      	OUT  EEDR,R30
000869 9ae2      	SBI  EECR,EEMWE
00086a 9ae1      	SBI  EECR,EEWE
                 __EEPROMWRB0:
00086b bf9f      	OUT  SREG,R25
00086c 9508      	RET
                 
                 __SAVELOCR6:
00086d 935a      	ST   -Y,R21
                 __SAVELOCR5:
00086e 934a      	ST   -Y,R20
                 __SAVELOCR4:
00086f 933a      	ST   -Y,R19
                 __SAVELOCR3:
000870 932a      	ST   -Y,R18
                 __SAVELOCR2:
000871 931a      	ST   -Y,R17
000872 930a      	ST   -Y,R16
000873 9508      	RET
                 
                 __LOADLOCR6:
000874 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000875 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000876 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000877 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000878 8119      	LDD  R17,Y+1
000879 8108      	LD   R16,Y
00087a 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32A register use summary:
r0 :  31 r1 :   3 r2 :   6 r3 :   0 r4 :   3 r5 :   0 r6 :   3 r7 :   0 
r8 :  12 r9 :  11 r10:  12 r11:  12 r12:  16 r13:   5 r14:   0 r15:  24 
r16:  54 r17:  75 r18:  29 r19:   8 r20:   9 r21:  17 r22:  17 r23:   8 
r24:  32 r25:   9 r26: 199 r27:  72 r28:  38 r29:   1 r30: 405 r31: 123 
x  :  31 y  : 243 z  :  16 
Registers used: 31 out of 35 (88.6%)

ATmega32A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   5 add   :   9 
adiw  :  48 and   :   7 andi  :   8 asr   :   0 bclr  :   0 bld   :   8 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  46 
brge  :  12 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  17 
brlt  :   8 brmi  :   1 brne  :  45 brpl  :   1 brsh  :   4 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  : 209 
cbi   :   9 cbr   :   0 clc   :   0 clh   :   0 cli   :   3 cln   :   0 
clr   :  29 cls   :   0 clt   :   6 clv   :   0 clz   :   0 com   :   0 
cp    :  25 cpc   :   3 cpi   :  58 cpse  :   0 dec   :  10 des   :   0 
eor   :   1 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   7 inc   :   9 jmp   :  28 ld    :  49 ldd   :  80 ldi   : 250 
lds   :  19 lpm   :  16 lsl   :   3 lsr   :   0 mov   :  79 movw  :  30 
mul   :   1 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   0 
ori   :   7 out   :  26 pop   :   5 push  :   5 rcall :  23 ret   :  58 
reti  :   2 rjmp  : 138 rol   :   3 ror   :   0 sbc   :   3 sbci  :   2 
sbi   :  17 sbic  :  19 sbis  :  28 sbiw  :  32 sbr   :   0 sbrc  :  11 
sbrs  :  13 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   3 
ses   :   0 set   :   6 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    : 115 std   :  33 sts   :  17 sub   :   4 subi  :  30 swap  :   1 
tst   :   4 wdr   :   2 
Instructions used: 66 out of 116 (56.9%)

ATmega32A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0010f6   4050    292   4342   32768  13.3%
[.dseg] 0x000060 0x00026a      0     10     10    2048   0.5%
[.eseg] 0x000000 0x00007d      0    125    125    1024  12.2%

Assembly complete, 0 errors, 13 warnings
